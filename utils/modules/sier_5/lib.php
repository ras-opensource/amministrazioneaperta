<?php

/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
include_once "config.php";
include_once "system_lib.php";

#Costanti
Class AA_Sier_Const extends AA_Const
{
    const AA_USER_FLAG_SIER="sier";
    const AA_USER_FLAG_SIER_OC="sier_oc";

    const AA_USER_FLAG_SIER_PREF="sier_pref";

    //percorso file
    const AA_SIER_ALLEGATI_PATH="/sier/allegati";
    const AA_SIER_IMMAGINI_PUBLIC_PATH="/img";
    const AA_SIER_ALLEGATI_PUBLIC_PATH="/pubblicazioni/sier/docs.php";

    //Flags
    const AA_SIER_FLAG_CARICAMENTO_DATIGENERALI=256;
    const AA_SIER_FLAG_CARICAMENTO_CORPO_ELETTORALE=1;
    const AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI=128;
    const AA_SIER_FLAG_CARICAMENTO_AFFLUENZA=2;
    const AA_SIER_FLAG_CARICAMENTO_RISULTATI=4;
    const AA_SIER_FLAG_EXPORT_AFFLUENZA=8;
    const AA_SIER_FLAG_EXPORT_RISULTATI=16;
    const AA_SIER_FLAG_ACCESSO_OPERATORI=32;
    const AA_SIER_FLAG_CARICAMENTO_RENDICONTI=64;

    static protected $aFlags=null;
    public static function GetFlags()
    {
        if(static::$aFlags==null)
        {
            static::$aFlags=array(
                32=>"Abilita l'accesso da parte degli operatori comunali",
                256=>"Abilita l'aggiornamento dei dati generali dei comuni da parte degli operatori",
                1=>"Abilita l'aggiornamento dei dati del corpo elettorale dei comuni da parte degli operatori",
                128=>"Abilita l'aggiornamento delle comunicazioni da parte degli operatori",
                2=>"Abilita l'aggiornamento dei dati sull'affluenza da parte degli operatori",
                4=>"Abilita l'aggiornamento dei risultati elettorali da parte degli operatori",
                64=>"Abilita l'aggiornamento dei resoconti dei comuni da parte degli operatori",
                16=>"Abilita l'esportazione dei risultati per la visualizzazione sul sito istituzionale"
            );
        }
        return static::$aFlags;
    }

    static protected $aFlagsForTags=null;
    public static function GetFlagsForTags()
    {
        if(static::$aFlagsForTags==null)
        {
            static::$aFlagsForTags=array(
                32=>"accesso",
                256=>"dati generali",
                1=>"corpo elettorale",
                2=>"affluenza",
                4=>"risultati",
                64=>"rendiconti",
                8=>"export affluenza",
                16=>"export risultati"
            );
        }
        return static::$aFlagsForTags;
    }

    //Circoscrizioni
    const AA_SIER_CIRCOSCRIZIONE_CAGLIARI=1;
    const AA_SIER_CIRCOSCRIZIONE_CARBONIAIGLESIAS=2;
    const AA_SIER_CIRCOSCRIZIONE_MEDIOCAMPIDANO=4;
    const AA_SIER_CIRCOSCRIZIONE_NUORO=8;
    const AA_SIER_CIRCOSCRIZIONE_OGLIASTRA=16;
    const AA_SIER_CIRCOSCRIZIONE_OLBIATEMPIO=32;
    const AA_SIER_CIRCOSCRIZIONE_ORISTANO=64;
    const AA_SIER_CIRCOSCRIZIONE_SASSARI=128;

    protected static $aCircoscrizioni=null;

    public static function GetCircoscrizioni()
    {
        if(static::$aCircoscrizioni==null)
        {
            static::$aCircoscrizioni=array(
                static::AA_SIER_CIRCOSCRIZIONE_CAGLIARI=>"Cagliari",
                static::AA_SIER_CIRCOSCRIZIONE_CARBONIAIGLESIAS=>"Carbonia-Iglesias",
                static::AA_SIER_CIRCOSCRIZIONE_MEDIOCAMPIDANO=>"Medio Campidano",
                static::AA_SIER_CIRCOSCRIZIONE_NUORO=>"Nuoro",
                static::AA_SIER_CIRCOSCRIZIONE_OGLIASTRA=>"Ogliastra",
                static::AA_SIER_CIRCOSCRIZIONE_OLBIATEMPIO=>"Olbia-Tempio",
                static::AA_SIER_CIRCOSCRIZIONE_ORISTANO=>"Oristano",
                static::AA_SIER_CIRCOSCRIZIONE_SASSARI=>"Sassari"
            );
        }

        return static::$aCircoscrizioni;
    }

    public static function GetCircoscrizione($id=0)
    {
        $circoscrizioni=static::GetCircoscrizioni();
        if(isset($circoscrizioni[$id]))
        {
            return array('id'=>$id,"value"=>$circoscrizioni[$id]);
        }

        return null;
    }

    protected static $aTipoAllegati=null;
    const AA_SIER_ALLEGATO_INFORMAZIONI=1;
    const AA_SIER_ALLEGATO_NORMATIVA=2;
    const AA_SIER_ALLEGATO_MODULISTICA=4;
    const AA_SIER_ALLEGATO_COMUNICAZIONI=8;
    const AA_SIER_ALLEGATO_RISULTATI=16;
    const AA_SIER_ALLEGATO_AVVISI=32;
    const AA_SIER_ALLEGATO_CIRCOLARI=64;
    const AA_SIER_ALLEGATO_ISTRUZIONI=128;
    const AA_SIER_ALLEGATO_MANIFESTI=256;

    public static function GetTipoAllegati()
    {
        if(static::$aTipoAllegati==null)
        {
            static::$aTipoAllegati=array(
                static::AA_SIER_ALLEGATO_AVVISI=>"Avvisi",
                static::AA_SIER_ALLEGATO_CIRCOLARI=>"Circolari",
                static::AA_SIER_ALLEGATO_COMUNICAZIONI=>"Comunicazioni",
                static::AA_SIER_ALLEGATO_INFORMAZIONI=>"Info generali",
                static::AA_SIER_ALLEGATO_ISTRUZIONI=>"Istruzioni",
                static::AA_SIER_ALLEGATO_MANIFESTI=>"Manifesti",
                static::AA_SIER_ALLEGATO_MODULISTICA=>"Modulistica",
                static::AA_SIER_ALLEGATO_NORMATIVA=>"Normativa",
                static::AA_SIER_ALLEGATO_RISULTATI=>"Risultati"
            );
        }

        return static::$aTipoAllegati;
    }

    protected static $aRendicontiServizi=null;
    const AA_SIER_RENDICONTI_SERVIZI_PROPAGANDA_ELETTORALE=1;
    const AA_SIER_RENDICONTI_SERVIZI_STAMPATI_SOFTWARE=2;
    const AA_SIER_RENDICONTI_SERVIZI_TRASPORTO_ARREDAMENTO=3;
    const AA_SIER_RENDICONTI_SERVIZI_MATERIALE_ALLESTIMENTO=4;
    const AA_SIER_RENDICONTI_SERVIZI_SPESE_POSTALI=5;
    const AA_SIER_RENDICONTI_SERVIZI_ALTRO=6;
    const AA_SIER_RENDICONTI_SERVIZI_COLLEGAMENTI=7;
    public static function GetTipoRendicontiServizi()
    {
        if(static::$aRendicontiServizi==null)
        {
            static::$aRendicontiServizi=array(
                static::AA_SIER_RENDICONTI_SERVIZI_COLLEGAMENTI=>"Collegamenti telefonici straordinari",
                static::AA_SIER_RENDICONTI_SERVIZI_MATERIALE_ALLESTIMENTO=>"Materiale di consumo per l'allestimento dei seggi",
                static::AA_SIER_RENDICONTI_SERVIZI_PROPAGANDA_ELETTORALE=>"Propaganda elettorale",
                static::AA_SIER_RENDICONTI_SERVIZI_STAMPATI_SOFTWARE=>"Stampati e software",
                static::AA_SIER_RENDICONTI_SERVIZI_TRASPORTO_ARREDAMENTO=>"Trasporto del materiale e dell'arredo dei seggi",
                static::AA_SIER_RENDICONTI_SERVIZI_SPESE_POSTALI=>"Spese postali e telegrafiche",
                static::AA_SIER_RENDICONTI_SERVIZI_ALTRO=>"Altre spese indispensabili"
            );
        }

        return static::$aRendicontiServizi;
    }

    protected static $aDestinatari=null;
    const AA_SIER_ALLEGATO_COMUNI=1;
    const AA_SIER_ALLEGATO_CANDIDATI=2;
    const AA_SIER_ALLEGATO_PREFETTURE=4;
    const AA_SIER_ALLEGATO_CITTADINI=8;
    const AA_SIER_ALLEGATO_SEGGI=16;


    public static function GetDestinatari()
    {
        if(static::$aDestinatari==null)
        {
            static::$aDestinatari=array(
                static::AA_SIER_ALLEGATO_CANDIDATI=>"Candidati",
                static::AA_SIER_ALLEGATO_CITTADINI=>"Cittadini",
                static::AA_SIER_ALLEGATO_COMUNI=>"Comuni",
                static::AA_SIER_ALLEGATO_PREFETTURE=>"Prefetture",
                static::AA_SIER_ALLEGATO_SEGGI=>"Seggi"
            );
        }

        return static::$aDestinatari;
    }
}

#Classe Coalizioni
Class AA_SierCoalizioni
{
    protected $aProps=array();
    
    //Importa i valori da un array
    protected function Parse($values=null)
    {
        if(is_array($values))
        {
            foreach($values as $key=>$value)
            {
                if(isset($this->aProps[$key]) && $key != "") $this->aProps[$key]=$value;
            }
        }
    }
    public function GetListe()
    {
        return $this->aProps['liste'];
    }

    public function toArray($full=false)
    {
        if(!$full)
        {
            return $this->aProps;
        }
        else
        {
            return $this->aProps;
        }
    }

    public function __construct($params=null)
    {
        //Definisce le proprietà dell'oggetto e i valori di default
        $this->aProps['id']=0;
        $this->aProps['id_sier']=0;
        $this->aProps['denominazione']="";
        $this->aProps['nome_candidato']="";
        $this->aProps['liste']=array();
        $this->aProps['image']="";
        $this->aProps['cv']="";
        $this->aProps['cg']="";
        $this->aProps['ordine']=0;

        if(is_array($params)) $this->Parse($params);
    }

    //imposta il valore di una propietà
    public function SetProp($prop="",$value="")
    {
        if($prop !="" && isset($this->aProps[$prop])) $this->aProps[$prop]=$value;
    }

    //restituisce il valore di una propietà
    public function GetProp($prop="")
    {
        if($prop !="" && isset($this->aProps[$prop])) return $this->aProps[$prop];
        else return "";
    }

    //restituisce tutte le propietà
    public function GetProps()
    {
        return $this->aProps;
    }
}

#Classe Lista
Class AA_SierLista
{
    protected $aProps=array();
    
    //Importa i valori da un array
    protected function Parse($values=null)
    {
        if(is_array($values))
        {
            foreach($values as $key=>$value)
            {
                if(isset($this->aProps[$key]) && $key != "") $this->aProps[$key]=$value;
            }
        }
    }

    public function toArray($full=false)
    {
        if(!$full)
        {
            return $this->aProps;
        }
        else
        {
            return $this->aProps;
        }
    }

    public function GetCandidati($circoscrizione="")
    {
        return array();
    }

    public function __construct($params=null)
    {
        //Definisce le proprietà dell'oggetto e i valori di default
        $this->aProps['id']=0;
        $this->aProps['id_coalizione']=0;
        $this->aProps['denominazione']="";
        $this->aProps['image']="";
        $this->aProps['ordine']=0;
        $this->aProps['candidati']=array();
        foreach(AA_Sier_Const::GetCircoscrizioni() as $key=>$val)
        {
            $this->aProps["ordine_".$key]=0;
        }

        if(is_array($params)) $this->Parse($params);
    }

    //imposta il valore di una propietà
    public function SetProp($prop="",$value="")
    {
        if($prop !="" && isset($this->aProps[$prop])) $this->aProps[$prop]=$value;
    }

    //restituisce il valore di una propietà
    public function GetProp($prop="")
    {
        if($prop !="" && isset($this->aProps[$prop])) return $this->aProps[$prop];
        else return "";
    }

    //restituisce tutte le propietà
    public function GetProps()
    {
        return $this->aProps;
    }
}

#Classe CAndidato
Class AA_SierCandidato
{
    protected $aProps=array();
    
    //Importa i valori da un array
    protected function Parse($values=null)
    {
        if(is_array($values))
        {
            foreach($values as $key=>$value)
            {
                if(isset($this->aProps[$key]) && $key != "") $this->aProps[$key]=$value;
            }
        }
    }

    public function toArray($full=false)
    {
        if(!$full)
        {
            return $this->aProps;
        }
        else
        {
            return $this->aProps;
        }
    }
    public function __construct($params=null)
    {
        //Definisce le proprietà dell'oggetto e i valori di default
        $this->aProps['id']=0;
        $this->aProps['ordine']=0;
        $this->aProps['id_lista']=0;
        $this->aProps['lista']="";
        $this->aProps['id_coalizione']=0;
        $this->aProps['coalizione']="";
        $this->aProps['id_circoscrizione']=0;
        $this->aProps['circoscrizione']=0;
        $this->aProps['nome']="";
        $this->aProps['cognome']="";
        $this->aProps['cf']="";
        $this->aProps['cv']="";
        $this->aProps['cg']="";

        if(is_array($params)) $this->Parse($params);
    }

    //imposta il valore di una propietà
    public function SetProp($prop="",$value="")
    {
        if($prop !="" && isset($this->aProps[$prop])) $this->aProps[$prop]=$value;
    }

    //restituisce il valore di una propietà
    public function GetProp($prop="")
    {
        if($prop !="" && isset($this->aProps[$prop])) return $this->aProps[$prop];
        else return "";
    }

    //restituisce tutte le propietà
    public function GetProps()
    {
        return $this->aProps;
    }
}

#Classe Comune
Class AA_SierComune
{
    protected $aProps=array();
    
    //Importa i valori da un array
    protected function Parse($values=null)
    {
        if(is_array($values))
        {
            foreach($values as $key=>$value)
            {
                if(isset($this->aProps[$key]) && $key != "") $this->aProps[$key]=$value;
            }
        }
    }

    public function toArray($full=false)
    {
        if(!$full)
        {
            return $this->aProps;
        }
        else
        {
            if($this->aProps['risultati']=="") $this->aProps['risultati'] = $this->GetRisultati();
            if($this->aProps['feed_risultati']=="") $this->aProps['feed_risultati'] = $this->GetFeedRisultati();
            $this->aProps['logs']=$this->GetLogs();

            return $this->aProps;
        }
    }
    public function AddLog($msg="",$user="",$oc="",$date="")
    {
        if($date=="") $date=date("Y-m-d H:i:s");
        if($user=="")
        {
            $user=AA_User::GetCurrentUser();
            $user=$user->GetUsername();
        }

        if(!is_array($this->aProps['logs'])) $this->aProps['logs']=array();

        $uid=uniqid();
        $this->aProps['logs'][$uid]=array("data"=>$date,"user"=>$user,"oc"=>$oc,"msg"=>$msg);

        if(sizeof($this->aProps['logs'])>1000) $this->aProps['logs']=array_slice($this->aProps['logs'], -1000);
    }

    public function GetOperatori($bAsObject=false)
    {
        $ret="";
        if($bAsObject) $ret=array();
        if(!isset($this->aProps['operatori']) || $this->aProps['operatori']=="") return $ret;
        
        if($bAsObject)
        {
            $ret=json_decode($this->aProps['operatori'],true);
            if($ret) return $ret;
            else
            {
                AA_Log::Log(__METHOD__." - Errore nell'importazione degli operatori del comune: ".$this->aProps['id'],100);
                return array();
            }
        }

        return $this->aProps['operatori'];
    }

    public function GetComunicazioni($bAsObject=false)
    {
        $ret="";
        if($bAsObject) $ret=array();
        if(!isset($this->aProps['comunicazioni']) || $this->aProps['comunicazioni']=="") return $ret;
        
        if($bAsObject)
        {
            $ret=json_decode($this->aProps['comunicazioni'],true);
            if($ret) return $ret;
            else
            {
                AA_Log::Log(__METHOD__." - Errore nell'importazione delle comunicazioni del comune: ".$this->aProps['id'],100);
                return array();
            }
        }

        return $this->aProps['comunicazioni'];
    }

    public function GetSavedLogs($bAsObject=false)
    {
        if($this->aProps['id']>0)
        {
            $db= new AA_Database();
            $query="SELECT logs FROM ".AA_Sier::AA_COMUNI_DB_TABLE." WHERE id='".$this->aProps['id']."' LIMIT 1";

            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - ".$db->GetLastErrorMessage(),100);
            }

            $rs=$db->GetResultSet();
            if($rs[0]['logs'] !="") $logs = json_decode($rs[0]['logs'],true);
            else $logs=null;
        }

        $ret="";
        if($bAsObject) $ret=array();
        if(!$logs) return $ret;
        
        if($bAsObject)
        {
            return $logs;
        }

        return $rs[0]['logs'];
    }

    public function GetLogs($bAsObject=false)
    {
        if($bAsObject) return array_merge($this->GetSavedLogs(true),$this->aProps['logs']);
        else return json_encode(array_merge($this->GetSavedLogs(true),$this->aProps['logs']));
    }

    public function GetAffluenza($bAsObject=false)
    {
        $ret="";
        if($bAsObject) $ret=array();
        if(!isset($this->aProps['affluenza']) || $this->aProps['affluenza']=="") return $ret;
        
        if($bAsObject)
        {
            $ret=json_decode($this->aProps['affluenza'],true);
            //AA_Log::Log(__METHOD__." - affluenza: ".print_r($ret,true),100);

            if($ret) return $ret;
            else
            {
                AA_Log::Log(__METHOD__." - Errore nell'importazione dell'affluenza del comune: ".$this->aProps['id'],100);
                return array();
            }
        }

        return $this->aProps['affluenza'];
    }

    public function GetAnalisiRisultati($bAsObject=false)
    {
        $ret="";
        if($bAsObject) $ret=array();
        if(!isset($this->aProps['analisi_risultati']) || $this->aProps['analisi_risultati']=="") return $ret;
        
        if($bAsObject)
        {
            $ret=json_decode($this->aProps['analisi_risultati'],true);
            //AA_Log::Log(__METHOD__." - affluenza: ".print_r($ret,true),100);

            if($ret) return $ret;
            else
            {
                AA_Log::Log(__METHOD__." - Errore nell'importazione dell'analisi dei risultati del comune: ".$this->aProps['id'],100);
                return array();
            }
        }

        return $this->aProps['analisi_risultati'];
    }

    public function GetRisultati($bAsObject=false)
    {
        if($this->aProps['risultati'] != "")
        {
            if($bAsObject) 
            {
                $feed = json_encode($this->aProps['risultati'],true);
                if(!$feed) return array();
                else return $feed;
            }
            else return $this->aProps['risultati'];
        } 

        if($this->aProps['id']>0)
        {
            $db= new AA_Database();
            $query="SELECT risultati FROM ".AA_Sier::AA_COMUNI_DB_TABLE." WHERE id='".$this->aProps['id']."' LIMIT 1";

            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - ".$db->GetLastErrorMessage(),100);
            }

            $rs=$db->GetResultSet();
            if($rs[0]['risultati'] !="") $feed = json_decode($rs[0]['risultati'],true);
            else $feed=null;
        }

        $ret="";
        if($bAsObject) $ret=array();
        if(!$feed) return $ret;
        
        if($bAsObject)
        {
            return $feed;
        }

        return $rs[0]['risultati'];
    }

    public function GetRendiconti($bAsObject=false)
    {
        if($this->aProps['rendiconti'] != "")
        {
            if($bAsObject) 
            {
                $feed = json_encode($this->aProps['rendiconti'],true);
                if(!$feed) return array();
                else return $feed;
            }
            else return $this->aProps['rendiconti'];
        } 

        if($this->aProps['id']>0)
        {
            $db= new AA_Database();
            $query="SELECT rendiconti FROM ".AA_Sier::AA_COMUNI_DB_TABLE." WHERE id='".$this->aProps['id']."' LIMIT 1";

            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - ".$db->GetLastErrorMessage(),100);
            }

            $rs=$db->GetResultSet();
            if($rs[0]['rendiconti'] !="") $feed = json_decode($rs[0]['rendiconti'],true);
            else $feed=null;
        }

        $ret="";
        if($bAsObject) $ret=array();
        if(!$feed) return $ret;
        
        if($bAsObject)
        {
            return $feed;
        }

        return $rs[0]['rendiconti'];
    }

    public function SetOperatori($operatori="")
    {
        if(is_array($operatori))
        {
            if(sizeof($operatori)>0)
            {
                $operatori=json_encode($operatori);
                if($operatori===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica degli operatori. ".print_r($operatori,true),100);
                    return false;
                }    
            }
            else $operatori="";
        }

        $this->SetProp("operatori",$operatori);
        return true;
    }

    public function SetComunicazioni($comunicazioni="")
    {
        if(is_array($comunicazioni))
        {
            if(sizeof($comunicazioni)>0)
            {
                $comunicazioni=json_encode($comunicazioni);
                if($comunicazioni===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica degli operatori. ".print_r($comunicazioni,true),100);
                    return false;
                }    
            }
            else $comunicazioni="";
        }

        $this->SetProp("comunicazioni",$comunicazioni);
        return true;
    }

    public function SetAffluenza($val="")
    {
        if(is_array($val))
        {
            if(sizeof($val)>0)
            {
                $affluenza=json_encode($val);
                if($affluenza===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica degli operatori. ".print_r($affluenza,true),100);
                    return false;
                }    
            }
            else $affluenza="";
        }

        $this->SetProp("affluenza",$affluenza);
        return true;
    }

    public function SetAnalisiRisultati($val="")
    {
        if(is_array($val))
        {
            if(sizeof($val)>0)
            {
                $affluenza=json_encode($val);
                if($affluenza===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica degli operatori. ".print_r($affluenza,true),100);
                    return false;
                }    
            }
            else $affluenza="";
        }

        $this->SetProp("analisi_risultati",$affluenza);
        return true;
    }

    public function SetRisultati($val="")
    {
        if(is_array($val))
        {
            if(sizeof($val)>0)
            {
                $risultati=json_encode($val);
                if($risultati===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica dei risultati. ".print_r($risultati,true),100);
                    return false;
                }    
            }
            else $risultati="";
        }

        $this->SetProp("risultati",$risultati);
        return true;
    }

    public function SetRendiconti($val="")
    {
        if(is_array($val))
        {
            if(sizeof($val)>0)
            {
                $rendiconti=json_encode($val);
                if($rendiconti===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica dei rendiconti. ".print_r($rendiconti,true),100);
                    return false;
                }    
            }
            else $rendiconti="";
        }

        $this->SetProp("rendiconti",$rendiconti);
        return true;
    }


    public function SetFeedRisultati($val="")
    {
        if(is_array($val))
        {
            if(sizeof($val)>0)
            {
                $risultati=json_encode($val);
                if($risultati===false)
                {
                    AA_Log::Log(__METHOD__." - Errore nella codifica del feed risultati. ".print_r($risultati,true),100);
                    return false;
                }    
            }
            else $risultati="";
        }

        $this->SetProp("feed_risultati",$risultati);
        return true;
    }


    public function __construct($params=null)
    {
        //Definisce le proprietà dell'oggetto e i valori di default
        $this->aProps['id']=0;
        $this->aProps['id_sier']=0;
        $this->aProps['id_circoscrizione']=0;
        $this->aProps['circoscrizione']="";
        $this->aProps['denominazione']="";
        $this->aProps['pec']="";
        $this->aProps['contatti']="";
        $this->aProps['indirizzo']="";
        $this->aProps['sezioni']=0;
        $this->aProps['elettori_m']=0;
        $this->aProps['elettori_f']=0;
        $this->aProps['affluenza']="";
        $this->aProps['risultati']="";
        $this->aProps['analisi_risultati']="";
        $this->aProps['rendiconti']="";
        $this->aProps['operatori']="";
        $this->aProps['comunicazioni']="";
        $this->aProps['lastupdate']="";
        $this->aProps['feed_risultati']="";
        $this->aProps['sezioni_ordinarie']=0;
        $this->aProps['sezioni_ospedaliere']=0;
        $this->aProps['luoghi_cura_sub100']=0;
        $this->aProps['luoghi_cura_over100']=0;
        $this->aProps['elettori_esteri_f']=0;
        $this->aProps['luoghi_detenzione']=0;
        $this->aProps['elettori_esteri_m']=0;
        $this->aProps['logs']=array();

        if(is_array($params)) $this->Parse($params);
    }

    //restiruisce il feed dei risultati (cached)
    public function GetFeedRisultati($bAsObject=false)
    {
        if($this->aProps['feed_risultati'] != "")
        {
            if($bAsObject) 
            {
                $feed = json_encode($this->aProps['feed_risultati'],true);
                if(!$feed)
                {
                    return array(
                        "denominazione"=>$this->aProps['denominazione'],
                        "circoscrizione"=>$this->aProps['circoscrizione'],
                        "id_circoscrizione"=>intVal($this->aProps['id_circoscrizione']),
                        "sezioni"=>intVal($this->aProps['sezioni']),
                        "elettori_m"=>intVal($this->aProps['elettori_m']),
                        "elettori_f"=>intVal($this->aProps['elettori_f']),
                        "elettori_tot"=>$this->aProps['elettori_m']+$this->aProps['elettori_f'],
                        "affluenza"=>array(),
                        "risultati"=>array(
                            "sezioni_scrutinate"=>0,
                            "votanti_m"=>0,
                            "votanti_f"=>0,
                            "votanti_tot"=>0,
                            "votanti_percent"=>0,
                            "voti_presidente"=>array(
                                "sezioni_scrutinate"=>0,
                                "voti_tot"=>0
                            ),
                            "voti_lista"=>array(
                                "sezioni_scrutinate"=>0,
                                "voti_tot"=>0
                            ),
                            "voti_candidato"=>array(
                                "sezioni_scrutinate"=>0,
                                "voti_tot"=>0
                            )
                        ),
                    );
                } 
                else return $feed;
            }
            else return $this->aProps['feed_risultati'];
        }

        if($this->aProps['id']>0)
        {
            $db= new AA_Database();
            $query="SELECT feed_risultati FROM ".AA_Sier::AA_COMUNI_DB_TABLE." WHERE id='".$this->aProps['id']."' LIMIT 1";

            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - ".$db->GetLastErrorMessage(),100);
            }

            $rs=$db->GetResultSet();
            if($rs[0]['feed_risultati'] !="") $feed = json_decode($rs[0]['feed_risultati'],true);
            else $feed=null;
        }

        if(!$feed)
        {
            //struttura vuota
            $feed=array(
                "denominazione"=>$this->aProps['denominazione'],
                "circoscrizione"=>$this->aProps['circoscrizione'],
                "id_circoscrizione"=>intVal($this->aProps['id_circoscrizione']),
                "sezioni"=>intVal($this->aProps['sezioni']),
                "elettori_m"=>intVal($this->aProps['elettori_m']),
                "elettori_f"=>intVal($this->aProps['elettori_f']),
                "elettori_tot"=>$this->aProps['elettori_m']+$this->aProps['elettori_f'],
                "affluenza"=>array(),
                "risultati"=>array(
                    "sezioni_scrutinate"=>0,
                    "votanti_m"=>0,
                    "votanti_f"=>0,
                    "votanti_tot"=>0,
                    "votanti_percent"=>0,
                    "voti_presidente"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0
                    ),
                    "voti_lista"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0
                    ),
                    "voti_candidato"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0
                    )
                ),
            );

            if($bAsObject) return $feed;
            else return json_encode($feed);
        }
        else
        {
            if($bAsObject) return $feed;
            else return $rs[0]['feed_risultati'];
        }
    }

    //imposta il valore di una propietà
    public function SetProp($prop="",$value="")
    {
        if($prop !="" && isset($this->aProps[$prop])) $this->aProps[$prop]=$value;
    }

    //restituisce il valore di una propietà
    public function GetProp($prop="")
    {
        if($prop !="" && isset($this->aProps[$prop])) return $this->aProps[$prop];
        else return "";
    }

    //restituisce tutte le propietà
    public function GetProps()
    {
        return $this->aProps;
    }
}

#Classe oggetto elezioni
Class AA_Sier extends AA_Object_V2
{
    //tabella dati db
    const AA_DBTABLE_DATA="aa_sier_data";
    const AA_ALLEGATI_DB_TABLE="aa_sier_allegati";
    const AA_COALIZIONI_DB_TABLE="aa_sier_coalizioni";
    const AA_LISTE_DB_TABLE="aa_sier_liste";
    const AA_CANDIDATI_DB_TABLE="aa_sier_candidati";
    const AA_COMUNI_DB_TABLE="aa_sier_comuni";

    //Funzione di cancellazione
    protected function DeleteData($idData = 0, $user = null)
    {
        if(!$this->IsValid() || $this->IsReadOnly() || $idData == 0) return false;

        if($idData != $this->nId_Data && $idData != $this->nId_Data_Rev) return false;

        //Cancella tutti gli allegati
        foreach($this->GetAllegati($idData) as $curAllegato)
        {
            if(!$this->DeleteAllegato($curAllegato,$user))
            {
                return false;
            }
        }

        //Cancella comuni
        if(!$this->DeleteComuni(null,$user))
        {
            return false;
        }

        //Cancella le coalizioni e le liste
        foreach($this->GetCoalizioni() as $curCoalizione)
        {
            if(!$this->DeleteCoalizione($curCoalizione,$user))
            {
                return false;
            }
        }

        return parent::DeleteData($idData,$user);
    }

    public function serialize()
    {
        $result=get_object_vars($this);
        $comuni=$this->GetComuni();
        $coalizioni=$this->GetCoalizioni();
        $liste=$this->GetListe();
        $candidati=$this->GetCandidati();
        $result['comuni']=array();
        foreach($comuni as $idComune=>$curComune)
        {
            $result['comuni'][$idComune]=$curComune->toArray(true);
        }

        $result['coalizioni']=array();
        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {
            $result['coalizioni'][$idCoalizione]=$curCoalizione->toArray(true);
        }
        
        $result['liste']=array();
        foreach($liste as $idlista=>$curlista)
        {
            $result['liste'][$idlista]=$curlista->toArray(true);
        }

        $result['candidati']=array();
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            $result['candidati'][$idCandidato]=$curCandidato->toArray(true);
        }

        return json_encode($result);
    }

    //Analizza i risultati di tutti i comuni
    public function UpdateAnalisiRisultati($comune=null,$circoscrizione=null)
    {
        if($comune==null)
        {
            $comuni=$this->GetComuni($circoscrizione);
        }
        else $comuni=array($comune);

        $db=new AA_Database();
        foreach($comuni as $curComune)
        {
            $analisi=$this->AnalizeRisultati(null,$curComune->GetProp("id_circoscrizione"),$curComune);
            $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET analisi_risultati='".addslashes(json_encode($analisi))."' WHERE id='".$curComune->GetProp("id")."' AND id_sier='".$this->nId_Data."' LIMIT 1";

            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - ".$db->GetLastErrorMessage(),100);
                return false;
            }
        }

        return true;
    }

    public function AnalizeComunicazioni($comunicazioni=null,$comune=null)
    {
        $analisi=array(false,array(),false);
        if(!$this->IsValid())
        {
            $analisi[0]=true;
            $analisi[1][]="Oggetto non valido.";
            $analisi[2]=true;

            return $analisi;
        }

        if(!($comune instanceof AA_SierComune) && !is_array($comunicazioni))
        {
            $analisi[0]=true;
            $analisi[1][]="Comune e comunicazioni non validi.";
            $analisi[2]=true;

            return $analisi;
        }

        if(!is_array($comunicazioni)) $comunicazioni=$comune->GetComunicazioni(true);
        $giornate=$this->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        $ora=date("Y-m-d H:i");

        foreach($giornateKeys as $curGiornata)
        {
            if($curGiornata==$now)
            {
                if(!isset($comunicazioni[$now]))
                {
                    //AA_Log::Log(__METHOD__." - ora inizio:".$curGiornata." ".$giornate[$curGiornata]['orario_apertura']." - ora: ".$ora,100);
                    if( $curGiornata." ".$giornate[$curGiornata]['orario_apertura'] < $ora)
                    {
                        AA_Log::Log(__METHOD__." - l'ora di inizio e dopo. ".$curGiornata,100);
                        $analisi[0]=true;
                        $analisi[1][]="Manca l'apertura dei seggi per la giornata del ".$curGiornata;
                        $analisi[2]=true;
                    }

                    if( $curGiornata." ".$giornate[$curGiornata]['orario_chiusura'] < $ora)
                    {
                        $analisi[0]=true;
                        $analisi[1][]="Manca la chiusura dei seggi per la giornata del ".$curGiornata;
                        $analisi[2]=true;
                    }
                }
                else
                {
                    if($comunicazioni[$now]['inizio']==0 && $curGiornata." ".$giornate[$curGiornata]['orario_apertura'] < $ora)
                    {
                        $analisi[0]=true;
                        $analisi[1][]="Manca l'apertura dei seggi per la giornata del ".$curGiornata;
                        $analisi[2]=true;
                    }
    
                    if($comunicazioni[$now]['fine']==0 && $curGiornata." ".$giornate[$curGiornata]['orario_chiusura'] < $ora)
                    {
                        $analisi[0]=true;
                        $analisi[1][]="Manca la chiusura dei seggi per la giornata del ".$curGiornata;
                        $analisi[2]=true;
                    }
                }
            }

            if($curGiornata < $now)
            {
                if(!isset($comunicazioni[$curGiornata]) || $comunicazioni[$curGiornata]['inizio']==0 || $comunicazioni[$curGiornata]['fine']==0)
                {
                    $analisi[0]=true;
                    if(!isset($comunicazioni[$curGiornata]['inizio']) || $comunicazioni[$curGiornata]['inizio']==0) $analisi[1][]="Manca la comunicazione dell'apertura dei seggi per la giornata del ".$curGiornata;
                    if(!isset($comunicazioni[$curGiornata]['fine']) || $comunicazioni[$curGiornata]['fine']==0) $analisi[1][]="Manca la comunicazione della chiusura dei seggi per la giornata del ".$curGiornata;
                    $analisi[2]=true;
                }
            }
        }

        if(sizeof($analisi[1])==0)
        {
            $analisi[1][]="Non ci sono criticita'";
        }

        return $analisi;
    }

    public function AnalizeRendiconti($rendiconti=null,$comune=null)
    {
        $result=array(false,array(),false);
        if($rendiconti==null && $comune instanceof AA_SierComune)
        {
            $rendiconti=$comune->GetRendiconti(true);
            //AA_Log::Log(__METHOD__." - risultati: ".print_r($risultati,true),100);
        }

        //periodo autorizzato
        if(isset($rendiconti['comune']['straordinario']['periodo_max']))
        {
            $periodo_max=explode("|",$rendiconti['comune']['straordinario']['periodo_max']);
            if($periodo_max[0]>=$periodo_max[1])
            {
                $result[0]=true;
                $result[1][]="Periodo autorizzato - La data di inizio deve essere precedente a quella di fine.";
            }
        }

        //periodo effettivo
        if(isset($rendiconti['comune']['straordinario']['periodo_effettivo']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_effettivo']);
            if($periodo_max[0]>=$periodo[1])
            {
                $result[0]=true;
                $result[1][]="Periodo effettivo - La data di inizio deve essere precedente a quella di fine.";
            }

            if(!isset($rendiconti['comune']['straordinario']['periodo_max']))
            {
                $result[0]=true;
                $result[1][]="Periodo effetttivo deve essere ricompreso all'interno del periodo autorizzato.";
            }
            else
            {
                $periodo_max=explode("|",$rendiconti['comune']['straordinario']['periodo_max']);
                if($periodo_max[0]>$periodo[0])
                {
                    $result[0]=true;
                    $result[1][]="Periodo effettivo - La data di inizio non deve essere precedente a quella di inizio del periodo autorizzato.";
                }

                if($periodo_max[1]<$periodo[1])
                {
                    $result[0]=true;
                    $result[1][]="Periodo effettivo - La data di fine non deve essere successiva a quella di fine del periodo autorizzato.";
                }
            }
        }

        //controllo ore
        if(isset($rendiconti['comune']['straordinario']['ore_effettive']))
        {
           if(!isset($rendiconti['comune']['straordinario']['ore_max']))
           {
                $result[0]=true;
                $result[1][]="Occorre impostare le ore autorizzate.";
           }
           else
           {
                if($rendiconti['comune']['straordinario']['ore_effettive']>$rendiconti['comune']['straordinario']['ore_max'])
                {
                    $result[0]=true;
                    $result[1][]="Le ore di svolgimento effettivo non possono superare le ore autorizzate.";
                }
           }
        }
        //------------------------------------------------------

        //controllo dipendenti
        if(isset($rendiconti['comune']['straordinario']['dipendenti_effettivi']))
        {
           if(!isset($rendiconti['comune']['straordinario']['dipendenti_max']))
           {
                $result[0]=true;
                $result[1][]="Occorre impostare il numero di dipendenti autorizzati.";
           }
           else
           {
                if($rendiconti['comune']['straordinario']['dipendenti_effettivi']>$rendiconti['comune']['straordinario']['dipendenti_max'])
                {
                    $result[0]=true;
                    $result[1][]="I dipendenti che effettivamente hanno svolto straordinario non possono superare il numero di dipendenti autorizzati.";
                }
           }
        }
        //------------------------------------------------------

        //controllo km e missioni
        if(isset($rendiconti['comune']['missioni']['km']) && $rendiconti['comune']['missioni']['km']==0 && $rendiconti['comune']['missioni']['dipendenti']>0)
        {
            $result[0]=true;
            $result[1][]="I Km totali percorsi devono essere maggiori di zero in presenza di dipendenti che hanno effettuato missioni.";
        }
        if(isset($rendiconti['comune']['missioni']['km']) && $rendiconti['comune']['missioni']['km']>0 && $rendiconti['comune']['missioni']['dipendenti']==0)
        {
            $result[0]=true;
            $result[1][]="I dipendenti che hanno effettuato missioni non possono essere zero se ci sono pkm percorsi.";
        }
        //------------------------------------------------------

        //------------------- servizi --------------------------
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $curServizio)
            {
                if(floatVal($curServizio['importo'])==0)
                {
                    $result[0]=true;
                    $result[1][]="Il bene/servizio: ".$curServizio['descrizione']." non puo' avere importo nullo.";
                }
            }
        }
        //------------------------------------------------------

        //------------------- personale det --------------------------
        if(isset($rendiconti['personale_det']))
        {
            foreach($rendiconti['personale_det'] as $curServizio)
            {
                if(floatVal($curServizio['importo'])==0)
                {
                    $result[0]=true;
                    $result[1][]="L'assunzione: ".$curServizio['estremi_assunzione']." non puo' avere importo nullo.";
                }

                $oneri=floatVal($curServizio['oneri_cpdel'])+floatVal($curServizio['oneri_irap'])+floatVal($curServizio['oneri_altro']);
                if($oneri==0)
                {
                    //AA_Log::Log(__METHOD__." - personale: ".print_r($curServizio,true),100);
                    $result[0]=true;
                    $result[1][]="L'assunzione: ".$curServizio['estremi_assunzione']." non puo' avere un importo totale oneri nullo.";
                }

                if($curServizio['periodo_dal']>=$curServizio['periodo_al'])
                {
                    $result[0]=true;
                    $result[1][]="la data di inizio per l'assunzione: ".$curServizio['estremi_assunzione']." deve essere precedente a quella di fine.";
                }
            }
        }
        //------------------------------------------------------

        return $result;
    }

    //Verifica se ci sono delle anomalie sui risultati
    public function AnalizeRisultati($risultati=null,$circoscrizione=0,$comune=null)
    {
        $result=array(false,array(),false,array('risultati_voti_presidente_check'=>0,'risultati_voti_lista_check'=>0,'risultati_voti_candidato_check'=>0,'risultati_scrutinio_parziale_check'=>0));
        if($risultati==null && $comune instanceof AA_SierComune)
        {
            $risultati=$comune->GetRisultati(true);
            //AA_Log::Log(__METHOD__." - risultati: ".print_r($risultati,true),100);
        }

        if(!is_array($risultati))
        {
            $result[0]=true;
            $result[1][0]='Risultati non presenti.';
            $result[2]=true;
            $result[3]=array('risultati_voti_presidente_check'=>1,'risultati_voti_lista_check'=>1,'risultati_voti_candidato_check'=>1,'risultati_scrutinio_parziale_check'=>1);
            return $result;
        }
        
        if(sizeof($risultati)==0)
        {
            $result[0]=true;
            $result[1][0]='Risultati non presenti.';
            $result[2]=true;
            $result[3]=array('risultati_voti_presidente_check'=>1,'risultati_voti_lista_check'=>1,'risultati_voti_candidato_check'=>1,'risultati_scrutinio_parziale_check'=>1);
            return $result;
        }

        $votanti=intVal($risultati['votanti_m']+$risultati['votanti_f']);
        $sezioni_scrutinate=intVal($risultati['sezioni_scrutinate']);

        if($comune instanceof AA_SierComune)
        {
            if($sezioni_scrutinate > $comune->GetProp("sezioni"))
            {
                $result[0]=true;
                $result[1][]="Le sezioni scrutinate sono maggiori delle sezioni del comune";
                $result[2]=true;
            }
            
            if($sezioni_scrutinate < $comune->GetProp("sezioni"))
            {
                $result[0]=true;
                $result[1][]="Non sono state scrutinate tutte le sezioni del comune";
                $result[2]=false;
                $result[3]['risultati_scrutinio_parziale_check']=$sezioni_scrutinate;
            }

            if($risultati['votanti_m'] > $comune->GetProp('elettori_m'))
            {
                $result[0]=true;
                $result[1][]="I votanti maschi sono maggiori degli elettori maschi.";
                $result[2]=true;
            }

            if($risultati['votanti_f'] > $comune->GetProp('elettori_f'))
            {
                $result[0]=true;
                $result[1][]="Le votanti femmine sono maggiori delle elettrici femmine.";
                $result[2]=true;
            }
        }

        $voti_non_validi=intVal($risultati['schede_nulle']+$risultati['schede_bianche']+$risultati['schede_voti_nulli']);

        if($votanti > 0 && $sezioni_scrutinate==0)
        {
            $result[0]=true;
            $result[1][]="Non ci sono sezioni scrutinate nonostante i votanti siano maggiori di zero.";
            $result[2]=true;
        }

        if($votanti < ($voti_non_validi+max($risultati['voti_contestati_na_pre'],$risultati['voti_contestati_na_liste'])))
        {
            $result[0]=true;
            $result[1][]="I voti non validi sono maggiori o uguali al numero dei votanti";
            $result[2]=true;
        }

        $voti_validi=$votanti-$voti_non_validi;

        $voti_presidente=0;
        $coalizioni=$this->GetCoalizioni();
        foreach($coalizioni as $idPresidente=>$curPresidente)
        {
            if(isset($risultati['voti_presidente'][$idPresidente]))
            {
                $voti_presidente+=intVal($risultati['voti_presidente'][$idPresidente]);
            }
        }

        if($voti_presidente == 0 && $voti_validi > 0)
        {
            $result[0]=true;
            $result[1][]="Non ci sono <b>voti per i candidati Presidente</b> nonostante siano presenti voti validi (".($voti_validi-$risultati['voti_contestati_na_pre']).")";
            $result[2]=true;
            $result[3]['risultati_voti_presidente_check']++;
        }

        if($voti_presidente != ($voti_validi-$risultati['voti_contestati_na_pre']) && $voti_presidente > 0 && $voti_validi > 0)
        {
            $result[0]=true;
            $result[1][]="La somma dei <b>voti per i candidati Presidente</b> (".$voti_presidente.") non corrisponde al numero dei voti validi (".($voti_validi-$risultati['voti_contestati_na_pre']).")";
            $result[2]=true;
            $result[3]['risultati_voti_presidente_check']++;
        }

        if($voti_presidente > ($voti_validi-$risultati['voti_contestati_na_pre']))
        {
            $result[0]=true;
            $result[1][]="La somma dei <b>voti per i candidati Presidente</b> (".$voti_presidente.") è maggiore del numero dei voti validi (".($voti_validi-$risultati['voti_contestati_na_pre']).")";
            $result[2]=true;
            $result[3]['risultati_voti_presidente_check']++;
        }

        //-------------- Analisi voti di lista -----------------
        $liste=$this->GetListe();
        $voti_lista=0;
        foreach($liste as $idLista=>$curLista)
        {
            if(isset($risultati['voti_lista']))
            {
                if(isset($risultati['voti_lista'][$idLista]))
                {
                    $voti_lista+=intVal($risultati['voti_lista'][$idLista]);
                }
            } 
        }

        $voti_solo_presidente=0;
        if(isset($risultati['voti_solo_presidente'])) $voti_solo_presidente=$risultati['voti_solo_presidente'];
        if($voti_lista != ($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente) && $voti_lista > 0 && $voti_validi > 0)
        {
            $result[0]=true;
            $result[1][]="La somma dei <b>voti di lista</b> (".$voti_lista.") non corrisponde al numero dei voti validi (".($voti_validi-$risultati['voti_contestati_na_liste']-$risultati['voti_solo_presidente']).")";
            $result[2]=true;
            $result[3]['risultati_voti_lista_check']++;
        }

        if($voti_lista == 0 && ($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente) > 0)
        {
            $result[0]=true;
            $result[1][]="Non ci sono <b>voti per le Liste</b> nonostante siano presenti voti validi (".($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente).")";
            $result[3]['risultati_voti_lista_check']++;
            $result[2]=true;
        }

        if($voti_lista > ($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente))
        {
            $result[0]=true;
            $result[1][]="La somma dei voti di Lista (".$voti_lista.") è maggiore del numero dei voti validi (".($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente).")";
            $result[2]=true;
            $result[3]['risultati_voti_lista_check']++;
        }
        //-------------------------------------------------------

        //-------------- Analisi voti candidato ----------------
        $candidati=$this->GetCandidati(null,null,$circoscrizione);
        $voti_candidato=0;
        $voti_candidato_lista=array();
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if(isset($risultati['voti_candidato'][$idCandidato])) 
            {
                $voti_candidato+=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                if(!isset($voti_candidato_lista[$curCandidato->GetProp('id_lista')])) $voti_candidato_lista[$curCandidato->GetProp('id_lista')]=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                else $voti_candidato_lista[$curCandidato->GetProp('id_lista')]+=intVal($risultati['voti_candidato'][$idCandidato]['voti']);

                if($risultati['voti_candidato'][$idCandidato]['voti'] > $risultati['voti_lista'][$curCandidato->GetProp('id_lista')])
                {
                    $result[0]=true;
                    $result[1][]="I voti (".$risultati['voti_candidato'][$idCandidato]['voti'].") del candidato ".$curCandidato->GetProp('nome')." ".$curCandidato->GetProp('cognome')." sono superiori ai voti (".intVal($risultati['voti_lista'][$curCandidato->GetProp('id_lista')]).") della lista (".$curCandidato->GetProp('lista').") di appartenenza.";
                    $result[3]['risultati_voti_candidato_check']++;
                }
            }
        }

        foreach($voti_candidato_lista as $idLista=>$tot_voti_candidati_lista)
        {
            if($tot_voti_candidati_lista > 2*$risultati['voti_lista'][$idLista])
            {
                $result[0]=true;
                $result[1][]="Il totale dei voti (".$tot_voti_candidati_lista.") dei candidati della lista ".$liste[$idLista]->GetProp('denominazione')." sono superiori al doppio dei voti (".intVal(2*$risultati['voti_lista'][$idLista]).") della lista di appartenenza.";
                $result[3]['risultati_voti_candidato_check']++;
            }
        }

        if($voti_candidato == 0 && ($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente) > 0)
        {
            $result[0]=true;
            $result[1][]="Non ci sono voti per i <b>candidati al Consiglio Regionale</b> nonostante siano presenti voti validi (".$voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente.")";
            $result[3]['risultati_voti_candidato_check']++;
        }

        if($voti_candidato > ($voti_validi-$risultati['voti_contestati_na_liste']-$voti_solo_presidente)*2)
        {
            $result[0]=true;
            $result[1][]="Il numero totale di voti (".$voti_candidato.") per i <b>candidati al Consiglio Regionale</b> è superiore al doppio dei voti validi (".(($voti_validi-($risultati['voti_contestati_na_liste']-$voti_solo_presidente))*2).")";
            $result[2]=true;
            $result[3]['risultati_voti_candidato_check']++;
        }
        //---------------------------------------------------------
        
        return $result;
    }

    //Restituisce le abilitazioni
    public function GetAbilitazioni()
    {
        return $this->GetProp("Flags");
    }

    //Restituisce le giornate
    public function GetGiornate()
    {
        $value=json_decode($this->GetProp("Giornate"),true);
        if(!is_array($value))
        {
            AA_Log::Log(__METHOD__." - Errore durante la decodifica delle giornate: ".$this->GetProp("Giornate")." - ".print_r($value,true),100);
            return array();
        }

        return $value;
    }

    //Restituisce il control pannel
    public function GetControlPannel()
    {

        $value=json_decode($this->GetProp("ControlPannel"),true);
        if(!is_array($value))
        {
            AA_Log::Log(__METHOD__." - Errore durante la decodifica del pannello di controllo: ".$this->GetProp("ControlPannel")." - ".print_r($value,true),100);
            return array();
        }

        return $value;
    }

    //imposta i valori del control pannel
    public function SetControlPannel($val=null)
    {
        if(is_array($val))
        {
            $this->SetProp("ControlPannel",json_encode($val));
        }
        else $this->SetProp("ControlPannel",json_encode(array()));
    }

    //Funzione di clonazione dei dati
    protected function CloneData($idData = 0, $user = null)
    {
        if(!$this->IsValid() || $this->IsReadOnly()) return 0;
        
        $newIdData=parent::CloneData($idData,$user);

        return $newIdData;
    }

    //Costruttore
    public function __construct($id=0, $user=null)
    {
        //data table
        $this->SetDbDataTable(static::AA_DBTABLE_DATA);

        //Db data binding
        $this->AddProp("Note","","note");
        $this->AddProp("Flags",0,"flags");
        $this->AddProp("Anno","","anno");
        $this->AddProp("Giornate","","giornate");
        $this->AddProp("ControlPannel","","cp");

        //Valori iniziali
        //$this->SetProp("IdData",0);
        //$this->SetProp("Flags",0);

        //disabilita la revisione
        $this->EnableRevision(false);

        //chiama il costruttore genitore
        parent::__construct($id,$user);

        /*
        //Carica i dati dell'oggetto
        if($this->bValid && $this->nId > 0)
        {
            if(!$this->LoadData($user))
            {
                $this->bValid=false;
            }
        }
        else
        {
            $this->bValid=false;
        }*/
    }

    //Restituisce le coalizioni
    public function GetCoalizioni($params=array())
    {
        if(!$this->bValid) return array();

        $db=new AA_Database();
        $query="SELECT ".static::AA_COALIZIONI_DB_TABLE.".* from ".static::AA_COALIZIONI_DB_TABLE." WHERE id_sier='".$this->nId_Data."'";

        //eventuali parametri di filtraggio
        if(is_array($params))
        {
            if(isset($params["id_coalizione"]) && $params["id_coalizione"]!="")
            {
                $query.=" AND id='".addslashes(trim($params['id_coalizione']))."'";
            }

            if(isset($params["denominazione"]) && $params["denominazione"]!="")
            {
                $query.=" AND denominazione like '%".addslashes(trim($params['denominazione']))."%'";
            }
        }

        $query.=" ORDER by ordine";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return array();
        }

        $result=array();
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $liste=array();
                
                //Recupero liste
                $query="SELECT * from ".static::AA_LISTE_DB_TABLE." WHERE id_coalizione='".$curRow['id']."' order by ".static::AA_LISTE_DB_TABLE.".ordine, ".static::AA_LISTE_DB_TABLE.".id";
                if(!$db->Query($query))
                {
                    AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
                }
                else
                {
                    foreach($db->GetResultSet() as $curLista)
                    {
                        $liste[$curLista['id']]=new AA_SierLista($curLista);
                    }
                    $curRow['liste']=$liste;
                }

                $curCoalizione= new AA_SierCoalizioni($curRow);
                $result[$curRow['id']]=$curCoalizione;
            }
        }

        return $result;
    }

    //construisce il seriale dei rendiconti
    public function BuildRendicontiSerial($rendiconti=null)
    {
        if(!$rendiconti) return hash('sha256',"0000000000000");
        if(!is_array($rendiconti)) return hash('sha256',$rendiconti);

        $digest=array();
        if(isset($rendiconti['seggi']))$digest[]=$rendiconti['seggi'];
        if(isset($rendiconti['buoni']))$digest[]=$rendiconti['buoni'];
        if(isset($rendiconti['seggi']))$digest[]=$rendiconti['seggi'];
        if(isset($rendiconti['personale_det']))$digest[]=$rendiconti['personale_det'];
        if(isset($rendiconti['comune']))$digest[]=$rendiconti['comune'];
        if(isset($rendiconti['servizi']))$digest[]=$rendiconti['servizi'];

        return hash('sha256',json_encode($digest));
    }

    //costruisce il feed dei candidati
    public function BuildCandidatiFeed($params=array())
    {
        if(!$this->bValid) return false;

        $feed=array("aggiornamento"=>date("Y-m-d H:i:s"),"candidati"=>array(),"coalizioni"=>array());

        $candidati=$this->GetCandidati();
        $liste=$this->GetListe();
        $coalizioni=$this->GetCoalizioni();
        $platform=AA_Platform::GetInstance();
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL(AA_SierModule::AA_ID_MODULE)."/img";

        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {
            $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            $curCoalizioneImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            if($curCoalizione->GetProp('image') != "")
            {
                $curCoalizioneImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');
            }
            $curCv="";
            if($curCoalizione->GetProp('cv')!="") $curCv="/storage.php?object=".$curCoalizione->GetProp('cv')."&filename=1";
            $curCg="";
            if($curCoalizione->GetProp('cg')!="") $curCg="/storage.php?object=".$curCoalizione->GetProp('cg')."&filename=1";
            $feed['coalizioni'][$idCoalizione]=array("denominazione"=>$curCoalizione->GetProp("denominazione"),"image"=>$curCoalizioneImagePath,"presidente"=>$curCoalizione->GetProp("nome_candidato"),"cv"=>$curCv,"cg"=>$curCg);
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            $curLista=$liste[$curCandidato->GetProp("id_lista")];
            $curCoalizione=$coalizioni[$curLista->GetProp("id_coalizione")];
            $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            if($curLista->GetProp('image') != "")
            {
                $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');
            }
            $curCoalizioneImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            if($curCoalizione->GetProp('image') != "")
            {
                $curCoalizioneImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');
            }
            
            if($curCandidato->GetProp("cv")!="") $cvPath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCandidato->GetProp("cv")."&filename=1";
            else $cvPath="";
            if($curCandidato->GetProp("cg")!="") $cgPath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCandidato->GetProp("cg")."&filename=1";
            else $cgPath="";
            
            $feed['candidati'][$idCandidato]=array("nome"=>$curCandidato->GetProp("nome"),
                "cognome"=>$curCandidato->GetProp("cognome"),
                "cv"=>$cvPath,
                "cg"=>$cgPath,
                "circoscrizione"=>$curCandidato->GetProp("circoscrizione"),
                "id_lista"=>$curCandidato->GetProp("id_lista"),
                "lista"=>$curCandidato->GetProp("lista"),
                "id_presidente"=>$curCandidato->GetProp("id_coalizione"),
                "presidente"=>$curCoalizione->GetProp("nome_candidato"),
                "image_lista"=>$curImagePath,
                "image_presidente"=>$curCoalizioneImagePath
            );
        }

        return $feed;
    }

    //Aggiorna il feed dei risultati del comune
    public function UpdateComuneFeedRisultati($id_comune=0,$user=null,$bReset=false,$bInitializeOnly=false,$bUpdateComune=true)
    {
        if(!$this->IsValid())
        {
            AA_Log::Log(__METHOD__." - oggetto non valido.",100);
            return false;
        }

        if(!($user instanceof AA_User)) $user=AA_User::GetCurrentUser();
        if(($this->GetUserCaps($user)&AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può aggiornare l'oggetto.",100);
            return false;
        }

        $comune=$this->GetComune($id_comune);
        if($comune==null)
        {
            AA_Log::Log(__METHOD__." - identificativo comune non valido.",100);
            return false;
        }

        $feed=$comune->GetFeedRisultati(true);
        //AA_Log::Log(__METHOD__." - feed_risultati: ".print_r($feed,true),100);

        $affluenza=$comune->GetAffluenza(true);
        $giornate=$this->GetGiornate();
        $cp=$this->GetControlPannel();
        $risultati=$comune->GetRisultati(true);
        $analisi_risultati=$comune->GetAnalisiRisultati(true);
        if(sizeof($analisi_risultati)==0)
        {
            $analisi_risultati=$this->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        } 
        $now=date("Y-m-d H:i:s");

        //---------- aggiorna i dati generali ---------------------------
        $feed["denominazione"]=$comune->GetProp('denominazione');
        $feed["circoscrizione"]=$comune->GetProp('circoscrizione');
        $feed["id_circoscrizione"]=intVal($comune->GetProp('id_circoscrizione'));
        $feed["sezioni"]=intVal($comune->GetProp('sezioni'));
        $feed["elettori_m"]=intVal($comune->GetProp('elettori_m'));
        $feed["elettori_f"]=intVal($comune->GetProp('elettori_f'));
        $feed["elettori_tot"]=intVal($comune->GetProp('elettori_m')+$comune->GetProp('elettori_f'));
        //----------------------------------------------------------------

        //-------------- affluenza --------------------
        $feed['affluenza']=array();
        foreach($giornate as $giornata=>$curGiornata)
        {
            if($curGiornata['affluenza']==1)
            {
                if(!isset($feed['affluenza'][$giornata]) || $bReset)
                {
                    $aggiornamento=$now;
                    if($giornata<$now)$aggiornamento=$giornata." 07:00:00";
                    $feed['affluenza'][$giornata]=array("aggiornamento"=>$aggiornamento,"ore_12"=>array("count"=>0,"percent"=>0),"ore_19"=>array("count"=>0,"percent"=>0),"ore_22"=>array("count"=>0,"percent"=>0));
                } 

                if(isset($affluenza[$giornata]) && !$bInitializeOnly)
                {
                    if(isset($affluenza[$giornata]['aggiornamento'])) $feed['affluenza'][$giornata]['aggiornamento']=$affluenza[$giornata]['aggiornamento'];
                    $feed['affluenza'][$giornata]['ore_12']['count']=intVal($affluenza[$giornata]['ore_12']);
                    $feed['affluenza'][$giornata]['ore_12']['percent']=round($affluenza[$giornata]['ore_12']*100/intVal($feed['elettori_tot']),1);
                    $feed['affluenza'][$giornata]['ore_19']['count']=intVal($affluenza[$giornata]['ore_19']);
                    $feed['affluenza'][$giornata]['ore_19']['percent']=round($affluenza[$giornata]['ore_19']*100/intVal($feed['elettori_tot']),1);
                    $feed['affluenza'][$giornata]['ore_22']['count']=intVal($affluenza[$giornata]['ore_22']);
                    $feed['affluenza'][$giornata]['ore_22']['percent']=round($affluenza[$giornata]['ore_22']*100/intVal($feed['elettori_tot']),1);
                }
            }
        }
        //--------------------------------------------

        //-------------------  Aggiornamento risultati  ----------------------------------
        //risultati generali
        if($bReset || !isset($feed['risultati']))
        {
            $feed['risultati']=array(
                "aggiornamento"=>$now,
                "sezioni_scrutinate"=>0,
                "votanti_m"=>0,
                "votanti_f"=>0,
                "votanti_tot"=>0,
                "votanti_percent"=>0,
                "voti_presidente"=>array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0),
                "voti_lista"=>array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0),
                "voti_candidato"=>array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0),
            );
        }

        $update=true;
        $update_presidente=true;
        $update_liste=true;
        $update_candidati=true;

        $platform=AA_Platform::GetInstance();
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL(AA_SierModule::AA_ID_MODULE)."/img";
                    
        //Non aggiorna i risultati se non è abilitato l'aggiornamento su scrutinio parziale e non sono state scrutinate tutte le sezioni
        if($cp['risultati_scrutinio_parziale_check'] == 0 && $analisi_risultati[3]["risultati_scrutinio_parziale_check"]>0 && $analisi_risultati[0]) $update=false;

        //Non aggiorna i risultati se non è abilitato l'aggiornamento su anomalie voti presidente e sono state riscontrate delle anomalie sui voti presidente
        if($cp['risultati_voti_presidente_check'] == 0 && $analisi_risultati[3]["risultati_voti_presidente_check"]>0 && $analisi_risultati[0]) $update_presidente=false;

        //non aggiorna i risultati di lista se non è abilitato l'aggiornamento su anomalie voti di lista e sono state riscontrate delle anomalie sui voti di lista
        if($cp['risultati_voti_lista_check'] == 0 && $analisi_risultati[3]["risultati_voti_lista_check"]>0 && $analisi_risultati[0]) $update_liste=false;

        //non aggiorna i risultati dei candidati se non è abilitato l'aggiornamento su anomalie voti candidato e sono state riscontrate delle anomalie sui voti candidato
        if($cp['risultati_voti_candidato_check'] == 0 && $analisi_risultati[3]["risultati_voti_candidato_check"]>0 && $analisi_risultati[0]) $update_candidati=false;
        //------------------
       
        //aggiorna i dati generali
        if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly)
        {
            $feed['risultati']['aggiornamento']=$now;
            if($risultati['sezioni_scrutinate']) $feed['risultati']['sezioni_scrutinate']=intVal($risultati['sezioni_scrutinate']);
            if($risultati['votanti_m']) $feed['risultati']['votanti_m']=intVal($risultati['votanti_m']);
            if($risultati['votanti_f']) $feed['risultati']['votanti_f']=intVal($risultati['votanti_f']);
            $feed['risultati']['votanti_tot']=intVal($feed['risultati']['votanti_m'])+intVal($feed['risultati']['votanti_f']);
            $feed['risultati']['votanti_percent']=round($feed['risultati']['votanti_tot']*100/(intVal($comune->GetProp("elettori_m")+$comune->GetProp("elettori_f"))),1);
        }
        //------------------------

        //------------- voti presidente
        $voti_tot_presidente=0;
        $voti_tot_liste=0;
        $voti_tot_coalizione=array();
        $coalizioni=$this->GetCoalizioni();
        
        if($bReset)
        {
            $feed['risultati']['voti_presidente']=array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0,"consolidato"=>1);
        }

        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {            
            if($bReset)            
            {
                $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                if($curCoalizione->GetProp("image") !="") $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');    
                $feed['risultati']['voti_presidente'][$idCoalizione]=array(
                    "denominazione"=>$curCoalizione->GetProp("nome_candidato"),
                    "denominazione_coalizione"=>$curCoalizione->GetProp("denominazione"),
                    "image"=>$curImagePath,
                    "voti"=>0,
                    "percent"=>0,
                    "voti_coalizione"=>0,
                    "percent_coalizione"=>0,
                    "ordine"=>$curCoalizione->GetProp("ordine")
                );
            }

            if(!$bInitializeOnly && $update && $update_presidente && $update_liste && $update_candidati && isset($risultati['voti_presidente'][$idCoalizione]))
            {
                $feed['risultati']['voti_presidente']['aggiornamento']=date("Y-m-d H:i:s");
                $feed['risultati']['voti_presidente'][$idCoalizione]['voti']=intVal($risultati['voti_presidente'][$idCoalizione]);
                $voti_tot_presidente+=intVal($risultati['voti_presidente'][$idCoalizione]);
            }
        }
        
        if($update && $update_presidente && $update_liste && $update_candidati)
        {
            $feed['risultati']['voti_presidente']['aggiornamento']=$now;
            $feed['risultati']['voti_presidente']['sezioni_scrutinate']=intVal($risultati['sezioni_scrutinate']);
            $feed['risultati']['voti_presidente']['voti_tot']=$voti_tot_presidente;
            if($analisi_risultati[3]['risultati_voti_presidente_check']>0) $feed['risultati']['voti_presidente']['consolidato'] = 0;
        }
        //-------------------------------

        //voti_lista
        $liste=$this->GetListe(null,$comune->GetProp('id_circoscrizione'));
        if($bReset)
        {
            $feed['risultati']['voti_lista']=array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0,"consolidato"=>1);            
        }

        foreach($liste as $idLista=>$curLista)
        {
            if($bReset)
            {
                $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                if($curLista->GetProp("image") !="") $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');   
                $feed['risultati']['voti_lista'][$idLista]=array(
                    "denominazione"=>$curLista->GetProp("denominazione"),
                    "image"=>$curImagePath,
                    "id_presidente"=>intVal($curLista->GetProp("id_coalizione")),
                    "voti"=>0,
                    "percent"=>0
                );
            }

            if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly && isset($risultati['voti_lista'][$idLista]))
            {

                $feed['risultati']['voti_lista'][$idLista]['voti']=intVal($risultati['voti_lista'][$idLista]);
                $voti_tot_liste+=intVal($risultati['voti_lista'][$idLista]);
                if(isset($voti_tot_coalizione[$curLista->GetProp('id_coalizione')])) $voti_tot_coalizione[$curLista->GetProp('id_coalizione')]+=intVal($risultati['voti_lista'][$idLista]);
                else $voti_tot_coalizione[$curLista->GetProp('id_coalizione')]=intVal($risultati['voti_lista'][$idLista]);    
            }
        }
        
        if($update && $update_presidente && $update_liste && $update_candidati)
        {
            $feed['risultati']['voti_lista']['aggiornamento']=$now;
            $feed['risultati']['voti_lista']['sezioni_scrutinate']=intVal($risultati['sezioni_scrutinate']);
            $feed['risultati']['voti_lista']['voti_tot']=$voti_tot_liste;
            if($analisi_risultati[3]['risultati_voti_lista_check']>0) $feed['risultati']['voti_lista']['consolidato'] = 0;
        }
        //-------------------

        //voti candidato
        $tot_voti_candidato=0;
        $candidati=$this->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        if($bReset || !isset( $feed['risultati']['voti_candidato']))
        {
            $feed['risultati']['voti_candidato']=array("aggiornamento"=>$now,"sezioni_scrutinate"=>0,"voti_tot"=>0,"consolidato"=>1);
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if($bReset || !isset($feed['risultati']['voti_candidato'][$idCandidato]))
            {
                /*
                $lista=$liste[$curCandidato->GetProp('id_lista')];
                $coalizione=$coalizioni[$curCandidato->GetProp("id_coalizione")];
                $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                if($lista->GetProp('image') != "")
                {
                    $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$lista->GetProp('image');
                }
                
                /*$feed['risultati']['voti_candidato'][$idCandidato]=array(
                    "nome"=>$curCandidato->GetProp("nome"),
                    "cognome"=>$curCandidato->GetProp("cognome"),
                    "id_lista"=>intVal($curCandidato->GetProp("id_lista")),
                    "lista"=>$curCandidato->GetProp("lista"),
                    "image"=>$curImagePath,
                    "id_presidente"=>intVal($curLista->GetProp("id_coalizione")),
                    "presidente"=>$coalizione->GetProp("nome_candidato"),
                    "id_circoscrizione"=>intVal($curCandidato->GetProp("id_circoscrizione")),
                    "circoscrizione"=>$curCandidato->GetProp("circoscrizione"),
                    "voti"=>0,
                    "percent"=>0
                );*/

                $feed['risultati']['voti_candidato'][$idCandidato]=array(
                    "voti"=>0,
                    "percent"=>0
                );
            }

            if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly && isset($risultati['voti_candidato'][$idCandidato]))
            {
                $feed['risultati']['voti_candidato'][$idCandidato]['voti']=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                $tot_voti_candidato+=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
            }    
        }
        
        if($update && $update_presidente && $update_liste && $update_candidati)
        {
            $feed['risultati']['voti_candidato']['aggiornamento']=$now;
            $feed['risultati']['voti_candidato']['sezioni_scrutinate']=intVal($risultati['sezioni_scrutinate']);
            $feed['risultati']['voti_candidato']['voti_tot']=$tot_voti_candidato;
            if($analisi_risultati[3]['risultati_voti_candidato_check']>0) $feed['risultati']['voti_candidato']['consolidato'] = 0;
        }
        //---------------------

        //percentuali
        if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly)
        {
            $tot_percent_presidente=0;
            $max_percent_presidente=0;
            $max_percent_coalizione=0;
            $tot_percent_coalizione=0;
            $feed['risultati']['voti_presidente']['voti_tot']=$voti_tot_presidente;

            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                if($voti_tot_presidente>0)
                {
                    $percent=round($feed['risultati']['voti_presidente'][$idCoalizione]['voti']*100/$voti_tot_presidente,1);
                    $tot_percent_presidente+=$percent;
                    if($max_percent_presidente==0 || $feed['risultati']['voti_presidente'][$max_percent_presidente]['percent']<$percent) $max_percent_presidente=$idCoalizione;
                    $feed['risultati']['voti_presidente'][$idCoalizione]['percent']=$percent;
                }

                //totale coalizione
                if($voti_tot_liste>0)
                {
                    $feed['risultati']['voti_presidente'][$idCoalizione]['voti_coalizione']=$voti_tot_coalizione[$idCoalizione];
                    $percent=round($voti_tot_coalizione[$idCoalizione]*100/$voti_tot_liste,1);
                    $feed['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione']=$percent;
                    if($max_percent_coalizione == 0 || $feed['risultati']['voti_presidente'][$max_percent_coalizione]['percent_coalizione']<$percent) $max_percent_coalizione=$idCoalizione;
                    $tot_percent_coalizione+=$percent;
                }
            }

            if($tot_percent_presidente != 100 && $max_percent_presidente>0)
            {
                $feed['risultati']['voti_presidente'][$max_percent_presidente]['percent']=round($feed['risultati']['voti_presidente'][$max_percent_presidente]['percent']+100-$tot_percent_presidente,1);
            }

            if($tot_percent_coalizione != 100 && $max_percent_coalizione>0)
            {
                $feed['risultati']['voti_presidente'][$max_percent_coalizione]['percent_coalizione']=round($feed['risultati']['voti_presidente'][$max_percent_coalizione]['percent_coalizione']+100-$tot_percent_coalizione,1);
            }
        }

        if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly)
        {
            $tot_voti_lista_percent=array();
            $tot_voti_lista_percent_max=array();
            $feed['risultati']['voti_lista']['voti_tot']=$voti_tot_liste;
            foreach($liste as $idLista=>$curLista)
            {
                if($voti_tot_liste>0)
                {
                    $percent=round($feed['risultati']['voti_lista'][$idLista]['voti']*100/$voti_tot_liste,1);
                    $idCoalizione=$curLista->GetProp('id_coalizione');
                    $tot_voti_lista_percent[$idCoalizione]+= $percent;
                    if($tot_voti_lista_percent_max[$idCoalizione]==0 ||  $feed['risultati']['voti_lista'][$idLista]['percent']> $feed['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCoalizione]]['percent']) $tot_voti_lista_percent_max[$idCoalizione]=$idLista;
                    $feed['risultati']['voti_lista'][$idLista]['percent']=$percent;
                }
            }

            //correzione errori arrotondamento percentuale
            foreach($tot_voti_lista_percent as $idCoalizione=>$percent)
            {
                if($percent != $feed['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione'] && $percent > 0 && $tot_voti_lista_percent_max[$idCoalizione] > 0)
                {
                    $feed['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCoalizione]]['percent']+=round($feed['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione']-$percent,1);
                }
            }
        }

        if($update && $update_presidente && $update_liste && $update_candidati && !$bInitializeOnly)
        {
            $tot_percent_candidato=0;
            $max_percent_candidato=0;
            $feed['risultati']['voti_candidato']['voti_tot']=$tot_voti_candidato;
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                if($tot_voti_candidato > 0)
                {
                    $percent=round($feed['risultati']['voti_candidato'][$idCandidato]['voti']*100/$tot_voti_candidato,1);
                    $tot_percent_candidato+=$percent;
                    if($max_percent_candidato==0 || $feed['risultati']['voti_candidato'][$max_percent_candidato]['percent']<$percent) $max_percent_candidato=$idCandidato;
                    $feed['risultati']['voti_candidato'][$idCandidato]['percent']=$percent;    
                }
            }

            if($tot_percent_candidato != 100 && $tot_voti_candidato > 0 && $max_percent_candidato>0)
            {
                $feed['risultati']['voti_candidato'][$max_percent_candidato]['percent']=round($feed['risultati']['voti_candidato'][$max_percent_candidato]['percent']+100-$tot_percent_candidato,1);

            }
        }
        //-------------

        //--------------------------------------------------------------------------------

        if($bUpdateComune)
        {
            //aggiorna il comune
            $comune->SetProp("feed_risultati",json_encode($feed));
            if(!$this->UpdateComune($comune,$user,"Aggiornamento feed risultati"))
            {
                AA_Log::Log(__METHOD__." - Errore nell'aggiornamento del feed risultati del comune: ".$comune->GetProp("denominazione"),100);
                return false;
            }

            return true;
        }

        return $feed;
    }

    //Costruisce il feed dei risultati globale
    public function BuildRisultatiAffluenzaFeed($params=array(),$mini=false)
    {
        if(!$this->bValid) return false;

        $feed=array(
            "aggiornamento"=>date("Y-m-d H:i:s"),
            "comuni"=>array(),
            "stats"=>array(
                "regionale"=>array(
                    "sezioni"=>0,
                    "elettori_f"=>0,
                    "elettori_m"=>0,
                    "elettori_tot"=>0,
                    "affluenza"=>array(),
                    "risultati"=>array(
                        "sezioni_scrutinate"=>0,
                        "votanti_m"=>0,
                        "votanti_f"=>0,
                        "votanti_tot"=>0,
                        'votanti_percent'=>0,
                        'voti_presidente'=>array(
                            "sezioni_scrutinate"=>0,
                            "voti_tot"=>0,
                            "consolidato"=>1),
                        "voti_lista"=>array(
                            "sezioni_scrutinate"=>0,
                            "voti_tot"=>0,
                            "consolidato"=>1),
                        "voti_candidato"=>array(
                            "sezioni_scrutinate"=>0,
                            "voti_tot"=>0,
                            "consolidato"=>1))),
                "circoscrizionale"=>array()));

        if($mini)
        {
            $feed['candidati']=array();
        }

        $comuni=$this->GetComuni(null,array("orderByCircoscrizione"=>true));
        $coalizioni=$this->GetCoalizioni();
        $liste=$this->GetListe();
        $platform=AA_Platform::GetInstance();
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL(AA_SierModule::AA_ID_MODULE)."/img";

        $candidati=$this->GetCandidati();

        $giornateAffluenza=$this->GetGiornate();
        //$cp=$this->GetControlPannel();
        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();

        $aggiornamento_generale="";
        $aggiornamento_presidente="";
        $aggiornamento_presidente_circoscrizionale=array();
        $aggiornamento_liste="";
        $aggiornamento_liste_circoscrizionale=array();
        $aggiornamento_candidati="";
        $aggiornamento_candidati_circoscrizionale=array();
        $now=date("Y-m-d H:i:s");
        $ora=intVal(date("H"));
        $today=date("Y-m-d");

        //AA_Log::Log(__METHOD__." - now: ".$now,100);

        foreach($comuni as $idComune=>$curComune)
        {
            $feedComune=$curComune->GetFeedRisultati(true);
            $feed["comuni"][$idComune]=$feedComune;
           
            foreach($feedComune['risultati']['voti_candidato'] as $id=>$val)
            {
                if(is_array($val) && isset($candidati[$id]))
                {
                    if($mini)
                    {
                        if(!isset($feed['candidati'][$id]))
                        {
                            $candidato=$candidati[$id];
                            $lista=$liste[$candidato->GetProp('id_lista')];
                            $coalizione=$coalizioni[$candidato->GetProp("id_coalizione")];
                            $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                            if($lista->GetProp('image') != "")
                            {
                                $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$lista->GetProp('image');
                            }
                            $feed['candidati'][$id]=array();
                            $feed['candidati'][$id]['nome']=$candidato->GetProp("nome");
                            $feed['candidati'][$id]['cognome']=$candidato->GetProp("cognome");
                            $feed['candidati'][$id]['id_lista']=$candidato->GetProp("id_lista");
                            $feed['candidati'][$id]['lista']=$candidato->GetProp("lista");
                            $feed['candidati'][$id]['image']=$curImagePath;
                            $feed['candidati'][$id]['id_presidente']=$lista->GetProp("id_coalizione");
                            $feed['candidati'][$id]['presidente']=$coalizione->GetProp("nome_candidato");
                            $feed['candidati'][$id]['denominazione_coalizione']=$coalizione->GetProp("denominazione");
                            $feed['candidati'][$id]['id_circoscrizione']=$candidato->GetProp("id_circoscrizione");
                            $feed['candidati'][$id]['circoscrizione']=$candidato->GetProp("circoscrizione");
                        }    
                    }
                    else
                    {
                        $candidato=$candidati[$id];
                        $lista=$liste[$candidato->GetProp('id_lista')];
                        $coalizione=$coalizioni[$candidato->GetProp("id_coalizione")];
                        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                        if($lista->GetProp('image') != "")
                        {
                            $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$lista->GetProp('image');
                        }
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['nome']=$candidato->GetProp("nome");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['cognome']=$candidato->GetProp("cognome");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['id_lista']=$candidato->GetProp("id_lista");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['lista']=$candidato->GetProp("lista");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['image']=$curImagePath;
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['id_presidente']=$lista->GetProp("id_coalizione");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['presidente']=$coalizione->GetProp("nome_candidato");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['denominazione_coalizione']=$coalizione->GetProp("denominazione");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['id_circoscrizione']=$candidato->GetProp("id_circoscrizione");
                        $feed["comuni"][$idComune]['risultati']['voti_candidato'][$id]['circoscrizione']=$candidato->GetProp("circoscrizione");
                    }
                }
            }

            //dati generali
            $feed['stats']['regionale']['sezioni']+=$curComune->GetProp('sezioni');
            $feed['stats']['regionale']['elettori_m']+=$curComune->GetProp('elettori_m');
            $feed['stats']['regionale']['elettori_f']+=$curComune->GetProp('elettori_f');
            $feed['stats']['regionale']['elettori_tot']+=$curComune->GetProp('elettori_f')+$curComune->GetProp('elettori_m');

            if(!isset($feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')])) $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]=array(
                "denominazione"=>$curComune->GetProp('circoscrizione'),
                "sezioni"=>0,
                'elettori_m'=>0,
                'elettori_f'=>0,
                'elettori_tot'=>0,
                "affluenza"=>array(),
                "risultati"=>array(
                    "sezioni_scrutinate"=>0,
                    "votanti_m"=>0,
                    "votanti_f"=>0,
                    "votanti_tot"=>0,
                    "votanti_percent"=>0,
                    "voti_presidente"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0,
                        "consolidato"=>1),
                    "voti_lista"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0,
                        "consolidato"=>1),
                    "voti_candidato"=>array(
                        "sezioni_scrutinate"=>0,
                        "voti_tot"=>0,
                        "consolidato"=>1))
                );
            
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['sezioni']+=intVal($curComune->GetProp('sezioni'));
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['elettori_m']+=intVal($curComune->GetProp('elettori_m'));
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['elettori_f']+=intVal($curComune->GetProp('elettori_f'));
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['elettori_tot']+=intVal($curComune->GetProp('elettori_f')+$curComune->GetProp('elettori_m'));

            //------------- Affluenza -----------
            $defaultValue=0;
            
            foreach($feedComune['affluenza'] as $giornata=>$giornataValues)
            {
                if(is_array($giornataValues))
                {
                    if(!isset($feed['stats']['regionale']['affluenza'][$giornata])) 
                    {
                        $aggiornamento=$now;
                        if($aggiornamento>$giornata) $aggiornamento=$giornata." 07:00:00";
                        $feed['stats']['regionale']['affluenza'][$giornata]=array(
                            "aggiornamento"=>$aggiornamento,
                            "ore_12"=>array("count"=>$defaultValue,"percent"=>0),
                            "ore_19"=>array("count"=>$defaultValue,"percent"=>0),
                            "ore_22"=>array("count"=>$defaultValue,"percent"=>0));
                    }

                    if(isset($feedComune['affluenza'][$giornata]['aggiornamento']) && ($aggiornamento_generale=="" || $feedComune['affluenza'][$giornata]['aggiornamento']>$aggiornamento_generale))
                    {
                        $aggiornamento_generale=$feedComune['affluenza'][$giornata]['aggiornamento'];
                        $feed['stats']['regionale']['affluenza'][$giornata]['aggiornamento']=$feedComune['affluenza'][$giornata]['aggiornamento'];
                    }
                    $feed['stats']['regionale']['affluenza'][$giornata]['ore_12']['count']+=$giornataValues['ore_12']['count'];
                    if($ora >= 19 || $giornata < $today)
                    {
                        if($giornataValues['ore_19']['count']>0) $feed['stats']['regionale']['affluenza'][$giornata]['ore_19']['count']+=$giornataValues['ore_19']['count'];
                        else $feed['stats']['regionale']['affluenza'][$giornata]['ore_19']['count']+=$giornataValues['ore_12']['count'];
                    }
                    
                    if($ora >= 22 || $giornata < $today)
                    {
                        if($giornataValues['ore_22']['count']>0) $feed['stats']['regionale']['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_22']['count'];
                        else  
                        {
                            if($giornataValues['ore_19']['count']>0) $feed['stats']['regionale']['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_19']['count'];
                            else $feed['stats']['regionale']['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_12']['count'];
                        }
                    }

                    if(!isset($feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]))
                    {
                        $aggiornamento=$now;
                        if($aggiornamento>$giornata) $aggiornamento=$giornata." 07:00:00";
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]=array(
                            "aggiornamento"=>$aggiornamento,
                            "ore_12"=>array("count"=>$defaultValue,"percent"=>0),
                            "ore_19"=>array("count"=>$defaultValue,"percent"=>0),
                            "ore_22"=>array("count"=>$defaultValue,"percent"=>0)
                        );
                        //AA_Log::Log(__METHOD__." - aggiornamento iniziale: ".$aggiornamento. " - $now",100);
                    }

                    if(isset($feedComune['affluenza'][$giornata]['aggiornamento']) && (!isset($feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['aggiornamento']) || $feedComune['affluenza'][$giornata]['aggiornamento']>$feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['aggiornamento']))
                    {
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['aggiornamento']=$feedComune['affluenza'][$giornata]['aggiornamento'];
                        //AA_Log::Log(__METHOD__." - aggiornamento: ".$feedComune['affluenza'][$giornata]['aggiornamento'],100);
                    }

                    $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_12']['count']+=$giornataValues['ore_12']['count'];
                    if($ora >= 19 || $giornata < $today)
                    {
                        if($giornataValues['ore_19']['count']>0) $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_19']['count']+=$giornataValues['ore_19']['count'];
                        else $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_19']['count']+=$giornataValues['ore_12']['count'];
                    }

                    if($ora >= 22 || $giornata < $today)
                    {
                        if($giornataValues['ore_22']['count']>0) $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_22']['count'];
                        else 
                        {
                            if($giornataValues['ore_19']['count']>0) $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_19']['count'];
                            else $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['affluenza'][$giornata]['ore_22']['count']+=$giornataValues['ore_12']['count'];
                        }
                    }
                }
            }
            //-----------------------------------

            //------------------- Risultati generali -----------------------
            //regionale
            if($aggiornamento_generale=="" || $feedComune['risultati']['aggiornamento']>$aggiornamento_generale)
            {
                $aggiornamento_generale=$feedComune['risultati']['aggiornamento'];
                $feed['stats']['regionale']['risultati']['aggiornamento']=$feedComune['risultati']['aggiornamento'];
            }
            $feed['stats']['regionale']['risultati']['sezioni_scrutinate'] +=$feedComune['risultati']['sezioni_scrutinate'];
            $feed['stats']['regionale']['risultati']['votanti_m'] +=$feedComune['risultati']['votanti_m'];
            $feed['stats']['regionale']['risultati']['votanti_f'] +=$feedComune['risultati']['votanti_f'];
            $feed['stats']['regionale']['risultati']['votanti_tot'] +=$feedComune['risultati']['votanti_tot'];

            //circoscrizionale
            if(!isset($aggiornamento_generale_circoscrizionale[$curComune->GetProp('id_circoscrizione')]) || $feedComune['risultati']['aggiornamento']>$aggiornamento_generale_circoscrizionale[$curComune->GetProp('id_circoscrizione')])
            {
                $aggiornamento_generale_circoscrizionale[$curComune->GetProp('id_circoscrizione')]=$feedComune['risultati']['aggiornamento'];
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['aggiornamento']=$feedComune['risultati']['aggiornamento'];
            }
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['sezioni_scrutinate'] +=$feedComune['risultati']['sezioni_scrutinate'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['votanti_m'] +=$feedComune['risultati']['votanti_m'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['votanti_f'] +=$feedComune['risultati']['votanti_f'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['votanti_tot'] +=$feedComune['risultati']['votanti_tot'];
            //----------------------------------------------------------------------
                
            //Risultati presidente 
            $feed['stats']['regionale']['risultati']['voti_presidente']['sezioni_scrutinate']+=$feedComune['risultati']['voti_presidente']['sezioni_scrutinate'];
            $feed['stats']['regionale']['risultati']['voti_presidente']['voti_tot'] += $feedComune['risultati']['voti_presidente']['voti_tot'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente']['sezioni_scrutinate']+=$feedComune['risultati']['voti_presidente']['sezioni_scrutinate'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente']['voti_tot'] += $feedComune['risultati']['voti_presidente']['voti_tot'];
            if($aggiornamento_presidente=="" || $feedComune['risultati']['voti_presidente']['aggiornamento']>$aggiornamento_presidente)
            {
                $feed['stats']['regionale']['risultati']['voti_presidente']['aggiornamento']=$feedComune['risultati']['voti_presidente']['aggiornamento'];
                $aggiornamento_presidente=$feedComune['risultati']['voti_presidente']['aggiornamento'];
            }
            if(!isset($aggiornamento_presidente_circoscrizionale[$curComune->GetProp('id_circoscrizione')]) || $feedComune['risultati']['voti_presidente']['aggiornamento']>$aggiornamento_presidente_circoscrizionale[$curComune->GetProp('id_circoscrizione')])
            {
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente']['aggiornamento']=$feedComune['risultati']['voti_presidente']['aggiornamento'];
                $aggiornamento_presidente_circoscrizionale[$curComune->GetProp('id_circoscrizione')]=$feedComune['risultati']['voti_presidente']['aggiornamento'];
            }
            if(!isset($feedComune['risultati']['voti_presidente']['consolidato']) || $feedComune['risultati']['voti_presidente']['consolidato']==0)
            {
                $feed['stats']['regionale']['risultati']['voti_presidente']['consolidato']=0;
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente']['consolidato']=0;
            }
            foreach($feedComune['risultati']['voti_presidente'] as $key=>$val)
            {
                if(is_array($val))
                {
                    if(!isset($feed['stats']['regionale']['risultati']['voti_presidente'][$key])) $feed['stats']['regionale']['risultati']['voti_presidente'][$key]=$val;
                    else
                    {
                        //AA_Log::Log(__METHOD__." - key: ".$key." - val: ".print_r($val,true),100);
                        $feed['stats']['regionale']['risultati']['voti_presidente'][$key]['voti'] += $val['voti'];
                        $feed['stats']['regionale']['risultati']['voti_presidente'][$key]['voti_coalizione'] += $val['voti_coalizione'];
                    }

                    if(!isset( $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente'][$key]))  $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente'][$key]=$val;
                    else
                    {
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente'][$key]['voti'] += $val['voti'];
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_presidente'][$key]['voti_coalizione'] += $val['voti_coalizione'];
                    }
                }
            }
            //------------------------------------------------

            //risultati liste
            $feed['stats']['regionale']['risultati']['voti_lista']['sezioni_scrutinate']+=$feedComune['risultati']['voti_lista']['sezioni_scrutinate'];
            $feed['stats']['regionale']['risultati']['voti_lista']['voti_tot'] += $feedComune['risultati']['voti_lista']['voti_tot'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista']['sezioni_scrutinate']+=$feedComune['risultati']['voti_lista']['sezioni_scrutinate'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista']['voti_tot'] += $feedComune['risultati']['voti_lista']['voti_tot'];
            if($aggiornamento_liste=="" || $feedComune['risultati']['voti_lista']['aggiornamento']>$aggiornamento_liste)
            {
                $feed['stats']['regionale']['risultati']['voti_lista']['aggiornamento']=$feedComune['risultati']['voti_lista']['aggiornamento'];
                $aggiornamento_liste=$feedComune['risultati']['voti_lista']['aggiornamento'];
            }
            if(!isset($aggiornamento_liste_circoscrizionale[$curComune->GetProp('id_circoscrizione')]) || $feedComune['risultati']['voti_lista']['aggiornamento']>$aggiornamento_liste_circoscrizionale[$curComune->GetProp('id_circoscrizione')])
            {
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista']['aggiornamento']=$feedComune['risultati']['voti_lista']['aggiornamento'];
                $aggiornamento_liste_circoscrizionale[$curComune->GetProp('id_circoscrizione')]=$feedComune['risultati']['voti_lista']['aggiornamento'];
            }
            if(!isset($feedComune['risultati']['voti_lista']['consolidato']) || $feedComune['risultati']['voti_lista']['consolidato']==0)
            {
                $feed['stats']['regionale']['risultati']['voti_presidente']['consolidato']=0;
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista']['consolidato']=0;
            }
            foreach($feedComune['risultati']['voti_lista'] as $key=>$val)
            {
                if(is_array($val))
                {
                    if(!isset( $feed['stats']['regionale']['risultati']['voti_lista'][$key]))  $feed['stats']['regionale']['risultati']['voti_lista'][$key]=$val;
                    else
                    {
                        $feed['stats']['regionale']['risultati']['voti_lista'][$key]['voti'] += $val['voti'];
                    }

                    if(!isset( $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista'][$key]))  $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista'][$key]=$val;
                    else
                    {
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_lista'][$key]['voti'] += $val['voti'];
                    }
                }
            }
            //------------------------------------------------------------

            //risultati candidato
            $feed['stats']['regionale']['risultati']['voti_candidato']['sezioni_scrutinate']+=$feedComune['risultati']['voti_candidato']['sezioni_scrutinate'];
            $feed['stats']['regionale']['risultati']['voti_candidato']['voti_tot'] += $feedComune['risultati']['voti_candidato']['voti_tot'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato']['sezioni_scrutinate']+=$feedComune['risultati']['voti_candidato']['sezioni_scrutinate'];
            $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato']['voti_tot'] += $feedComune['risultati']['voti_candidato']['voti_tot'];
            if($aggiornamento_candidati=="" || $feedComune['risultati']['voti_candidato']['aggiornamento']>$aggiornamento_candidati)
            {
                $feed['stats']['regionale']['risultati']['voti_candidato']['aggiornamento']=$feedComune['risultati']['voti_candidato']['aggiornamento'];
                $aggiornamento_candidati=$feedComune['risultati']['voti_candidato']['aggiornamento'];
            }
            if(!isset($aggiornamento_candidati_circoscrizionale[$curComune->GetProp('id_circoscrizione')]) || $feedComune['risultati']['voti_candidato']['aggiornamento']>$aggiornamento_candidati_circoscrizionale[$curComune->GetProp('id_circoscrizione')])
            {
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato']['aggiornamento']=$feedComune['risultati']['voti_candidato']['aggiornamento'];
                $aggiornamento_candidato_circoscrizionale[$curComune->GetProp('id_circoscrizione')]=$feedComune['risultati']['voti_candidato']['aggiornamento'];
            }
            if(!isset($feedComune['risultati']['voti_candidato']['consolidato']) || $feedComune['risultati']['voti_candidato']['consolidato']==0)
            {
                $feed['stats']['regionale']['risultati']['voti_candidato']['consolidato']=0;
                $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato']['consolidato']=0;
            }
            foreach($feedComune['risultati']['voti_candidato'] as $key=>$val)
            {
                if(is_array($val))
                {
                    if(!$mini && isset($candidati[$key]))
                    {
                        $candidato=$candidati[$key];
                        $lista=$liste[$candidato->GetProp('id_lista')];
                        $coalizione=$coalizioni[$candidato->GetProp("id_coalizione")];
                        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                        if($lista->GetProp('image') != "")
                        {
                            $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$lista->GetProp('image');
                        }
                        $val['nome']=$candidato->GetProp("nome");
                        $val['cognome']=$candidato->GetProp("cognome");
                        $val['id_lista']=$candidato->GetProp("id_lista");
                        $val['lista']=$candidato->GetProp("lista");
                        $val['image']=$curImagePath;
                        $val['id_presidente']=$lista->GetProp("id_coalizione");
                        $val['presidente']=$coalizione->GetProp("nome_candidato");
                        $val['id_circoscrizione']=$candidato->GetProp("id_circoscrizione");
                        $val['circoscrizione']=$candidato->GetProp("circoscrizione");
                    }
                
                    if(!isset( $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato'][$key]))  
                    {
                        if(isset($val['percent'])) unset($val['percent']);
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato'][$key]=$val;
                    }
                    else
                    {
                        $feed['stats']['circoscrizionale'][$curComune->GetProp('id_circoscrizione')]['risultati']['voti_candidato'][$key]['voti'] += $val['voti'];
                    }
                }
            }
            //------------------------------------------------------------
        }

        //AA_Log::Log(__METHOD__." - voti validi regione: ".$voti_validi_regione,100);

        //calcolo percentuali
        $max_percent_coalizioni=0;
        $total_percent_coalizioni=0;
        $max_percent_presidente=0;
        $total_percent_presidente=0;

        //percentuale votanti regione
        $feed['stats']['regionale']['risultati']['votanti_percent']=round($feed['stats']['regionale']['risultati']['votanti_tot']*100/$feed['stats']['regionale']['elettori_tot'],1);

        //percentuale affluenza
        foreach($giornateAffluenza as $giornata=>$giornataValues)
        {
            if(isset($feed['stats']['regionale']['affluenza'][$giornata]))
            {
                if($feed['stats']['regionale']['affluenza'][$giornata]['ore_12']>0) $feed['stats']['regionale']['affluenza'][$giornata]['ore_12']['percent']=round($feed['stats']['regionale']['affluenza'][$giornata]['ore_12']['count']*100/$feed['stats']['regionale']['elettori_tot'],1);
                if($feed['stats']['regionale']['affluenza'][$giornata]['ore_19']>0)$feed['stats']['regionale']['affluenza'][$giornata]['ore_19']['percent']=round($feed['stats']['regionale']['affluenza'][$giornata]['ore_19']['count']*100/$feed['stats']['regionale']['elettori_tot'],1);
                if($feed['stats']['regionale']['affluenza'][$giornata]['ore_22']>0)$feed['stats']['regionale']['affluenza'][$giornata]['ore_22']['percent']=round($feed['stats']['regionale']['affluenza'][$giornata]['ore_22']['count']*100/$feed['stats']['regionale']['elettori_tot'],1);
            }
            else
            {
                //AA_Log::Log(__METHOD__." - giornata non trovata: ".$giornata,100);
            }
        }
        //--------------------------------

        foreach($coalizioni as $idPresidente=>$curPresidente)
        {
            if($feed['stats']['regionale']['risultati']['voti_presidente']['voti_tot'] > 0)
            {
                $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent']=round($feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['voti']*100/(intVal($feed['stats']['regionale']['risultati']['voti_presidente']['voti_tot'])),1);
                $total_percent_presidente+=$feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent'];
                if($max_percent_presidente==0 || $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent']>$feed['stats']['regionale']['risultati']['voti_presidente'][$max_percent_presidente]['percent']) $max_percent_presidente=$idPresidente;

                //percent coalizione
                if($feed['stats']['regionale']['risultati']['voti_lista']['voti_tot']>0)
                {
                    $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']=round($feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['voti_coalizione']*100/(intVal($feed['stats']['regionale']['risultati']['voti_lista']['voti_tot'])),1);
                    $total_percent_coalizioni+=$feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent_coalizione'];
                    if($max_percent_coalizioni==0 || $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']>$feed['stats']['regionale']['risultati']['voti_presidente'][$max_percent_coalizioni]['percent_coalizione']) $max_percent_coalizioni=$idPresidente;       
                }
                else
                {
                    $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']=0;
                }
            }
            else
            {
                $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent']=0;
                $feed['stats']['regionale']['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']=0;
            }
        }

        if($total_percent_presidente !=100 && $max_percent_presidente > 0 && $feed['stats']['regionale']['risultati']['voti_presidente']['voti_tot']>0)
        {
            $feed['stats']['regionale']['risultati']['voti_presidente'][$max_percent_presidente]['percent']+=round(100-$total_percent_presidente,1);
            //AA_Log::Log(__METHOD__." - quadro la percentuale - scarto: ".(100-$total_percent_presidente),100);
        }

        if($total_percent_coalizioni !=100 && $max_percent_coalizioni > 0 && $feed['stats']['regionale']['risultati']['voti_lista']['voti_tot']>0)
        {
            $feed['stats']['regionale']['risultati']['voti_presidente'][$max_percent_coalizioni]['percent_coalizione']+=round(100-$total_percent_coalizioni,1);
        }

        $tot_voti_lista_percent=array();
        $tot_voti_lista_percent_max=array();
        foreach($liste as $idLista=>$curLista)
        {
            if($feed['stats']['regionale']['risultati']['voti_lista']['voti_tot'] > 0)
            {
                $feed['stats']['regionale']['risultati']['voti_lista'][$idLista]['percent']=round($feed['stats']['regionale']['risultati']['voti_lista'][$idLista]['voti']*100/(intVal( $feed['stats']['regionale']['risultati']['voti_lista']['voti_tot'])),1);
                
                //calcolo percentuale coalizione
                $idCoalizione=$liste[$idLista]->GetProp('id_coalizione');
                $tot_voti_lista_percent[$idCoalizione]+= $feed['stats']['regionale']['risultati']['voti_lista'][$idLista]['percent'];
                if($tot_voti_lista_percent_max[$idCoalizione]==0 || $feed['stats']['regionale']['risultati']['voti_lista'][$idLista]['percent']>$feed['stats']['regionale']['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCoalizione]]['percent']) $tot_voti_lista_percent_max[$idCoalizione]=$idLista;
            }
        }

        //correzione errori arrotondamento percentuale
        foreach($tot_voti_lista_percent as $idCoalizione=>$percent)
        {
            if($percent != $feed['stats']['regionale']['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione'] && $percent > 0 && $tot_voti_lista_percent_max[$idCoalizione] > 0)
            {
                $feed['stats']['regionale']['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCoalizione]]['percent']+=round($feed['stats']['regionale']['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione']-$percent,1);
            }
        }

        $tot_voti_lista_percent=array();
        $tot_voti_lista_percent_max=array();
        foreach($circoscrizioni as $idCircoscrizione=>$curCircoscrizione)
        {
            //AA_Log::Log(__METHOD__." - circoscrizione: ".print_r($curCircoscrizione,true),100);
            $max_percent_coalizioni=0;
            $total_percent_coalizioni=0;
            $max_percent_presidente=0;
            $total_percent_presidente=0;

            //percentuale affluenza
            foreach($giornateAffluenza as $giornata=>$giornataValues)
            {
                if(isset($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]))
                {
                    //percentuale affluenza
                    if($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_12']['count']>0) $feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_12']['percent']=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_12']['count']*100/$feed['stats']['circoscrizionale'][$idCircoscrizione]['elettori_tot'],1);
                    if($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_19']['count']>0) $feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_19']['percent']=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_19']['count']*100/$feed['stats']['circoscrizionale'][$idCircoscrizione]['elettori_tot'],1);
                    if($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_22']['count']>0) $feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_22']['percent']=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['affluenza'][$giornata]['ore_22']['count']*100/$feed['stats']['circoscrizionale'][$idCircoscrizione]['elettori_tot'],1);
                }
            }

            foreach($coalizioni as $idPresidente=>$curPresidente)
            {
                $voti=$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['voti'];
                $voti_coalizione=$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['voti_coalizione'];

                //percentuale votanti circoscrizione
                $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['votanti_percent']=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['votanti_tot']*100/$feed['stats']['circoscrizionale'][$idCircoscrizione]['elettori_tot'],1);

                //AA_Log::Log(__METHOD__." - voti: ".print_r($voti,true),100);
                if($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista']['voti_tot']>0)
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']=round($voti_coalizione*100/(intVal($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista']['voti_tot'])),1);
                    $total_percent_coalizioni+=$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent_coalizione'];
                    if($max_percent_coalizioni==0 || $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']>$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$max_percent_coalizioni]['percent_coalizione']) $max_percent_coalizioni=$idPresidente;
                }
                else $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent_coalizione']=0;

                if($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente']['voti_tot'] > 0) 
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent']=round($voti*100/(intVal($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente']['voti_tot'])),1);
                    $total_percent_presidente+=$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent'];
                    if($max_percent_presidente==0 || $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent']>$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$max_percent_presidente]['percent_coalizione']) $max_percent_presidente=$idPresidente;    
                }
                else
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idPresidente]['percent']=0;
                }
            }

            if($total_percent_coalizioni != 100 && $max_percent_coalizioni > 0 && $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['sezioni_scrutinate'] > 0)
            {
                $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$max_percent_coalizioni]['percent_coalizione']+=round(100-$total_percent_coalizioni,1);
            }

            if($total_percent_presidente != 100 && $max_percent_presidente > 0 && $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['sezioni_scrutinate'] > 0)
            {
                $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$max_percent_presidente]['percent']+=round(100-$total_percent_presidente,1);
            }

            $tot_voti_lista_percent[$idCircoscrizione]=array();
            $tot_voti_lista_percent_max[$idCircoscrizione]=array();
            foreach($liste as $idLista=>$curLista)
            {
                if($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista']['voti_tot'] > 0)
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$idLista]['percent']=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$idLista]['voti']*100/(intVal($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista']['voti_tot'])),1);
                    //calcolo percentuale coalizione
                    $idCoalizione=$curLista->GetProp('id_coalizione');
                    if(!isset($tot_voti_lista_percent[$idCircoscrizione][$idCoalizione])) $tot_voti_lista_percent[$idCircoscrizione][$idCoalizione]=0;
                    if(!isset($tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione])) $tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione]=0;
                    $tot_voti_lista_percent[$idCircoscrizione][$idCoalizione]+= $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$idLista]['percent'];
                    if($tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione]==0 || $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$idLista]['percent']>$feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione]]['percent']) $tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione]=$idLista;
                }
                else
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$idLista]['percent']=0;
                }
            }
        }

        //correzione errori arrotondamento percentuale circoscrizioni
        foreach($circoscrizioni as $idCircoscrizione=>$curCircoscrizione)
        {
            foreach($tot_voti_lista_percent[$idCircoscrizione] as $idCoalizione=>$percent)
            {
                if($percent != $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione'] && $percent > 0 && $tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione] > 0)
                {
                    $feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_lista'][$tot_voti_lista_percent_max[$idCircoscrizione][$idCoalizione]]['percent']+=round($feed['stats']['circoscrizionale'][$idCircoscrizione]['risultati']['voti_presidente'][$idCoalizione]['percent_coalizione']-$percent,1);
                }
            }
        }

        //aggiornamento
        $feed['aggiornamento']=$aggiornamento_generale;
        if($aggiornamento_presidente > $feed['aggiornamento']) $feed['aggiornamento']=$aggiornamento_presidente;
        if($aggiornamento_liste> $feed['aggiornamento']) $feed['aggiornamento']=$aggiornamento_liste;
        if($aggiornamento_candidati > $feed['aggiornamento']) $feed['aggiornamento']=$aggiornamento_candidati;

        return $feed;
    }

    public function GetCoalizione($id_coalizione=0)
    {
        if(!$this->bValid) return null;

        if($id_coalizione <= 0)
        {
            AA_Log::Log(__METHOD__." - id coalizione non valido",100);
            return null;
        }

        $db=new AA_Database();
        $query="SELECT ".static::AA_COALIZIONI_DB_TABLE.".* from ".static::AA_COALIZIONI_DB_TABLE." WHERE id_sier='".$this->nId_Data."' AND id='".addslashes($id_coalizione)."' LIMIT 1";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return null;
        }

        $result=null;
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $liste=array();
                
                //Recupero liste
                $query="SELECT * from ".static::AA_LISTE_DB_TABLE." WHERE id_coalizione='".$curRow['id']."'";
                if(!$db->Query($query))
                {
                    AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
                }
                else
                {
                    foreach($db->GetResultSet() as $curLista)
                    {
                        $liste[$curLista['id']]=new AA_SierLista($curLista);
                    }
                    $curRow['liste']=$liste;
                }

                $result = new AA_SierCoalizioni($curRow);
            }
        }

        return $result;
    }

    //Restituisce le liste
    public function GetListe($coalizione=null,$orderedForCircoscrizione=0)
    {
        if(!$this->bValid) return array();

        $db=new AA_Database();
        $query="SELECT ".static::AA_LISTE_DB_TABLE.".* from ".static::AA_LISTE_DB_TABLE." INNER JOIN ".static::AA_COALIZIONI_DB_TABLE." ON ".static::AA_LISTE_DB_TABLE.".id_coalizione=".static::AA_COALIZIONI_DB_TABLE.".id WHERE ".static::AA_COALIZIONI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if($coalizione instanceof AA_SierCoalizioni)
        {
            $query.=" AND ".static::AA_COALIZIONI_DB_TABLE.".id='".addslashes($coalizione->GetProp('id'))."'";
        }

        if($orderedForCircoscrizione==0)
        {
            $query.=" ORDER BY ".static::AA_LISTE_DB_TABLE.".denominazione ";
        } 
        else 
        {
            $query.=" ORDER BY ".static::AA_LISTE_DB_TABLE.".ordine_".$orderedForCircoscrizione.",".static::AA_LISTE_DB_TABLE.".denominazione";
        }

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return array();
        }

        //AA_Log::Log(__METHOD__." - query: ".$query,100);

        $result=array();
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $result[$curRow['id']]=new AA_SierLista($curRow);
            }
        }

        //AA_Log::Log(__METHOD__." - liste: ".print_r($result,true),100);

        return $result;
    }

    //restituisce la lista indicata
    public function GetLista($id_lista="")
    {
        if(!$this->bValid) return array();

        $db=new AA_Database();
        $query="SELECT ".static::AA_LISTE_DB_TABLE.".* from ".static::AA_LISTE_DB_TABLE." INNER JOIN ".static::AA_COALIZIONI_DB_TABLE." ON ".static::AA_LISTE_DB_TABLE.".id_coalizione=".static::AA_COALIZIONI_DB_TABLE.".id WHERE ".static::AA_COALIZIONI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if($id_lista > 0)
        {
            $query.=" AND ".static::AA_LISTE_DB_TABLE.".id='".addslashes($id_lista)."'";
        }

        $query.=" LIMIT 1";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return null;
        }

        //AA_Log::Log(__METHOD__." - query: ".$query,100);

        $result=null;
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $result=new AA_SierLista($curRow);
            }
        }

        return $result;
    }

    public function GetOCEmailCSV()
    {
        if(!$this->bValid) return "circoscrizione;comune;nome;cognome;email;ruolo";

        $comuni=$this->GetComuni();

        $csv="circoscrizione;comune;nome;cognome;email;ruolo";
        $emails=array();
        foreach($comuni as $idComune=>$curComune)
        {
            $operatori=$curComune->GetOperatori(true);
            foreach($operatori as $cf=>$curOperatore)
            {
                //if(!isset($emails[$curOperatore['email']]))
                {
                    $csv.="\n".$curComune->GetProp('circoscrizione').";".$curComune->GetProp("denominazione").";".$curOperatore['nome'].";".$curOperatore['cognome'].";".$curOperatore['email'].";".$curOperatore['ruolo'];
                    $emails[$curOperatore['email']]=1;
                }
            }
        }

        return $csv;
    }

    public function GetCSVImportMap($toCsv=false)
    {
        if(!$this->bValid) 
        {
            if(!$toCsv) return array();
            else return "id_candidato,nome,cognome,id_lista,circoscrizione";
        }

        if($toCsv)
        {
            $feed="id_candidato,nome,cognome,id_lista,circoscrizione";
            $candidati=$this->GetCandidati();
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                $feed.="\n".$curCandidato->GetProp("id").",".$curCandidato->GetProp("nome").",".$curCandidato->GetProp("cognome").",".$curCandidato->GetProp("id_lista").",".$curCandidato->Getprop("circoscrizione");
            }   
            
            return $feed;
        }

        $feed=array("voti_presidente"=>array(),"voti_lista"=>array(),"voti_candidato"=>array(),'circoscrizioni'=>array(),"comuni"=>array());
        $coalizioni=$this->GetCoalizioni();
        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {
            $feed['voti_presidente'][$idCoalizione]=array("nome_coalizione"=>$curCoalizione->GetProp("denominazione"),"presidente"=>$curCoalizione->GetProp("nome_candidato"));
        }

        $liste=$this->GetListe();
        foreach($liste as $idLista=>$curLista)
        {
            $feed['voti_lista'][$idLista]=array("denominazione"=>$curLista->GetProp("denominazione"),"id_presidente"=>$curLista->GetProp("id_coalizione"));
        }

        $candidati=$this->GetCandidati();
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            $feed['voti_candidato'][$idCandidato]=array("nome"=>$curCandidato->GetProp("nome"),"cognome"=>$curCandidato->GetProp("cognome"),"id_lista"=>$curCandidato->GetProp("id_lista"),"circoscrizione"=>$curCandidato->Getprop("circoscrizione"));
        }

        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        foreach($circoscrizioni as $idCircoscrizione=>$curCircoscrizione)
        {
            $feed['circoscrizioni'][$idCircoscrizione]=array("denominazione"=>$curCircoscrizione);
        }

        $comuni=$this->GetComuni();
        foreach($comuni as $idComune=>$curComune)
        {
            $feed['comuni'][$idComune]=array("denominazione"=>$curComune->GetProp("denominazione"),"id_circoscrizione"=>$curComune->GetProp('id_circoscrizione'),"circoscrizione"=>$curComune->GetProp("circoscrizione"));
        }

        return $feed;
    }

    public function ExportCorpoElettoraleComuniCSV($circoscrizione=null)
    {
        if(!$this->bValid) 
        {
            return "aggiornamento;circoscrizione;comune;sezioni_ordinarie;sezioni_ospedaliere;sezioni_totali;luoghicura_sub100;luoghicura_over100;luoghidetenzione;elettori_maschi;elettrici_femmine;elettori_totali;elettori_res_estero_maschi;elettrici_res_estero_femmine;elettori_res_estero_tot";
        }
        
        $csv="aggiornamento;circoscrizione;comune;sezioni_ordinarie;sezioni_ospedaliere;sezioni_totali;luoghicura_sub100;luoghicura_over100;luoghidetenzione;elettori_maschi;elettrici_femmine;elettori_totali;elettori_res_estero_maschi;elettrici_res_estero_femmine;elettori_res_estero_tot";
        $comuni=$this->GetComuni($circoscrizione);
        $log=$this->GetLog()->GetLog();
        $msg=array_column($log,"msg");

        //AA_Log::Log(__METHOD__." - messaggi: ".print_r($msg,true),100);

        foreach($comuni as $idComune=>$curComune)
        {
            $aggiornamento="non aggiornato";
            $logComune=$curComune->GetLogs(true);
            $msgCol=array_column($logComune,"msg");
            $msgIndex=array_keys($logComune);
            foreach($msgCol as $key=>$curMsg)
            {
                if(strpos($curMsg,"corpo elettorale") !==false)
                {
                    //AA_Log::Log(__METHOD__." - trovato in: ".$curMsg." - chiave: ".print_r($key,true),100);
                    $aggiornamento=$logComune[$msgIndex[$key]]['data'];
                }
            }

            if($aggiornamento=="non aggiornato")
            {
                foreach($msg as $key=>$curMsg)
                {
                    if(strpos($curMsg,$curComune->GetProp("denominazione"))!==false && strpos($curMsg,"corpo elettorale") !==false)
                    {
                        //AA_Log::Log(__METHOD__." - trovato: ".$curComune->GetProp("denominazione")." - - modifica corpo elettorale - in: ".str_replace("-","",$curMsg),100);
                        $aggiornamento=$log[$key]['data'];
                    }
                    else
                    {
                        if(strpos($curMsg,$curComune->GetProp("denominazione"))!==false && strpos($curMsg,"Modifica comune") !==false && $aggiornamento == "non aggiornato")
                        {
                            $aggiornamento=$log[$key]['data'];
                        }
                    }
                }

                if($aggiornamento == "non aggiornato")
                {
                    if($curComune->GetProp("elettori_esteri_m") > 0 || $curComune->GetProp("elettori_esteri_f")>0)
                    {
                        $aggiornamento="2024-01-11 00:00:00";
                    }
                }
            }

            //if($aggiornamento=="non aggiornato") AA_Log::Log(__METHOD__." - non trovato: ".$curComune->GetProp("denominazione")." - - modifica corpo elettorale - in: ".$curMsg,100);

            $csv.="\n".$aggiornamento.";";
            $csv.=$curComune->GetProp("circoscrizione").";";
            $csv.=$curComune->GetProp("denominazione").";";
            $csv.=$curComune->GetProp("sezioni_ordinarie").";";
            $csv.=$curComune->GetProp("sezioni_ospedaliere").";";
            $csv.=$curComune->GetProp("sezioni").";";
            $csv.=$curComune->GetProp("luoghi_cura_sub100").";";
            $csv.=$curComune->GetProp("luoghi_cura_over100").";";
            $csv.=$curComune->GetProp("luoghi_detenzione").";";
            $csv.=$curComune->GetProp("elettori_m").";";
            $csv.=$curComune->GetProp("elettori_f").";";
            $csv.=(intVal($curComune->GetProp("elettori_m"))+intVal($curComune->GetProp("elettori_f"))).";";
            $csv.=$curComune->GetProp("elettori_esteri_m").";";
            $csv.=$curComune->GetProp("elettori_esteri_f").";";
            $csv.=(intVal($curComune->GetProp("elettori_esteri_m"))+intVal($curComune->GetProp("elettori_esteri_f"))).";";
        }

        return $csv;
    }

    public function ExportDatiComuniCSV($circoscrizione=null)
    {
        if(!$this->bValid)
        {
            return "id|id_sier|denominazione|indirizzo|contatti|risultati|affluenza|operatori|sezioni|elettori_m|elettori_f|id_circoscrizione|rendiconti|pec|comunicazioni|sezioni_ospedaliere|sezioni_ordinarie|luoghi_cura_sub100|luoghi_cura_over100|luoghi_detenzione|elettori_esteri_m|elettori_esteri_f";
        }
        
        $csv="id|id_sier|denominazione|indirizzo|contatti|risultati|affluenza|operatori|sezioni|elettori_m|elettori_f|id_circoscrizione|rendiconti|pec|comunicazioni|sezioni_ospedaliere|sezioni_ordinarie|luoghi_cura_sub100|luoghi_cura_over100|luoghi_detenzione|elettori_esteri_m|elettori_esteri_f";
        $comuni=$this->GetComuni($circoscrizione);
        $log=$this->GetLog()->GetLog();
        $msg=array_column($log,"msg");

        //AA_Log::Log(__METHOD__." - messaggi: ".print_r($msg,true),100);

        foreach($comuni as $idComune=>$curComune)
        {
            $csv.="\n".$idComune."|";
            $csv.=$curComune->GetProp("id_sier")."|";
            $csv.=$curComune->GetProp("denominazione")."|";
            $csv.=base64_encode($curComune->GetProp("indirizzo"))."|";
            $csv.=base64_encode($curComune->GetProp("contatti"))."|";
            $csv.=base64_encode($curComune->GetProp("risultati"))."|";
            $csv.=base64_encode($curComune->GetProp("affluenza"))."|";
            $csv.=base64_encode($curComune->GetProp("operatori"))."|";
            $csv.=$curComune->GetProp("sezioni")."|";
            $csv.=$curComune->GetProp("elettori_m")."|";
            $csv.=$curComune->GetProp("elettori_f")."|";
            $csv.=$curComune->GetProp("id_circoscrizione")."|";
            $csv.=base64_encode($curComune->GetProp("rendiconti"))."|";
            $csv.=$curComune->GetProp("pec")."|";
            $csv.=base64_encode($curComune->GetProp("comunicazioni"))."|";
            $csv.=$curComune->GetProp("sezioni_ospedaliere")."|";
            $csv.=$curComune->GetProp("sezioni_ordinarie")."|";
            $csv.=$curComune->GetProp("luoghi_cura_sub100")."|";
            $csv.=$curComune->GetProp("luoghi_cura_over100")."|";
            $csv.=$curComune->GetProp("luoghi_detenzione")."|";
            $csv.=$curComune->GetProp("elettori_esteri_m")."|";
            $csv.=$curComune->GetProp("elettori_esteri_f");
        }

        return $csv;
    }

    public function ExportCandidatiCSV($circoscrizione=null)
    {
        if(!$this->bValid) 
        {
            return "nome,cognome,circoscrizione,lista,coalizione";
        }
        
        $csv="nome,cognome,circoscrizione,lista,coalizione";

        $candidati=$this->GetCandidati(null,$circoscrizione);

        //AA_Log::Log(__METHOD__." - messaggi: ".print_r($msg,true),100);

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            $csv.="\n".$curCandidato->GetProp("nome").",";
            $csv.=$curCandidato->GetProp("cognome").",";
            $csv.=$curCandidato->GetProp("circoscrizione").",";
            $csv.=$curCandidato->GetProp("lista").",";
            $csv.=$curCandidato->GetProp("coalizione");
        }

        return $csv;
    }

    //Restituisce i candidati
    public function GetCandidati($coalizione=null,$lista=null,$circoscrizione=0)
    {
        if(!$this->bValid) return array();

        $db=new AA_Database();
        $order=" ORDER by ".static::AA_CANDIDATI_DB_TABLE.".cognome, ".static::AA_CANDIDATI_DB_TABLE.".nome, ".static::AA_CANDIDATI_DB_TABLE.".ordine, ".static::AA_CANDIDATI_DB_TABLE.".id";
        $query="SELECT ".static::AA_CANDIDATI_DB_TABLE.".*,".static::AA_COALIZIONI_DB_TABLE.".id as id_coalizione,".static::AA_COALIZIONI_DB_TABLE.".denominazione as coalizione,".static::AA_LISTE_DB_TABLE.".denominazione as lista from ".static::AA_CANDIDATI_DB_TABLE." INNER JOIN ".static::AA_LISTE_DB_TABLE." ON ".static::AA_CANDIDATI_DB_TABLE.".id_lista=".static::AA_LISTE_DB_TABLE.".id INNER JOIN ".static::AA_COALIZIONI_DB_TABLE." ON ".static::AA_LISTE_DB_TABLE.".id_coalizione=".static::AA_COALIZIONI_DB_TABLE.".id WHERE ".static::AA_COALIZIONI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if($coalizione instanceof AA_SierCoalizioni)
        {
            $query.=" AND ".static::AA_COALIZIONI_DB_TABLE.".id='".addslashes($coalizione->GetProp('id'))."'";
            $order=" ORDER by ".static::AA_CANDIDATI_DB_TABLE.".id_lista, ".static::AA_CANDIDATI_DB_TABLE.".ordine, ".static::AA_CANDIDATI_DB_TABLE.".cognome, ".static::AA_CANDIDATI_DB_TABLE.".nome";
        }

        if($lista instanceof AA_SierLista)
        {
            $query.=" AND ".static::AA_CANDIDATI_DB_TABLE.".id_lista='".addslashes($lista->GetProp('id'))."'";
            //$order=" ORDER by ".static::AA_CANDIDATI_DB_TABLE.".ordine, ".static::AA_CANDIDATI_DB_TABLE.".cognome, ".static::AA_CANDIDATI_DB_TABLE.".nome";
        }

        if($circoscrizione > 0)
        {
            $query.=" AND ".static::AA_CANDIDATI_DB_TABLE.".id_circoscrizione='".addslashes($circoscrizione)."'";
        }

        $query.=$order;

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return array();
        }

        $result=array();
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $circoscrizione=AA_Sier_Const::GetCircoscrizione($curRow['id_circoscrizione']);
                if($circoscrizione) $curRow['circoscrizione']=$circoscrizione['value'];
                $result[$curRow['id']]=new AA_SierCandidato($curRow);
            }
        }

        return $result;
    }

    //Restituisce un candidato specifico
    public function GetCandidato($id="")
    {
        if(!$this->bValid || $id<=0 || $id=="") return null;

        $db=new AA_Database();
        $query="SELECT ".static::AA_CANDIDATI_DB_TABLE.".*,".static::AA_COALIZIONI_DB_TABLE.".id as id_coalizione,".static::AA_COALIZIONI_DB_TABLE.".denominazione as coalizione,".static::AA_LISTE_DB_TABLE.".denominazione as lista from ".static::AA_CANDIDATI_DB_TABLE." INNER JOIN ".static::AA_LISTE_DB_TABLE." ON ".static::AA_CANDIDATI_DB_TABLE.".id_lista=".static::AA_LISTE_DB_TABLE.".id INNER JOIN ".static::AA_COALIZIONI_DB_TABLE." ON ".static::AA_LISTE_DB_TABLE.".id_coalizione=".static::AA_COALIZIONI_DB_TABLE.".id WHERE ".static::AA_COALIZIONI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if($id > 0)
        {
            $query.=" AND ".static::AA_CANDIDATI_DB_TABLE.".id ='".addslashes($id)."'";
        }

        $query.=" LIMIT 1";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return null;
        }

        $result=null;
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $circoscrizione=AA_Sier_Const::GetCircoscrizione($curRow['id_circoscrizione']);
                if($circoscrizione) $curRow['circoscrizione']=$circoscrizione['value'];
                $result=new AA_SierCandidato($curRow);
            }
        }

        return $result;
    }

    //Restituisce i comuni
    public function GetComuni($circoscrizione=null,$params=null)
    {
        if(!$this->bValid) return array();

        $db=new AA_Database();
        $query="SELECT ".static::AA_COMUNI_DB_TABLE.".id";
        $query.=",".static::AA_COMUNI_DB_TABLE.".id_sier";
        $query.=",".static::AA_COMUNI_DB_TABLE.".denominazione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".indirizzo";
        $query.=",".static::AA_COMUNI_DB_TABLE.".contatti";
        $query.=",".static::AA_COMUNI_DB_TABLE.".affluenza";
        $query.=",".static::AA_COMUNI_DB_TABLE.".operatori";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_m";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_f";
        $query.=",".static::AA_COMUNI_DB_TABLE.".id_circoscrizione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".pec";
        $query.=",".static::AA_COMUNI_DB_TABLE.".lastupdate";
        $query.=",".static::AA_COMUNI_DB_TABLE.".comunicazioni";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni_ordinarie";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni_ospedaliere";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_cura_over100";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_cura_sub100";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_detenzione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_esteri_m";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_esteri_f";
        $query.=",".static::AA_COMUNI_DB_TABLE.".analisi_risultati";
        $query.=" FROM ".static::AA_COMUNI_DB_TABLE." WHERE ".static::AA_COMUNI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if(is_array($params))
        {
            if(isset($params['senza_operatori']) && $params['senza_operatori']==1)
            {
                $query.=" AND operatori like ''";
            }

            if(isset($params['senza_affluenza']) && $params['senza_affluenza']==1)
            {
                $query.=" AND affluenza like ''";
            }

            if(isset($params['senza_risultati']) && $params['senza_risultati']==1)
            {
                $query.=" AND risultati like ''";
            }

            if(isset($params['senza_rendiconti']) && $params['senza_rendiconti']==1)
            {
                $query.=" AND (rendiconti like '' OR rendiconti not like '%,\"estremi_rendiconto\":%')";
            }

            if(isset($params['con_rendiconti']) && $params['con_rendiconti']==1)
            {
                $query.=" AND rendiconti like '%,\"estremi_rendiconto\":%'";
            }

            if(isset($params['scrutinio_parziale']) && $params['scrutinio_parziale']==1)
            {
                $query.=" AND (risultati not like CONCAT('{\"sezioni_scrutinate\":\"',sezioni,'\",%') AND risultati not like '')";
            }

            if(isset($params['senza_voti_lista']) && $params['senza_voti_lista']==1)
            {
                $query.=" AND (risultati not like '%\"voti_lista\":%' AND risultati not like '')";
            }

            if(isset($params['senza_certificazione_45']) && $params['senza_certificazione_45']==1)
            {
                $query.=" AND comunicazioni not like '%\"corpoelettorale_45\":1%'";
            }

            if(isset($params['senza_certificazione_15']) && $params['senza_certificazione_15']==1)
            {
                $query.=" AND comunicazioni not like '%\"corpoelettorale_15\":1%'";
            }

            if(isset($params['con_criticita']) && $params['con_criticita']==1)
            {
                $query.=" AND analisi_risultati not like '[false,%'";
            }
        }

        if(isset($params['orderByCircoscrizione'])) $query.=" ORDER by id_circoscrizione, ".static::AA_COMUNI_DB_TABLE.".denominazione";
        else $query.=" ORDER by ".static::AA_COMUNI_DB_TABLE.".denominazione";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return array();
        }

        //AA_Log::Log(__METHOD__." - query: ".$query,100);

        $result=array();
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $circoscrizione=AA_Sier_Const::GetCircoscrizione($curRow['id_circoscrizione']);
                if($circoscrizione) $curRow['circoscrizione']=$circoscrizione['value'];
                $result[$curRow['id']]=new AA_SierComune($curRow);
            }
        }

        return $result;
    }

    //Restituisce un comune specifico
    public function GetComune($id="",$cf_oc="")
    {
        if(!$this->bValid || (($id<=0 || $id=="") && $cf_oc=="")) return null;

        $db=new AA_Database();
        $query="SELECT ".static::AA_COMUNI_DB_TABLE.".id";
        $query.=",".static::AA_COMUNI_DB_TABLE.".id_sier";
        $query.=",".static::AA_COMUNI_DB_TABLE.".denominazione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".indirizzo";
        $query.=",".static::AA_COMUNI_DB_TABLE.".contatti";
        $query.=",".static::AA_COMUNI_DB_TABLE.".affluenza";
        $query.=",".static::AA_COMUNI_DB_TABLE.".operatori";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_m";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_f";
        $query.=",".static::AA_COMUNI_DB_TABLE.".id_circoscrizione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".pec";
        $query.=",".static::AA_COMUNI_DB_TABLE.".lastupdate";
        $query.=",".static::AA_COMUNI_DB_TABLE.".comunicazioni";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni_ordinarie";
        $query.=",".static::AA_COMUNI_DB_TABLE.".sezioni_ospedaliere";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_cura_over100";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_cura_sub100";
        $query.=",".static::AA_COMUNI_DB_TABLE.".luoghi_detenzione";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_esteri_m";
        $query.=",".static::AA_COMUNI_DB_TABLE.".elettori_esteri_f";
        $query.=",".static::AA_COMUNI_DB_TABLE.".analisi_risultati";
        $query.=" FROM ".static::AA_COMUNI_DB_TABLE." WHERE ".static::AA_COMUNI_DB_TABLE.".id_sier='".$this->nId_Data."'";

        if($id > 0)
        {
            $query.=" AND ".static::AA_COMUNI_DB_TABLE.".id ='".addslashes($id)."'";
        }

        if($cf_oc !="")
        {
            $query.=" AND (".static::AA_COMUNI_DB_TABLE.".operatori like '%\"cf\":\"".addslashes(strtolower($cf_oc))."\"%' OR ".static::AA_COMUNI_DB_TABLE.".operatori like '%\"cf\":\"".addslashes(strtoupper($cf_oc))."\"%')";
        }

        $query.=" LIMIT 1";

        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore query: ".$query,100);
            return null;
        }

        //AA_Log::Log(__METHOD__." - query: ".$query,100);

        $result=null;
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            foreach($rs as $curRow)
            {
                $circoscrizione=AA_Sier_Const::GetCircoscrizione($curRow['id_circoscrizione']);
                if($circoscrizione) $curRow['circoscrizione']=$circoscrizione['value'];
                $result=new AA_SierComune($curRow);
            }
        }

        return $result;
    }

    //funzione di ricerca
    static public function Search($params=array(),$user=null)
    {
        //Verifica utente
        if($user instanceof AA_User)
        {
            if(!$user->isCurrentUser())
            {
                $user=AA_User::GetCurrentUser();
            }
        }
        else $user=AA_User::GetCurrentUser();

        //---------local checks-------------
        $params['class']="AA_Sier";
        //----------------------------------

        return parent::Search($params,$user);
    }

    //Funzione di verifica dei permessi
    public function GetUserCaps($user=null)
    {
        //Verifica utente
        if($user instanceof AA_User)
        {
            if(!$user->isCurrentUser())
            {
               $user=AA_User::GetCurrentUser();
            }
        }
        else $user=AA_User::GetCurrentUser();

        $perms=parent::GetUserCaps($user);

        //------------local checks---------------

        //Se l'utente non ha il flag può al massimo visualizzare la scheda
        if(($perms & AA_Const::AA_PERMS_WRITE) > 0 && !$user->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) && !$user->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $perms = AA_Const::AA_PERMS_READ;
        }
        //---------------------------------------

        //Se l'utente ha il flag e può modificare la scheda allora può fare tutto
        if(($perms & AA_Const::AA_PERMS_WRITE) > 0 && $user->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $perms = AA_Const::AA_PERMS_ALL;
        }
        //---------------------------------------

        return $perms;
    }

    static public function AddNew($object=null,$user=null,$bSaveData=true)
    {
        //Verifica utente
        if($user instanceof AA_User)
        {
            if(!$user->isCurrentUser())
            {
               $user=AA_User::GetCurrentUser();
            }
        }
        else $user=AA_User::GetCurrentUser();

        //-------------local checks---------------------
        $bStandardCheck=false; //disable standard checks
        $bSaveData=true; //enable save data

        //Chi non ha il flag non può inserire nuovi elementi
        if(!$user->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            AA_Log::Log(__METHOD__." - L'utente corrente: ".$user->GetUserName()." non ha i permessi per inserire nuovi elementi.",100);
            return false;
        }

        //Verifica validità oggetto
        if(!($object instanceof AA_Sier))
        {
            AA_Log::Log(__METHOD__." - Errore: oggetto non valido (".print_r($object,true).").",100);
            return false;
        }

        $object->nId=0;
        $object->bValid=true;
        //----------------------------------------------

        return parent::AddNew($object,$user,$bSaveData);
    }

    //Restituisce un allegato esistente
    public function GetAllegato($id=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - oggetto non valido.", 100,false,true);
                return null;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return null;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_READ)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non ha accesso all'oggetto.", 100,false,true);
            return null;
        }
        
        $id_sier=$this->nId_Data;
        if($this->nId_Data_Rev > 0)
        {
            $id_sier=$this->nId_Data_Rev;
        }

        $query="SELECT * FROM ".AA_Sier::AA_ALLEGATI_DB_TABLE." WHERE id_sier='".$id_sier."'";
        $query.=" AND id='".addslashes($id)."' LIMIT 1";
        
        $db= new AA_Database();
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return null;            
        }
        
        if($db->GetAffectedRows() > 0)
        {
            $rs=$db->GetResultSet();
            $object=new AA_SierAllegati($rs[0]['id'],$id_sier,$rs[0]['estremi'],$rs[0]['url'],$rs[0]['file'],$rs[0]['tipo'],$rs[0]['aggiornamento'],$rs[0]['destinatari'],$rs[0]['ordine']);
            
            return $object;
        }
        
        return null;
    }
    
    //Aggiunge una nuova lista
    public function AddNewLista($lista=null, $coalizione=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;
        }

        if(!($lista instanceof AA_SierLista))
        {
            AA_Log::Log(__METHOD__." - Dati Lista non validi.", 100,false,true);
            return false;
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiunta nuova lista: ".$lista->GetProp('denominazione')))
        {
            return false;
        }

        //AA_Log::Log(__METHOD__." - nuova lista: ".print_r($lista,true), 100);

        $db = new AA_Database();
        
        /*/Recupera il numero delle liste
        $query="SELECT count(id) as num FROM ".static::AA_LISTE_DB_TABLE." INNER JOIN ".static::AA_COALIZIONI_DB_TABLE." on ".static::AA_LISTE_DB_TABLE.".id_coalizione=".static::AA_COALIZIONI_DB_TABLE.".id WHERE ".static::AA_COALIZIONI_DB_TABLE.".id_sier='".$this->GetIdData()."'";
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $ordine=1;
        if($db->GetAffectedRows()>0)
        {
            $rs=$db->GetResultSet();
            $ordine=$rs[0]['num']+1;
        }*/
        
        $query="INSERT INTO ".static::AA_LISTE_DB_TABLE." SET id_coalizione='".$coalizione->GetProp('id')."'";
        $query.=", denominazione='".addslashes($lista->GetProp('denominazione'))."'";
        $query.=", image='".addslashes($lista->GetProp('image'))."'";
        
        foreach(AA_Sier_Const::GetCircoscrizioni() as $key=>$val)
        {
            $query.=" ,ordine_".$key." = '".$lista->GetProp("ordine_".$key)."'";
        }
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        return true;
    }

    //Aggiorna una lista esistente
    public function UpdateLista($lista=null, $coalizione=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;
        }

        if(!($lista instanceof AA_SierLista))
        {
            AA_Log::Log(__METHOD__." - Dati Lista non validi.", 100,false,true);
            return false;
        }
        
        $query="UPDATE ".static::AA_LISTE_DB_TABLE." SET id_coalizione='".$coalizione->GetProp('id')."'";
        $query.=", denominazione='".addslashes($lista->GetProp('denominazione'))."'";
        $query.=", image='".addslashes($lista->GetProp('image'))."'";
         
        foreach(AA_Sier_Const::GetCircoscrizioni() as $key=>$val)
        {
            $query.=" ,ordine_".$key." = '".$lista->GetProp("ordine_".$key)."'";
        }

        $query.=" WHERE id='".addslashes($lista->GetProp('id'))."' LIMIT 1";
        
        $db = new AA_Database();
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiorna la lista: ".$lista->GetProp('denominazione')))
        {
            return false;
        }

        return true;
    }

    //Aggiunge una nuova coalizione
    public function AddNewCoalizione($newCoalizione=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($newCoalizione instanceof AA_SierCoalizioni))
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiunta nuova coalizione: ".$newCoalizione->GetProp('denominazione')))
        {
            return false;
        }

        $newCoalizione->SetProp('id_sier',$this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $newCoalizione->SetProp('id_sier',$this->nId_Data_Rev);
        }

        $query="INSERT INTO ".static::AA_COALIZIONI_DB_TABLE." SET id_sier='".$newCoalizione->GetProp('id_sier')."'";
        $query.=", denominazione='".addslashes($newCoalizione->GetProp('denominazione'))."'";
        $query.=", nome_candidato='".addslashes($newCoalizione->GetProp('nome_candidato'))."'";
        $query.=", image='".addslashes($newCoalizione->GetProp('image'))."'";
        $query.=", ordine='".addslashes($newCoalizione->GetProp('ordine'))."'";
        
        $db = new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        return true;
    }

    //Aggiorna una coalizione esistente
    public function UpdateCoalizione($newCoalizione=null, $user=null,$log="")
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($newCoalizione instanceof AA_SierCoalizioni))
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if($log=="") $log="Modifica coalizione: ".$newCoalizione->GetProp('denominazione');
        else $log="Modifica coalizione: ".$newCoalizione->GetProp('denominazione')." - ".$log;
        if(!$this->Update($user,true, $log))
        {
            return false;
        }

        $newCoalizione->SetProp('id_sier',$this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $newCoalizione->SetProp('id_sier',$this->nId_Data_Rev);
        }

        $query="UPDATE ".static::AA_COALIZIONI_DB_TABLE." SET id_sier='".$newCoalizione->GetProp('id_sier')."'";
        $query.=", denominazione='".addslashes($newCoalizione->GetProp('denominazione'))."'";
        $query.=", nome_candidato='".addslashes($newCoalizione->GetProp('nome_candidato'))."'";
        $query.=", image='".addslashes($newCoalizione->GetProp('image'))."'";
        $query.=", cv='".addslashes($newCoalizione->GetProp('cv'))."'";
        $query.=", cg='".addslashes($newCoalizione->GetProp('cg'))."'";
        $query.=", ordine='".addslashes($newCoalizione->GetProp('ordine'))."'";
        $query.=" WHERE id='".$newCoalizione->GetProp('id')."' LIMIT 1";
        
        $db = new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        return true;
    }

    //Aggiorna un comune esistente
    public function UpdateComune($newComune=null, $user=null,$AppendLog="")
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($newComune instanceof AA_SierComune))
        {
            AA_Log::Log(__METHOD__." - Dati Comune non validi.", 100,false,true);
            return false;
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        $log="Modifica comune: ".$newComune->GetProp('denominazione');
        if($AppendLog !="") $log.= " - ".$AppendLog;
        if(!$this->Update($user,true,$log))
        {
            AA_Log::Log(__METHOD__." - Errore nell'aggiornamento dell'oggetto.",100);
            return false;
        }

        $newComune->SetProp('id_sier',$this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $newComune->SetProp('id_sier',$this->nId_Data_Rev);
        }

        if($AppendLog=="") $AppendLog="Modifica";
        
        $oc=AA_SierOperatoreComunale::GetInstance();
        if($oc->IsValid())
        {
            $oc=$oc->GetOperatoreComunaleCf();
        }
        else $oc="";

        $newComune->AddLog($AppendLog,$user->GetUsername(),$oc);

        $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET id_sier='".$newComune->GetProp('id_sier')."'";
        $query.=", id_circoscrizione='".addslashes($newComune->GetProp('id_circoscrizione'))."'";
        $query.=", denominazione='".addslashes($newComune->GetProp('denominazione'))."'";
        $query.=", pec='".addslashes($newComune->GetProp('pec'))."'";
        $query.=", indirizzo='".addslashes($newComune->GetProp('indirizzo'))."'";
        $query.=", contatti='".addslashes($newComune->GetProp('contatti'))."'";
        $query.=", indirizzo='".addslashes($newComune->GetProp('indirizzo'))."'";
        $query.=", sezioni='".addslashes($newComune->GetProp('sezioni'))."'";
        $query.=", elettori_m='".addslashes($newComune->GetProp('elettori_m'))."'";
        $query.=", elettori_f='".addslashes($newComune->GetProp('elettori_f'))."'";
        $query.=", affluenza='".addslashes($newComune->GetProp('affluenza'))."'";
        
        $risultati=$newComune->GetProp("risultati");
        if($risultati != "") $query.=", risultati='".addslashes($newComune->GetProp('risultati'))."'";

        $analisi_risultati=$newComune->GetProp("analisi_risultati");
        if($analisi_risultati != "") $query.=", analisi_risultati='".addslashes($analisi_risultati)."'";

        $query.=", comunicazioni='".addslashes($newComune->GetProp('comunicazioni'))."'";
        $query.=", operatori='".addslashes($newComune->GetProp('operatori'))."'";
        $query.=", sezioni_ordinarie='".addslashes($newComune->GetProp('sezioni_ordinarie'))."'";
        $query.=", sezioni_ospedaliere='".addslashes($newComune->GetProp('sezioni_ospedaliere'))."'";
        $query.=", luoghi_cura_sub100='".addslashes($newComune->GetProp('luoghi_cura_sub100'))."'";
        $query.=", luoghi_cura_over100='".addslashes($newComune->GetProp('luoghi_cura_over100'))."'";
        $query.=", luoghi_detenzione='".addslashes($newComune->GetProp('luoghi_detenzione'))."'";
        $query.=", elettori_esteri_m='".addslashes($newComune->GetProp('elettori_esteri_m'))."'";
        $query.=", elettori_esteri_f='".addslashes($newComune->GetProp('elettori_esteri_f'))."'";
        
        $feed_risultati=$newComune->GetProp('feed_risultati');
        if($feed_risultati!="") $query.=", feed_risultati='".addslashes($feed_risultati)."'";
        
        $rendiconti=$newComune->GetProp('rendiconti');
        if($rendiconti!="") $query.=", rendiconti='".addslashes($rendiconti)."'";
        
        $query.=", logs='".addslashes(json_encode($newComune->GetLogs(true)))."'";

        $query.=", lastupdate='".date("Y-m-d H:i:s")."'";
        $query.=" WHERE id='".$newComune->GetProp('id')."' LIMIT 1";
        
        $db = new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query - ".$db->GetLastErrorMessage(), 100);
            return false;            
        }
        
        return true;
    }

    //Elimina una coalizione esistente
    public function DeleteCoalizione($coalizione=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            if($coalizione == "" && $coalizione == null)
            {
                AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100);
                return false;
            }
            $coalizioni=$this->GetCoalizioni(array('id_coalizione'=>$coalizione));
            if(isset($coalizioni[$coalizione])) $coalizione=$coalizioni[$coalizione];
            else
            {
                AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100);
                return false;
            }
        }

        if($coalizione->GetProp('id')<=0)
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;            
        }

        //Elimina le liste
        foreach($coalizione->GetListe() as $curLista)
        {
            if(!$this->DeleteLista($curLista,$coalizione,$user))
            {
                return false;
            }
        }

        //Elimina l'immagine
        if($coalizione->GetProp("image") !="")
        {
            $storage=AA_Storage::GetInstance();
            if($storage->IsValid())
            {
                if(!$storage->DelFile($coalizione->GetProp("image")))
                {
                    AA_Log::Log(__METHOD__." - Errore durante l'eliminazione dell'immagine della coalizione.", 100);
                    //return false;      
                }
            }
        }

        //Elimina il cv
        if($coalizione->GetProp("cv") !="" && strpos($coalizione->GetProp("cv"),"http")===false)
        {
            $storage=AA_Storage::GetInstance();
            if($storage->IsValid())
            {
                if(!$storage->DelFile($coalizione->GetProp("cv")))
                {
                    AA_Log::Log(__METHOD__." - Errore durante l'eliminazione del cv del candidato Presidente.", 100);
                    //return false;      
                }
            }
        }

        //elimina il cg
        if($coalizione->GetProp("cg") !="" && strpos($coalizione->GetProp("cg"),"http")===false)
        {
            $storage=AA_Storage::GetInstance();
            if($storage->IsValid())
            {
                if(!$storage->DelFile($coalizione->GetProp("cv")))
                {
                    AA_Log::Log(__METHOD__." - Errore durante l'eliminazione del cv del candidato Presidente.", 100);
                    //return false;      
                }
            }
        }

        $query="DELETE FROM ".static::AA_COALIZIONI_DB_TABLE." WHERE id_sier='".$this->nId_Data."'";
        $query.=" AND id='".addslashes($coalizione->GetProp('id'))."' LIMIT 1";
        
        $db = new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Elimina coalizione: ".$coalizione->GetProp('denominazione')))
        {
            return false;
        }
        
        return true;
    }

    //Elimina una lista esistente
    public function DeleteLista($lista=null,$coalizione=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            if($coalizione == "" && $coalizione == null)
            {
                AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100);
                return false;
            }
            $coalizioni=$this->GetCoalizioni(array('id_coalizione'=>$coalizione));
            if(isset($coalizioni[$coalizione])) $coalizione=$coalizioni[$coalizione];
            else
            {
                AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100);
                return false;
            }
        }

        if($coalizione->GetProp('id')<=0)
        {
            AA_Log::Log(__METHOD__." - Dati Coalizione non validi.", 100,false,true);
            return false;            
        }

        $liste=$coalizione->GetListe();

        if(!($lista instanceof AA_SierLista))
        {
            if($lista == "" || $lista == null)
            {
                AA_Log::Log(__METHOD__." - Dati Lista non validi.", 100,false,true);
                return false;   
            }
                
            if(!isset($liste[$lista]))
            {
                AA_Log::Log(__METHOD__." - Dati Lista non validi.", 100,false,true);
                return false;                   
            }

            $lista=$liste[$lista];
        }
        else
        {
            if(!isset($liste[$lista->GetProp('id')]))
            {
                AA_Log::Log(__METHOD__." - Dati Lista non validi.", 100,false,true);
                return false;                   
            }
        }

        //Elimina i candidati associati alla lista
        $candidati=$this->GetCandidati($coalizione,$lista);
        foreach($candidati as $curCandidato)
        {
            if(!$this->DeleteCandidato($curCandidato))
            {
                AA_Log::Log(__METHOD__." - Errore nella cancellazione delle informazioni sui candidati associati alla lista.", 100,false,true);
                return false;
            }
        }

        if($lista->GetProp("image") !="")
        {
            $storage=AA_Storage::GetInstance();
            if($storage->IsValid())
            {
                if(!$storage->DelFile($lista->GetProp("image")))
                {
                    AA_Log::Log(__METHOD__." - Errore durante l'eliminazione dell'immagine della lista.", 100);
                    //return false;      
                }
            }
        }

        $query="DELETE FROM ".static::AA_LISTE_DB_TABLE." WHERE id_coalizione='".addslashes($coalizione->GetProp('id'))."'";
        $query.=" AND id='".addslashes($lista->GetProp('id'))."' LIMIT 1";
        
        $db = new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Elimina la Lista: ".$lista->GetProp('denominazione')))
        {
            return false;
        }
        
        return true;
    }

    //Aggiunge un nuovo candidato
    public function AddNewCandidato($candidato=null, $user=null)
    {
        //AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($candidato instanceof AA_SierCandidato))
        {
            AA_Log::Log(__METHOD__." - Candidato non valido.", 100,false,true);
            return false;
        }

        $db= new AA_Database();

        //Calcolo dell'ordine
        $ordine=0;
        $query="SELECT count(id) as num FROM ".static::AA_CANDIDATI_DB_TABLE." WHERE id_circoscrizione='".$candidato->GetProp("id_circoscrizione")."' AND id_lista='".addslashes($candidato->GetProp("id_lista"))."'";
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }

        $rs=$db->GetResultSet();
        $ordine=$rs[0]['num']+1;

        $query="INSERT INTO ".static::AA_CANDIDATI_DB_TABLE." SET id_circoscrizione='".$candidato->GetProp("id_circoscrizione")."'";
        $query.=", id_lista='".addslashes($candidato->GetProp("id_lista"))."'";
        $query.=", nome='".addslashes($candidato->GetProp("nome"))."'";
        $query.=", cognome='".addslashes($candidato->GetProp("cognome"))."'";
        $query.=", cf='".addslashes($candidato->GetProp("cf"))."'";
        $query.=", cv='".addslashes($candidato->GetProp("cv"))."'";
        $query.=", cg='".addslashes($candidato->GetProp("cg"))."'";
        $query.=", ordine='".$ordine."'";
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiunta nuovo candidato: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {
            return false;
        }

        $newId=$db->GetLastInsertId();
        //AA_Log::Log(__METHOD__." - new id: ".$newId, 100,false,true);

        return $newId;
    }

    //Aggiunge un nuovo comune
    public function AddNewComune($comune=null, $user=null)
    {
        //AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($comune instanceof AA_SierComune))
        {
            AA_Log::Log(__METHOD__." - Comune non valido.", 100,false,true);
            return false;
        }

        $db= new AA_Database();

        $rs=$db->GetResultSet();

        //denominazione|indirizzo|contatti|risultati|affluenza|operatori|sezioni|elettori_m|elettori_f|id_circoscrizione|rendiconti|pec|lastupdate

        $query="INSERT INTO ".static::AA_COMUNI_DB_TABLE." SET id_circoscrizione='".$comune->GetProp("id_circoscrizione")."'";
        $query.=", denominazione='".addslashes($comune->GetProp("denominazione"))."'";
        $query.=", indirizzo='".addslashes($comune->GetProp("indirizzo"))."'";
        $query.=", contatti='".addslashes($comune->GetProp("contatti"))."'";
        $query.=", risultati='".addslashes($comune->GetProp("risultati"))."'";
        $query.=", affluenza='".addslashes($comune->GetProp("affluenza"))."'";
        $query.=", operatori='".addslashes($comune->GetProp("operatori"))."'";
        $query.=", comunicazioni='".addslashes($comune->GetProp("comunicazioni"))."'";
        $query.=", sezioni='".addslashes($comune->GetProp("sezioni"))."'";
        $query.=", elettori_m='".addslashes($comune->GetProp("elettori_m"))."'";
        $query.=", elettori_f='".addslashes($comune->GetProp("elettori_f"))."'";
        $query.=", rendiconti='".addslashes($comune->GetProp("rendiconti"))."'";
        $query.=", pec='".addslashes($comune->GetProp("pec"))."'";
        $query.=", lastupdate='".addslashes($comune->GetProp("lastupdate"))."'";
        $query.=", id_sier='".addslashes($this->GetIdData())."'";
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiunta nuovo comune: ".$comune->GetProp("denominazione")))
        {
            return false;
        }

        $newId=$db->GetLastInsertId();
        //AA_Log::Log(__METHOD__." - new id: ".$newId, 100,false,true);

        return $newId;
    }

    //Aggiunge un nuovo comune
    public function AddNewComuneMulti($data=array(), $user=null)
    {
        //AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - Dati non non valido.", 100,false,true);
            return false;
        }

        $result=array(0,0);
        foreach($data as $curComune)
        {
            if(is_array($curComune))
            {
                if($this->AddNewComune(new AA_SierComune($curComune))===false)
                {
                    $result[1]+=1;
                }
                else $result[0]+=1;
            }
        }
    
        return $result;
    }

    //Aggiorna un candidato
    public function UpdateCandidato($candidato=null, $user=null,$logMsg="")
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($candidato instanceof AA_SierCandidato))
        {
            AA_Log::Log(__METHOD__." - Candidato non valido.", 100,false,true);
            return false;
        }

        $query="UPDATE ".static::AA_CANDIDATI_DB_TABLE." SET id_circoscrizione='".$candidato->GetProp("id_circoscrizione")."'";
        $query.=", id_lista='".addslashes($candidato->GetProp("id_lista"))."'";
        $query.=", nome='".addslashes(trim($candidato->GetProp("nome")))."'";
        $query.=", cognome='".addslashes(trim($candidato->GetProp("cognome")))."'";
        $query.=", cf='".addslashes(trim($candidato->GetProp("cf")))."'";
        $query.=", cv='".addslashes($candidato->GetProp("cv"))."'";
        $query.=", cg='".addslashes($candidato->GetProp("cg"))."'";
        $query.=", ordine='".addslashes(trim($candidato->GetProp("ordine")))."'";
        $query.=" WHERE id='".$candidato->GetProp('id')."' LIMIT 1";
        
        $db= new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if($logMsg=="") $logMsg="Aggiornamento candidato: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome");
        if(!$this->Update($user,true, $logMsg))
        {
            return false;
        }

        return true;
    }

    //Aggiunge un nuovo allegato
    public function AddNewAllegato($allegato=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'oggetto (".$this->GetId().").", 100,false,true);
            return false;
        }

        if(!($allegato instanceof AA_SierAllegati))
        {
            AA_Log::Log(__METHOD__." - Allegato non valido.", 100,false,true);
            return false;
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiunta nuovo allegato: ".$allegato->GetEstremi()))
        {
            return false;
        }

        $allegato->SetIdSier($this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $allegato->SetIdSier($this->nId_Data_Rev);
        }

        $db= new AA_Database();

        $ordine=$allegato->GetOrdine();
        if($allegato->GetOrdine()==0)
        {
            $query="SELECT count(id) as num FROM ".static::AA_ALLEGATI_DB_TABLE;
            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - Errore nella query: ".$query." - errore: ".$db->GetErrorMessage(), 100,true);
            }

            $rs=$db->GetResultSet();
            $ordine=$rs[0]['num']+1;
        }

        $query="INSERT INTO ".static::AA_ALLEGATI_DB_TABLE." SET id_sier='".$allegato->GetIdSier()."'";
        $query.=", url='".addslashes($allegato->GetUrl())."'";
        $query.=", estremi='".addslashes($allegato->GetEstremi())."'";
        $query.=", file='".addslashes($allegato->GetFileHash())."'";
        $query.=", tipo='".addslashes($allegato->GetTipo())."'";
        $query.=", aggiornamento='".addslashes($allegato->GetAggiornamento())."'";
        $query.=",destinatari='".$allegato->GetDestinatari()."'";
        $query.=",ordine='".$ordine."'";
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        return true;
    }

    //Aggiorna un allegato esistente
    public function UpdateAllegato($allegato=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        if(!($allegato instanceof AA_SierAllegati))
        {
            AA_Log::Log(__METHOD__." - Allegato non valido.", 100,false,true);
            return false;
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Aggiornamento allegato: ".$allegato->GetEstremi()))
        {
            return false;
        }

        $allegato->SetIdSier($this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $allegato->SetIdSier($this->nId_Data_Rev);
        }

        $db= new AA_Database();

        $ordine=$allegato->GetOrdine();
        if($allegato->GetOrdine()==0)
        {
            $query="SELECT count(id) as num FROM ".static::AA_ALLEGATI_DB_TABLE;
            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - Errore nella query: ".$query." - errore: ".$db->GetErrorMessage(), 100,true);
            }

            $rs=$db->GetResultSet();
            $ordine=$rs[0]['num']+1;
        }
        
        $query="UPDATE ".static::AA_ALLEGATI_DB_TABLE." SET id_sier='".$allegato->GetIdSier()."'";
        $query.=", url='".addslashes($allegato->GetUrl())."'";
        $query.=", estremi='".addslashes($allegato->GetEstremi())."'";
        $query.=", file='".addslashes($allegato->GetFileHash())."'";
        $query.=", tipo='".addslashes($allegato->GetTipo())."'";
        $query.=", aggiornamento='".addslashes($allegato->GetAggiornamento())."'";
        $query.=",destinatari='".$allegato->GetDestinatari()."'";
        $query.=",ordine='".$ordine."'";
        $query.=" WHERE id='".addslashes($allegato->GetId())."' LIMIT 1";
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        return true;
    }

    //Elimina un allegato esistente
    public function DeleteAllegato($allegato=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        if(!($allegato instanceof AA_SierAllegati))
        {
            AA_Log::Log(__METHOD__." - Allegato non valido.", 100,false,true);
            return false;
        }

        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Rimozione allegato: ".$allegato->GetEstremi()))
        {
            return false;
        }

        $allegato->SetIdSier($this->nId_Data);
        if($this->nId_Data_Rev > 0)
        {
            $allegato->SetIdSier($this->nId_Data_Rev);
        }
        
        $query="DELETE FROM ".static::AA_ALLEGATI_DB_TABLE;
        $query.=" WHERE id='".addslashes($allegato->GetId())."'";
        if($this->nId_Data_Rev > 0)
        {
            $query.=" AND id_sier = '".$this->nId_Data_Rev."'";
        }
        else $query.=" AND id_sier = '".$this->nId_Data."'";
        
        $query.="LIMIT 1";
        
        $db= new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $fileHash=$allegato->GetFileHash();
        
        if($fileHash=="") return true;
        
        $storage=AA_Storage::GetInstance($user);
        if($storage->IsValid())
        {
            if(!$storage->DelFile($fileHash))
            {
                AA_Log::Log(__METHOD__." - Errore nella rimozione del file sullo storage. (".$fileHash.")", 100,false,true);
            }
        }

        return true;
    }

    //Elimina un candidato esistente
    public function DeleteCandidato($candidato=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        if(!($candidato instanceof AA_SierCandidato))
        {
            $candidato=$this->GetCandidato($candidato);
        }

        if(!($candidato instanceof AA_SierCandidato))
        {            
            AA_Log::Log(__METHOD__." - Candidato non valido.", 100,false,true);
            return false;
        }

        //elimina il cv e il casellario
        $storage=AA_Storage::GetInstance($user);
        if($storage->isValid())
        {
            if($candidato->GetProp('cv') !="" && strpos($candidato->GetProp('cv'),"http") ===false)
            {
                if(!$storage->DelFile($candidato->GetProp('cv')))
                {
                    AA_Log::Log(__METHOD__." - Eliminazione del file: ".$candidato->GetProp('cv')." non riuscita (file non trovato).",100);
                }
            }

            if($candidato->GetProp('cg') !="" && strpos($candidato->GetProp('cg'),"http") ===false)
            {
                if(!$storage->DelFile($candidato->GetProp('cg')))
                {
                    AA_Log::Log(__METHOD__." - Eliminazione del file: ".$candidato->GetProp('cv')." non riuscita (file non trovato).",100);
                }
            }
        }
        else
        {
            AA_Log::Log(__METHOD__." - Storage non inizializzato.",100);
        }
        
        $query="DELETE FROM ".static::AA_CANDIDATI_DB_TABLE;
        $query.=" WHERE id='".addslashes($candidato->GetProp("id"))."'";
        $query.="LIMIT 1";
        
        $db= new AA_Database();
        
        //AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Rimozione candidato: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {
            return false;
        }
        
        return true;
    }

    //Elimina un comune esistente
    public function DeleteComune($comune=null, $user=null)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        if(!($comune instanceof AA_SierComune))
        {
            $comune=$this->Getcomune($comune);
        }

        if(!($comune instanceof AA_SierComune))
        {            
            AA_Log::Log(__METHOD__." - Comune non valido.", 100,false,true);
            return false;
        }

        //elimina i rendiconti
        $rendiconti=$comune->GetRendiconti(true);
        if(isset($rendiconti['ras']) && isset($rendiconti['ras']['allegati']) && sizeof($rendiconti['ras']['allegati'])>0)
        {
            $storage=AA_Storage::GetInstance($user);
            if($storage->IsValid())
            {
                foreach($rendiconti['ras']['allegati'] as $curAllegato)
                {
                    if($curAllegato['file'] !='')
                    {
                        $storage->DelFile($curAllegato['file']);
                    }
                }
            }
            else
            {
                AA_Log::Log(__METHOD__." - storage non configurato.",100);
            }
        }
        
        $query="DELETE FROM ".static::AA_COMUNI_DB_TABLE;
        $query.=" WHERE id='".addslashes($comune->GetProp("id"))."' and id_sier='".$this->nId_Data."'";
        $query.=" LIMIT 1";
        
        $db= new AA_Database();
        
        AA_Log::Log(__METHOD__." - query: ".$query, 100);
        
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - Errore nella query: ".$query, 100,false,true);
            return false;            
        }
        
        $this->IsChanged();

        //Aggiorna l'elemento e lo versiona se necessario
        if(!$this->Update($user,true, "Rimozione comune: ".$comune->GetProp("denominazione")))
        {
            return false;
        }
        
        return true;
    }

    //elimina tutti i comuni
    public function DeleteComuni($circoscrizione=null,$user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $comuni=$this->GetComuni($circoscrizione);

        foreach($comuni as $idComune=>$curComune)
        {
            if(!$this->DeleteComune($curComune,$user))
            {
                return false;
            }
        }

        return true;
    }

    //reimposta le comunicazioni dei comuni
    public function ResetComunicazioniComuni($circoscrizione=null,$user=null,$resetCorpoElettorale=false)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $db=new AA_Database();
        if($resetCorpoElettorale)
        {
            $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET comunicazioni='' WHERE id_sier='".$this->nId_Data."'";
            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - errore durante il reset delle comunicazioni - ".$db->GetLastErrorMessage(), 100);
                return false;
            }    
        }
        else
        {
            $comuni=$this->GetComuni($circoscrizione);
            foreach($comuni as $id=>$curComune)
            {
                $comunicazioni=$curComune->GetComunicazioni(true);
                $newComunicazioni=array("corpoelettorale_45"=>0,"corpoelettorale_15"=>0);
                if(isset($comunicazioni['corpoelettorale_45'])) $newComunicazioni['corpoelettorale_45']=$comunicazioni['corpoelettorale_45'];
                if(isset($comunicazioni['corpoelettorale_15'])) $newComunicazioni['corpoelettorale_15']=$comunicazioni['corpoelettorale_15'];

                $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET comunicazioni='".addslashes(json_encode($newComunicazioni))."' WHERE id_sier='".$this->nId_Data."' and id='".$id."' LIMIT 1";
                if(!$db->Query($query))
                {
                    AA_Log::Log(__METHOD__." - errore durante il reset delle comunicazioni per il comune: ".$curComune->GetProp("denominazione")." - ".$db->GetLastErrorMessage(), 100);
                    return false;
                }    
            }
        }
        
        if(!$this->Update($user,false,"Reset comunicazioni Comuni"))
        {
            return false;
        }
        return true;
    }

    //reimposta i risultati dei comuni
    public function ResetRisultatiComuni($circoscrizione=null,$user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $db=new AA_Database();
        $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET risultati='' WHERE id_sier='".$this->nId_Data."'";
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - errore durante il reset dei risultati - ".$db->GetLastErrorMessage(), 100);
            return false;
        }

        if(!$this->Update($user,false,"Reset risultati Comuni"))
        {
            return false;
        }
        return true;
    }

    //reimposta i risultati dei comuni
    public function ResetFeedRisultatiComuni($circoscrizione=null,$user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $db=new AA_Database();
        $comuni=$this->GetComuni($circoscrizione);
        foreach($comuni as $idComune=>$curComune)
        {
            $feedRisultati=$this->UpdateComuneFeedRisultati($idComune,$user,true,true,false);
            if(!is_array($feedRisultati))
            {
                AA_Log::Log(__METHOD__."Errore durante il reset del feed risultati del comune di ".$curComune->GetProp("denominazione"),100);
                return false;
            }

            $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET feed_risultati='".addslashes(json_encode($feedRisultati))."' WHERE id_sier='".$this->nId_Data."' and id='".$idComune."' LIMIT 1";
            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - errore durante il reset del feed dei risultati per il comune: ".$curComune->GetProp("denominazione")." - ".$db->GetLastErrorMessage(), 100);
                return false;
            }   
        }

        if(!$this->Update($user,false,"Reset feed risultati Comuni"))
        {
            return false;
        }
        return true;
    }

    //aggiorna i feed risultati dei comuni
    public function UpdateFeedRisultatiComuni($circoscrizione=null,$user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $db=new AA_Database();
        $comuni=$this->GetComuni($circoscrizione);
        foreach($comuni as $idComune=>$curComune)
        {
            $feedRisultati=$this->UpdateComuneFeedRisultati($idComune,$user,false,false,false);
            if(!is_array($feedRisultati))
            {
                AA_Log::Log(__METHOD__."Errore durante l'aggiornamento del feed risultati del comune di ".$curComune->GetProp("denominazione"),100);
                return false;
            }

            $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET feed_risultati='".addslashes(json_encode($feedRisultati))."' WHERE id_sier='".$this->nId_Data."' and id='".$idComune."' LIMIT 1";
            if(!$db->Query($query))
            {
                AA_Log::Log(__METHOD__." - errore durante l'aggiornamento del feed dei risultati per il comune: ".$curComune->GetProp("denominazione")." - ".$db->GetLastErrorMessage(), 100);
                return false;
            }   
        }

        if(!$this->Update($user,false,"Aggiornamento feed risultati Comuni"))
        {
            return false;
        }
        return true;
    }

    //aggiorna i feed risultati dei comuni
    public function UpdateFeedRisultatiGenerali($user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $cp=$this->GetControlPannel();
        if(isset($cp['url_feed_risultati']) && $cp['url_feed_risultati']!="")
        {
            $url=parse_url($cp['url_feed_risultati']);
            if(is_dir(AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path']) && is_writable(AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path']))
            {
                //AA_Log::Log(__METHOD__." - Salvo feed in: ".AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'].'/feed_mini.json',100);

                //feed mini
                $feed=json_encode($this->BuildRisultatiAffluenzaFeed(null,true));
                if(file_put_contents(AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'].'feed_mini.json',$feed) === false)
                {
                    AA_Log::Log(__METHOD__." - Errore nel salvataggio del file: ".AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'].'feed_mini.json',100);
                    return false;
                }
                
                $feed=json_encode($this->BuildRisultatiAffluenzaFeed(null));
                if(file_put_contents(AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'].'feed.json',$feed) === false)
                {
                    AA_Log::Log(__METHOD__." - Errore nel salvataggio del file: ".AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'].'feed.json',100);
                    return false;
                }
            }
            else
            {
                AA_Log::Log(__METHOD__." - Directory non esistente o in sola lettura: ".AA_Const::AA_APP_FILESYSTEM_FOLDER.$url['path'],100);
                return false;
            }
            return true;
        }
    }

    //reimposta affluenza dei comuni
    public function ResetAffluenzaComuni($circoscrizione=null,$user=null)
    {
        if(!$this->isValid())
        {
                AA_Log::Log(__METHOD__." - elemento non valido.", 100,false,true);
                return false;            
        }
        
        //Verifica utente
        if($user==null || !$user->isValid() || !$user->isCurrentUser()) 
        {
            $user=AA_User::GetCurrentUser();
        
            if($user==null || !$user->isValid() || !$user->isCurrentUser())
            {
                AA_Log::Log(__METHOD__." - utente non valido.", 100,false,true);
                return false;
            }
        }

        //Verifica Flags
        if(($this->GetUserCaps($user) & AA_Const::AA_PERMS_WRITE)==0)
        {
            AA_Log::Log(__METHOD__." - l'utente corrente non può modificare l'elemento.", 100,false,true);
            return false;
        }

        $db=new AA_Database();
        $query="UPDATE ".static::AA_COMUNI_DB_TABLE." SET affluenza='' WHERE id_sier='".$this->nId_Data."'";
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - errore durante il reset dell'affluenza - ".$db->GetLastErrorMessage(), 100);
            return false;
        }

        if(!$this->Update($user,false,"Reset affluenza Comuni"))
        {
            return false;
        }
        return true;
    }

    //Restituisce gli allegati
    public function GetAllegati($idData=0)
    {
        AA_Log::Log(__METHOD__."()");

        if(!$this->IsValid())
        {
            AA_Log::Log(__METHOD__."() - oggetto non valido.");

            return array();
        }

        if($idData==0 || $idData == "") $idData=$this->nId_Data;

        if($idData != $this->nId_Data && $idData !=$this->nId_Data_Rev && $idData > 0)
        {
            $idData=$this->nId_Data;
            if($this->nId_Data_Rev > 0)
            {
                $idData=$this->nId_Data_Rev;
            }
        }

        //Impostazione dei parametri
        $query="SELECT * from ".AA_Sier::AA_ALLEGATI_DB_TABLE." WHERE";

        $query.=" id_sier='".$idData."'";
        
        $query.= " ORDER by aggiornamento DESC, id DESC";

        $db=new AA_Database();
        if(!$db->Query($query))
        {
            AA_Log::Log(__METHOD__." - errore nella query: ".$query,100);
            return array();
        }

        $result=array();

        $rs=$db->GetResultSet();
        foreach($rs as $curRec)
        {   
            $allegato=new AA_SierAllegati($curRec['id'],$idData,$curRec['estremi'],$curRec['url'],$curRec['file'],$curRec['tipo'],$curRec['aggiornamento'],$curRec['destinatari'],$curRec['ordine']);
            $result[$curRec['id']]=$allegato;
        }

        return $result;
    }
}

#Classe operatore comunale
Class AA_SierOperatoreComunale
{
    protected static $oInstance=null;
    protected function __construct()
    {
       
    }

    static public function GetInstance()
    {
        if(static::$oInstance instanceof AA_SierOperatoreComunale) return static::$oInstance;

        if(isset($_SESSION['oc_object']) && static::$oInstance == null)
        {
            static::$oInstance=unserialize($_SESSION['oc_object']);

            if(static::$oInstance instanceof AA_SierOperatoreComunale) return static::$oInstance;
            else return new AA_SierOperatoreComunale();
        }

        return new AA_SierOperatoreComunale();
    }

    #funzioni di autenticazione
    public function ChallengeLogin($cf="",$objectId=0)
    {
        $object= new AA_Sier($objectId);
        if(!$object->IsValid())
        {
            AA_Log::Log(__METHOD__." - Oggetto SIER non valido.",100);
            return false;
        }

        $comune=$object->GetComune("",$cf);
        if($comune == null)
        {
            AA_Log::Log(__METHOD__." - Operatore non abilitato.",100);
            return false;
        }

        $operatore=null;
        $operatori=$comune->GetOperatori(true);
        if(isset($operatori[trim(strtolower($cf))]))
        {
            $operatore=$operatori[trim(strtolower($cf))];
        }
        if($operatore==null && isset($operatori[trim(strtoupper($cf))]))
        {
            $operatore=$operatori[trim(strtoupper($cf))];
        }

        if(!is_array($operatore))
        {
            AA_Log::Log(__METHOD__." - CF Operatore non valido o non autorizzato.",100);
            return false;
        }

        $this->nOperatoreComunaleComune=$comune->GetProp("id");
        $this->nOperatoreComunaleObjectId=$object->GetId();
        $this->sOperatoreComunaleCf=$operatore['cf'];
        $this->sOperatoreComunaleEmail=$operatore['email'];
        $this->sOperatoreComunaleNome=$operatore['nome'];
        $this->sOperatoreComunaleCognome=$operatore['cognome'];
        $this->sOperatoreComunaleRuolo=$operatore['ruolo'];
        $this->sOperatoreComunaleLastlogin=$operatore['lastlogin'];
        $this->bValid=true;

        //auth token
        $token="";
        for($i=0;$i<4;$i++)
        {
            $token.=random_int(10,99);
        }
        //AA_Log::Log(__METHOD__." - operatore comunale: ".$cf." - token: ".$token,100);

        $_SESSION['oc_auth_token']=$token;

        $_SESSION['oc_object']=serialize($this);

        //invia l'email

        $object="Amministrazione Aperta - autenticazione operatore comunale.";
        $corpo="Ciao ".$this->GetOperatoreComunaleNome().",<br>";
        $corpo.="di seguito il codice per l'accesso all'area operatori comunali della piattaforma 'Amministrazione Aperta', modulo SIER - Sistema Informativo Elettorale Regionale, per il caricamento dei dati elettorali e la rispettiva redincontazione.";
        $corpo.="<div style='text-align: center;border: 1px solid gray; width: 400px; font-size:larger'><span><b>".$token."</b></span></div>";
        $corpo.="Inserisci il codice sull'apposita finestra a video e fai click sul pulsante 'Verifica' per accedere al cruscotto applicativo.";
        $corpo.="<p>Per ogni eventuale richiesta di supporto o segnalazione di malfunzionamenti è disponibile la casella: amministrazioneaperta@regione.sardegna.it</p>";
        $corpo.="Cordiali Saluti.";
        
        $mailparams=AA_User::GetResetPwdEmailParams();

        if(AA_Const::AA_ENABLE_SENDMAIL)
        {
            if(!SendMail(array($operatore['email']),"",$object,$corpo.$mailparams['firma'],null,1))
            {
                AA_Log::Log(__METHoD__." - Errore nell'invio della email a: ".$operatore['email'],100);
                return false;
            }
            return true;
        }
        else
        {
            AA_Log::Log(__METHOD__." - cf: ".$cf." - auth token: ".$token,100);
            return true;
        }
    }
    public function VerifyLogin($token="")
    {
        if(!$this->IsValid())
        {
            AA_Log::Log(__METHOD__." - Operatore non valido.",100);
            return false;
        }

        if($token=="" || strlen($token) != 8)
        {
            AA_Log::Log(__METHOD__." - Token non valido.",100);
            return false;
        }

        if(!isset($_SESSION['oc_auth_token']))
        {
            AA_Log::Log(__METHOD__." - Token non valido (2).",100);
            return false;
        }

        if($_SESSION['oc_auth_token']!=$token)
        {
            AA_Log::Log(__METHOD__." - Il codice indicato non corrisponde a quello inviato via email.",100);
            return false;
        }

        unset($_SESSION['oc_auth_token']);

        $this->bOperatoreComunaleLogged=true;
        $this->sOperatoreComunaleLastlogin=date("Y-m-d");
        $_SESSION['oc_object']=serialize($this);
        return true;
    }
    #----------------------------

    protected $sOperatoreComunaleNome="Nessuno";
    protected $sOperatoreComunaleCognome="";
    protected $sOperatoreComunaleRuolo=0;
    protected $sOperatoreComunaleLastlogin="";
    protected $sOperatoreComunaleCf="";
    protected $sOperatoreComunaleEmail="";
    protected $bOperatoreComunaleLogged=false;
    protected $nOperatoreComunaleComune=0;
    protected $nOperatoreComunaleObjectId=0;
    protected $bValid=false;
    public function IsValid()
    {
        return $this->bValid;
    }
    public function IsLogged()
    {
        return $this->bOperatoreComunaleLogged;
    }
    public function GetOperatoreComunaleNome()
    {
        return $this->sOperatoreComunaleNome;
    }
    protected function SetOperatoreComunaleNome($val="")
    {
        $this->sOperatoreComunaleNome=$val;
    }
    public function GetOperatoreComunaleCognome()
    {
        return $this->sOperatoreComunaleCognome;
    }
    protected function SetOperatoreComunaleCognome($val="")
    {
        $this->sOperatoreComunaleCognome=$val;
    }
    public function GetOperatoreComunaleRuolo()
    {
        return $this->sOperatoreComunaleRuolo;
    }
    protected function SetOperatoreComunaleRuolo($val=0)
    {
        $this->sOperatoreComunaleRuolo=$val;
    }
    public function GetOperatoreComunaleLastlogin()
    {
        return $this->sOperatoreComunaleLastlogin;
    }
    protected function SetOperatoreComunaleLastlogin($val="")
    {
        $this->sOperatoreComunaleLastlogin=$val;
    }
    public function GetOperatoreComunaleCf()
    {
        return $this->sOperatoreComunaleCf;
    }
    protected function SetOperatoreComunaleCf($val="")
    {
        $this->sOperatoreComunaleCf=$val;
    }
    public function GetOperatoreComunaleComune()
    {
        return $this->nOperatoreComunaleComune;
    }
    protected function SetOperatoreComunaleComune($val=0)
    {
        $this->nOperatoreComunaleComune=$val;
    }
    public function GetOperatoreComunaleObjectId()
    {
        return $this->nOperatoreComunaleObjectId;
    }
    protected function SetOperatoreComunaleObject($val=0)
    {
        $this->nOperatoreComunaleObjectId=$val;
    }
}

#Classe per il modulo art23 - provvedimenti dirigenziali e accordi
Class AA_SierModule extends AA_GenericModule
{
    const AA_UI_PREFIX="AA_Sier";

    //Id modulo
    const AA_ID_MODULE="AA_MODULE_SIER";

    //main ui layout box
    const AA_UI_MODULE_MAIN_BOX="AA_Sier_module_layout";

    const AA_MODULE_OBJECTS_CLASS="AA_Sier";

    //Task per la gestione dei dialoghi standard
    const AA_UI_TASK_PUBBLICATE_FILTER_DLG="GetSierPubblicateFilterDlg";
    const AA_UI_TASK_BOZZE_FILTER_DLG="GetSierBozzeFilterDlg";
    const AA_UI_TASK_REASSIGN_DLG="GetSierReassignDlg";
    const AA_UI_TASK_PUBLISH_DLG="GetSierPublishDlg";
    const AA_UI_TASK_TRASH_DLG="GetSierTrashDlg";
    const AA_UI_TASK_RESUME_DLG="GetSierResumeDlg";
    const AA_UI_TASK_DELETE_DLG="GetSierDeleteDlg";
    const AA_UI_TASK_ADDNEW_DLG="GetSierAddNewDlg";
    const AA_UI_TASK_MODIFY_DLG="GetSierModifyDlg";
    //------------------------------------

    //Dialoghi
    const AA_UI_WND_OPERATORI_COMUNALI="OperatoriComunaliWnd";
    const AA_UI_LAYOUT_OPERATORI_COMUNALI="OperatoriComunaliLayout";
    const AA_UI_WND_RENDICONTI_COMUNALI="RendicontiComunaliWnd";
    const AA_UI_LAYOUT_RENDICONTI_COMUNALI="RendicontiComunaliLayout";
    const AA_UI_WND_RISULTATI_COMUNALI="RisultatiComunaliWnd";
    const AA_UI_LAYOUT_RISULTATI_COMUNALI="RisultatiComunaliLayout";
    const AA_UI_WND_AFFLUENZA_COMUNALE="AffluenzaComunaleWnd";
    const AA_UI_LAYOUT_AFFLUENZA_COMUNALE="AffluenzaComunaleLayout";
    const AA_UI_WND_COMUNICAZIONI_COMUNALE="ComunicazioniComunaleWnd";
    const AA_UI_LAYOUT_COMUNICAZIONI_COMUNALE="ComunicazioniComunaleLayout";
    const AA_UI_TASK_ADDNEWMULTI_DLG="GetSierComuneAddNewMultiDlg";

    //report
    const AA_UI_WND_REPORT_RISULTATI="ReportRisultatiWnd";
    const AA_UI_LAYOUT_REPORT_RISULTATI="ReportRisultatiLayout";

    //Section id
    const AA_ID_SECTION_OC_LOGIN="OperatoriComunaliLogin";
    const AA_ID_SECTION_OC_DESKTOP= "OperatoriComunaliDesktop";

    //section ui ids
    const AA_UI_DETAIL_GENERALE_BOX = "Generale_Box";
    const AA_UI_DETAIL_LISTE_BOX = "Liste_Box";
    const AA_UI_DETAIL_CANDIDATI_BOX = "Candidati_Box";
    const AA_UI_DETAIL_COMUNI_BOX = "Comuni_Box";
    const AA_UI_DETAIL_REPORT_BOX = "Report_Box";
    const AA_UI_DETAIL_CRUSCOTTO_BOX = "Cruscotto_Box";
    const AA_UI_DETAIL_ALLEGATI_BOX = "Allegati_Box";
    const AA_UI_SECTION_OC_LOGIN = "OperatoriComunaliLoginBox";
    const AA_UI_SECTION_OC_DESKTOP= "OperatoriComunaliDesktopBox";

    //Risultati App id
    const AA_ID_APP= "SierWebApp";

    protected $bOperatoreComunaleInterface=false;
    public function IsOperatoreComunaleUIEnabled()
    {
        return $this->bOperatoreComunaleInterface;
    }
    
    public function EnableOperatoreComunaleInterface($val=true)
    {
        if($val) $this->bOperatoreComunaleInterface=true;
        else $this->bOperatoreComunaleInterface=false;
    }

    public function __construct($user=null,$bDefaultSections=true)
    {
        if(!($user instanceof AA_user))
        {
            $user=AA_User::GetCurrentUser();
        }

        #-------------------------------- Verifica se è un operatore comunale ----------------
        if(isset($_SESSION['oc_ui_enable']) && $_SESSION['oc_ui_enable']==1 && isset($_SESSION['oc_sier_object']) && $_SESSION['oc_sier_object'] > 0 && $user->IsValid() && $user->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $this->bOperatoreComunaleInterface=true;
            $bDefaultSections=false;
        }
        #-------------------------------------------------------------------------------------

        parent::__construct($user,$bDefaultSections);

        #-------------------------------- Registrazione dei task -----------------------------
        $taskManager=$this->GetTaskManager();
        
        if(!$this->IsOperatoreComunaleUIEnabled())
        {
            //Dialoghi di filtraggio
            $taskManager->RegisterTask("GetSierPubblicateFilterDlg");
            $taskManager->RegisterTask("GetSierBozzeFilterDlg");

            //caricamento multiplo
            $taskManager->RegisterTask("GetSierComuneAddNewMultiDlg");
            $taskManager->RegisterTask("GetSierComuneAddNewMultiPreviewCalc");
            $taskManager->RegisterTask("GetSierComuneAddNewMultiPreviewDlg");
            $taskManager->RegisterTask("SierComuneAddNewMulti");
            $taskManager->RegisterTask("GetSierComuneAddNewMultiResultDlg");
            $taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeCsvImportDlg");
            $taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeCsvImportCalc");
            $taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg");
            $taskManager->RegisterTask("SierComuneRisultatiPreferenzeCsvImport");

            //elezioni
            $taskManager->RegisterTask("GetSierModifyDlg");
            $taskManager->RegisterTask("GetSierAddNewDlg");
            $taskManager->RegisterTask("GetSierTrashDlg");
            $taskManager->RegisterTask("TrashSier");
            $taskManager->RegisterTask("GetSierDeleteDlg");
            $taskManager->RegisterTask("DeleteSier");
            $taskManager->RegisterTask("GetSierResumeDlg");
            $taskManager->RegisterTask("ResumeSier");
            $taskManager->RegisterTask("GetSierReassignDlg");
            $taskManager->RegisterTask("GetSierPublishDlg");
            $taskManager->RegisterTask("ReassignSier");
            $taskManager->RegisterTask("AddNewSier");
            $taskManager->RegisterTask("UpdateSier");
            $taskManager->RegisterTask("PublishSier");

            //control pannel
            $taskManager->RegisterTask("GetSierControlPannelDlg");
            $taskManager->RegisterTask("UpdateSierControlPannel");
            $taskManager->RegisterTask("GetSierOCEmailsCSV");
            $taskManager->RegisterTask("ExportCorpoElettoraleComuniCSV");
            $taskManager->RegisterTask("ExportDatiComuniCSV");
            $taskManager->RegisterTask("GetSierConfirmResetComunicazioniComuniDlg");
            $taskManager->RegisterTask("ResetComunicazioniComuni");
            $taskManager->RegisterTask("ResetAffluenzaComuni");
            $taskManager->RegisterTask("GetSierConfirmResetAffluenzaComuniDlg");
            $taskManager->RegisterTask("ResetRisultatiComuni");
            $taskManager->RegisterTask("GetSierConfirmResetRisultatiComuniDlg");
            $taskManager->RegisterTask("ResetFeedRisultatiComuni");
            $taskManager->RegisterTask("GetSierConfirmResetFeedRisultatiComuniDlg");
            $taskManager->RegisterTask("GetSierConfirmUpdateFeedRisultatiComuniDlg");
            $taskManager->RegisterTask("UpdateFeedRisultatiComuni");
            $taskManager->RegisterTask("UpdateAnalisiRisultatiComuni");
            $taskManager->RegisterTask("GetSierConfirmUpdateFeedRisultatiGeneraliDlg");
            $taskManager->RegisterTask("UpdateFeedRisultatiGenerali");
            $taskManager->RegisterTask("GetSierConfirmTrashWebAppQRCodeDlg");
            $taskManager->RegisterTask("DeleteSierWebAppQrCode");
            $taskManager->RegisterTask("GetSierSerialize");
            $taskManager->RegisterTask("GetSierExportDatiServizioElettoraleDlg");
            
            //Allegati
            $taskManager->RegisterTask("GetSierAddNewAllegatoDlg");
            $taskManager->RegisterTask("AddNewSierAllegato");
            $taskManager->RegisterTask("GetSierModifyAllegatoDlg");
            $taskManager->RegisterTask("GetSierCopyAllegatoDlg");
            $taskManager->RegisterTask("UpdateSierAllegato");
            $taskManager->RegisterTask("GetSierTrashAllegatoDlg");
            $taskManager->RegisterTask("DeleteSierAllegato");

            //giornate
            $taskManager->RegisterTask("GetSierAddNewGiornataDlg");
            $taskManager->RegisterTask("AddNewSierGiornata");
            $taskManager->RegisterTask("GetSierModifyGiornataDlg");
            $taskManager->RegisterTask("UpdateSierGiornata");
            $taskManager->RegisterTask("GetSierTrashGiornataDlg");
            $taskManager->RegisterTask("DeleteSierGiornata");

            //Coalizioni
            $taskManager->RegisterTask("GetSierAddNewCoalizioneDlg");
            $taskManager->RegisterTask("AddNewSierCoalizione");
            $taskManager->RegisterTask("GetSierModifyCoalizioneDlg");
            $taskManager->RegisterTask("UpdateSierCoalizione");
            $taskManager->RegisterTask("GetSierTrashCoalizioneDlg");
            $taskManager->RegisterTask("DeleteSierCoalizione");
            $taskManager->RegisterTask("GetSierModifyPresidenteCVDlg");
            $taskManager->RegisterTask("UpdateSierPresidenteCV");
            $taskManager->RegisterTask("GetSierModifyPresidenteCGDlg");
            $taskManager->RegisterTask("UpdateSierPresidenteCG");
            $taskManager->RegisterTask("GetSierTrashPresidenteCGDlg");
            $taskManager->RegisterTask("DeleteSierPresidenteCG");
            $taskManager->RegisterTask("GetSierTrashPresidenteCVDlg");
            $taskManager->RegisterTask("DeleteSierPresidenteCV");

            //Liste
            $taskManager->RegisterTask("GetSierAddNewListaDlg");
            $taskManager->RegisterTask("AddNewSierLista");
            $taskManager->RegisterTask("GetSierModifyListaDlg");
            $taskManager->RegisterTask("UpdateSierLista");
            $taskManager->RegisterTask("GetSierTrashListaDlg");
            $taskManager->RegisterTask("DeleteSierLista");

            //candidati
            $taskManager->RegisterTask("GetSierAddNewCandidatoDlg");
            $taskManager->RegisterTask("AddNewSierCandidato");
            $taskManager->RegisterTask("GetSierModifyCandidatoDlg");
            $taskManager->RegisterTask("UpdateSierCandidato");
            $taskManager->RegisterTask("GetSierAddNewCandidatoCVDlg");
            $taskManager->RegisterTask("AddNewSierCandidatoCV");
            $taskManager->RegisterTask("GetSierAddNewCandidatoCGDlg");
            $taskManager->RegisterTask("AddNewSierCandidatoCG");
            $taskManager->RegisterTask("GetSierModifyCandidatoCVDlg");
            $taskManager->RegisterTask("UpdateSierCandidatoCV");
            $taskManager->RegisterTask("GetSierModifyCandidatoCGDlg");
            $taskManager->RegisterTask("UpdateSierCandidatoCG");
            $taskManager->RegisterTask("GetSierTrashCandidatoCGDlg");
            $taskManager->RegisterTask("DeleteSierCandidatoCG");
            $taskManager->RegisterTask("GetSierTrashCandidatoCVDlg");
            $taskManager->RegisterTask("DeleteSierCandidatoCV");
            $taskManager->RegisterTask("GetSierTrashCandidatoDlg");
            $taskManager->RegisterTask("DeleteSierCandidato");
            $taskManager->RegisterTask("ExportCandidatiCSV");

            //comune
            $taskManager->RegisterTask("GetSierComuneDatiGeneraliViewDlg");
            $taskManager->RegisterTask("UpdateSierComuneDatiGenerali");
            $taskManager->RegisterTask("GetSierComuneCorpoElettoraleViewDlg");
            $taskManager->RegisterTask("UpdateSierComuneCorpoElettorale");

            $taskManager->RegisterTask("GetSierComuneComunicazioniViewDlg");
            $taskManager->RegisterTask("UpdateSierComuneComunicazioni");

            $taskManager->RegisterTask("GetSierComuneAffluenzaViewDlg");
            $taskManager->RegisterTask("GetSierComuneAffluenzaAddNewDlg");
            $taskManager->RegisterTask("AddNewSierComuneAffluenza");
            $taskManager->RegisterTask("GetSierComuneAffluenzaModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneAffluenza");
            $taskManager->RegisterTask("GetSierComuneAffluenzaTrashDlg");
            $taskManager->RegisterTask("TrashSierComuneAffluenza");

            $taskManager->RegisterTask("GetSierComuneRisultatiViewDlg");
            $taskManager->RegisterTask("GetSierComuneRisultatiGeneraliModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRisultatiGenerali");
            $taskManager->RegisterTask("GetSierComuneRisultatiCoalizioniModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRisultatiCoalizioni");
            $taskManager->RegisterTask("GetSierComuneRisultatiListeModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRisultatiListe");
            $taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRisultatiPreferenze");
            $taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeModifyMultiDlg");
            $taskManager->RegisterTask("UpdateSierComuneRisultatiPreferenzeMulti");
            $taskManager->RegisterTask("GetSierAnalisiRisultatiDlg");
            $taskManager->RegisterTask("GetSierAnalisiComunicazioniDlg");
            $taskManager->RegisterTask("GetSierAnalisiCorpoElettoraleDlg");
            $taskManager->RegisterTask("GetSierComuneLogsDlg");
            $taskManager->RegisterTask("GetSierComuneRendicontiViewDlg");
            $taskManager->RegisterTask("GetSierTrashComuneDlg");
            $taskManager->RegisterTask("DeleteSierComune");

            //$taskManager->RegisterTask("GetSierComuneRisultatiPreferenzeTrashDlg");
            //$taskManager->RegisterTask("TrashSierComuneRisultatiPreferenze");

            $taskManager->RegisterTask("GetSierComuneOperatoriViewDlg");
            $taskManager->RegisterTask("GetSierComuneOperatoriAddNewDlg");
            $taskManager->RegisterTask("AddNewSierComuneOperatore");
            $taskManager->RegisterTask("GetSierComuneOperatoriModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneOperatore");
            $taskManager->RegisterTask("GetSierComuneOperatoriTrashDlg");
            $taskManager->RegisterTask("TrashSierComuneOperatore");
            $taskManager->RegisterTask("GetSierComuneFilterDlg");

            //Rendiconti
            $taskManager->RegisterTask("GetSierComuneRendicontiSeggiModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiSeggi");
            $taskManager->RegisterTask("GetSierComuneRendicontiBuoniModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiBuoni");
            $taskManager->RegisterTask("GetSierComuneRendicontiPersonaleIndeterminatoModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiPersonaleIndeterminato");
            $taskManager->RegisterTask("GetSierComuneRendicontiServiziModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiServizi");
            $taskManager->RegisterTask("GetSierComuneRendicontiConfirmTrashServiziDlg");
            $taskManager->RegisterTask("DeleteSierComuneRendicontiServizi");
            $taskManager->RegisterTask("GetSierComuneRendicontiPersonaleDeterminatoModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiPersonaleDeterminato");
            $taskManager->RegisterTask("GetSierComuneRendicontiConfirmTrashPersonaleDeterminatoDlg");
            $taskManager->RegisterTask("DeleteSierComuneRendicontiPersonaleDeterminato");
            $taskManager->RegisterTask("GetSierComuneRendicontiRasModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiRas");
            $taskManager->RegisterTask("GetSierComuneRendicontiRasLiquidazioniModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiRasLiquidazioni");
            $taskManager->RegisterTask("GetSierComuneRendicontiExportRasPdf");
            $taskManager->RegisterTask("GetSierComuneRendicontiImportoAmmessoModifyDlg");
            $taskManager->RegisterTask("UpdateSierComuneRendicontiImportoAmmesso");
            $taskManager->RegisterTask("DoSorteggioComuniRendicontazione");
            $taskManager->RegisterTask("GetSierConfirmDeleteSorteggioDocDlg");
            $taskManager->RegisterTask("DeleteSorteggioComuniRendicontazione");
            
            //feed
            $taskManager->RegisterTask("GetSierFeedRisultatiAffluenza");
            $taskManager->RegisterTask("GetSierFeedCandidati");
            $taskManager->RegisterTask("GetSierListaCandidati");

            //sier web app
            $taskManager->RegisterTask("GetSierWebApp");
            
            //template dettaglio
            $this->SetSectionItemTemplate(static::AA_ID_SECTION_DETAIL,array(
                array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_GENERALE_BOX, "value"=>"Generale","tooltip"=>"Dati generali","template"=>"TemplateSierDettaglio_Generale_Tab"),
                //array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_CRUSCOTTO_TAB, "value"=>"Cruscotto","tooltip"=>"Cruscotto di gestione","template"=>"TemplateSierDettaglio_Cruscotto_Tab"),
                array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_LISTE_BOX, "value"=>"<span style='font-size: smaller'>Coalizioni e Liste</span>","tooltip"=>"Gestione coalizioni e liste","template"=>"TemplateSierDettaglio_Coalizioni_Tab","enable_preview"=>true),
                array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_CANDIDATI_BOX, "value"=>"Candidati","tooltip"=>"Gestione dei Candidati","template"=>"TemplateSierDettaglio_Candidati_Tab","enable_preview"=>true),
                array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_COMUNI_BOX, "value"=>"Comuni","tooltip"=>"Gestione dei Comuni","template"=>"TemplateSierDettaglio_Comuni_Tab","enable_preview"=>true),
                array("id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_ALLEGATI_BOX, "value"=>"<span style='font-size: smaller'>Documenti</span>","tooltip"=>"Gestione degli allegati e links","template"=>"TemplateSierDettaglio_Allegati_Tab","enable_preview"=>true),
            ));

            //Rendiconti layout object template
            $this->AddObjectTemplate(static::AA_UI_PREFIX."_".static::AA_UI_WND_RENDICONTI_COMUNALI."_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI,"Template_GetSierComuneRendicontiViewLayout");
        }
        else
        {
            $oc=AA_SierOperatoreComunale::GetInstance();
            //AA_Log::Log(__METHOD__." - operatore: ".print_r($oc,true),100);
            $template="TemplateSection_OC_Desktop";

            if(!$oc->IsLogged())
            {
                //login tasks
                $taskManager->RegisterTask("OCLogin");
                $taskManager->RegisterTask("GetOCLoginVerifyDlg");
                $taskManager->RegisterTask("OCVerifyLogin");

                $template="TemplateSection_OC_Login";
            }
            else
            {
                $taskManager->RegisterTask("GetSierOCModifyDatiGeneraliDlg");
                $taskManager->RegisterTask("Update_OC_ComuneDatiGenerali");
                $taskManager->RegisterTask("GetSierOCModifyCorpoElettoraleDlg");
                $taskManager->RegisterTask("Update_OC_ComuneCorpoElettorale");
                
                $taskManager->RegisterTask("GetSierOCModifyComunicazioniDlg");
                $taskManager->RegisterTask("Update_OC_ComuneComunicazioni");
                $taskManager->RegisterTask("GetSierOCAffluenzaAddNewDlg");
                $taskManager->RegisterTask("Update_OC_ComuneAffluenza");
                $taskManager->RegisterTask("GetSierOCModifyRisultatiGeneraliDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRisultatiGenerali");
                $taskManager->RegisterTask("GetSierOCModifyRisultatiCoalizioniDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRisultatiCoalizioni");
                $taskManager->RegisterTask("GetSierOCModifyRisultatiListeDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRisultatiListe");
                $taskManager->RegisterTask("GetSierOCModifyRisultatiPreferenzeDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRisultatiPreferenze");
                $taskManager->RegisterTask("GetSierOCModifyRisultatiPreferenzeMultiDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRisultatiPreferenzeMulti");
                $taskManager->RegisterTask("GetSierOCRendicontiSeggiModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiSeggi");
                $taskManager->RegisterTask("GetSierOCRendicontiPersonaleIndeterminatoModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiPersonaleIndeterminato");
                $taskManager->RegisterTask("GetSierOCRendicontiPersonaleDeterminatoModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiPersonaleDeterminato");
                $taskManager->RegisterTask("GetSierOCRendicontiConfirmTrashPersonaleDeterminatoDlg");
                $taskManager->RegisterTask("Delete_OC_ComuneRendicontiPersonaleDeterminato");
                $taskManager->RegisterTask("GetSierOCRendicontiBuoniModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiBuoni");
                $taskManager->RegisterTask("GetSierOCRendicontiServiziModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiServizi");
                $taskManager->RegisterTask("GetSierOCRendicontiConfirmTrashServiziDlg");
                $taskManager->RegisterTask("Delete_OC_ComuneRendicontiServizi");
                $taskManager->RegisterTask("GetSierOCRendicontiAllegatiModifyDlg");
                $taskManager->RegisterTask("Update_OC_ComuneRendicontiAllegati");
                $taskManager->RegisterTask("GetSierOCRendicontiConfirmTrashAllegatiDlg");
                $taskManager->RegisterTask("Delete_OC_ComuneRendicontiAllegati");
                $taskManager->RegisterTask("GetSierOCRendicontiExportPdf");
                
                $taskManager->RegisterTask("GetSierAnalisiRisultatiDlg");

                //conferma corpo elettorale
                $taskManager->RegisterTask("GetSierOCConfirmCertCorpoElettoraleDlg");
                $taskManager->RegisterTask("Update_OC_CertificazioneCorpoElettorale");

                //importazione csv
                $taskManager->RegisterTask("GetSierOCRisultatiPreferenzeCsvImportDlg");
                $taskManager->RegisterTask("GetSierOCRisultatiPreferenzeCsvImportCalc");
                $taskManager->RegisterTask("GetSierOCRisultatiPreferenzeCsvImportPreviewDlg");
                $taskManager->RegisterTask("Update_OC_RisultatiPreferenzeCsvImport");
                
            }

            //desktop
            $section=new AA_GenericModuleSection(static::AA_ID_SECTION_OC_DESKTOP,"Cruscotto operatore comunale",true,static::AA_UI_PREFIX."_".static::AA_UI_SECTION_OC_DESKTOP,$this->GetId(),true,true,false,true);
            $section->SetNavbarTemplate(array($this->TemplateGenericNavbar_Void(1,true)->toArray()));

            $this->AddSection($section);
            $this->SetSectionItemTemplate(static::AA_ID_SECTION_OC_DESKTOP,$template);
        }
    }
    
    //istanza
    protected static $oInstance=null;
    
    //Restituisce l'istanza corrente
    public static function GetInstance($user=null)
    {
        if(self::$oInstance==null)
        {
            self::$oInstance=new AA_SierModule($user);
        }
        
        return self::$oInstance;
    }
    
    //Layout del modulo
    function TemplateLayout()
    {
        return $this->TemplateGenericLayout();
    }
    
    //Template placeholder
    public function TemplateSection_Placeholder()
    {
        return $this->TemplateGenericSection_Placeholder();
    }
    
    //Template pubblicate content
    public function TemplateSection_Pubblicate($params=array())
    {
        $bCanModify=false;
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $bCanModify=true;
        }

        $content=$this->TemplateGenericSection_Pubblicate($params,$bCanModify);
        $content->EnableExportFunctions(false);
        return $content->toObject();
    }

    //Restituisce la lista delle schede pubblicate (dati)
    public function GetDataSectionPubblicate_List($params=array())
    {
        return $this->GetDataGenericSectionPubblicate_List($params,"GetDataSectionPubblicate_CustomFilter","GetDataSectionPubblicate_CustomDataTemplate");
    }

    //Personalizza il filtro delle schede pubblicate per il modulo corrente
    protected function GetDataSectionPubblicate_CustomFilter($params = array())
    {
        //anno rif
        if($params['Anno'] > 0)
        {
            $params['where'][]=" AND ".AA_Sier::AA_DBTABLE_DATA.".anno = '".addslashes($params['AnnoRiferimento'])."'";
        }
       return $params;
    }

     //Personalizza il template dei dati delle schede pubblicate per il modulo corrente
     protected function GetDataSectionPubblicate_CustomDataTemplate($data = array(),$object=null)
     {
        if($object instanceof AA_Sier)
        {

            $data['pretitolo']=$object->GetProp("Anno");
            $tag="";
            $flags=$object->GetProp('Flags');
            if($flags==0)
            {
                $tag="<span class='AA_DataView_Tag AA_Label AA_Label_Green'>accesso disabilitato</span>";
            }
            else
            {
                foreach(AA_Sier_Const::GetFlagsForTags() as $key=>$value)
                {
                    if(($flags & $key) > 0) $tag.="<span class='AA_DataView_Tag AA_Label AA_Label_Green'>".$value."</span>";
                }
            }
        }

        $data['tags']=$tag;
        return $data;
     }

    //Template dlg addnew comune da csv
    public function Template_GetSierComuneAddNewMultiDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneAddNewMultiDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV", $this->id);

        $form_data=array("id"=>$object->GetId());
        $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(600);
        $wnd->SetBottomPadding(36);
        $wnd->EnableValidation();

        $descr="<ul>Il file csv deve avere le seguenti caratteristiche:";
        $descr.="<li>la prima riga deve contenere i nomi dei campi;</li>";
        $descr.="<li>la codifica dei caratteri deve essere in formato UTF-8;</li>";
        $descr.="<li>usare il carattere \"|\" (pipe) come separatore dei campi;</li>";
        $descr.="</ul>";
        $descr.="<p>Tramite il seguente <a href='docs/sier_comuni_multi.ods' target='_blank'>link</a> è possibile scaricare un foglio elettronico da utilizzarsi come base per la predisposizione del file csv.</p>";
        $descr.="<p>Per la generazione del file csv si consiglia l'utilizzo del software opensource <a href='https://www.libreoffice.org' target='_blank'>Libreoffice</a> in quanto consente di impostare il carattere di delimitazione dei campi e la codifica dei caratteri in fase di esportazione senza dover apportare modifiche al sistema.</p>";
        $descr.="<hr/>";

        $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='margin-bottom: 1em;'>Questa funzionalità permette di caricare più comuni tramite importazione da file csv.".$descr."</div>")));
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("height"=>30)));

        //csv
        $wnd->AddFileUploadField("SierComuneMultiCSV","Scegli il file csv...", array("required"=>true,"validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti in formato csv (dimensione max: 2Mb).","accept"=>"application/csv"));

        $wnd->EnableCloseWndOnSuccessfulSave();

        $wnd->enableRefreshOnSuccessfulSave(false);

        $wnd->SetApplyButtonName("Procedi");

        $wnd->SetSaveTask("GetSierComuneAddNewMultiPreviewCalc");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg import da csv risultati candidati
    public function Template_GetSierComuneRisultatiPreferenzeCsvImportDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiPreferenzeCsvImportDlg";
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV", $this->id);

        $form_data=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp("id"),"csv_reset"=>1,"refresh_obj_id"=>$_REQUEST['refresh_obj_id'],"refresh"=>$_REQUEST['refresh']);
        $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(680);
        $wnd->SetBottomPadding(36);
        $wnd->EnableValidation();

        $descr="<ul>Il file csv deve avere le seguenti caratteristiche:";
        $descr.="<li>la codifica dei caratteri deve essere in formato UTF-8;</li>";
        $descr.="<li>usare il carattere \",\" (virgola) come separatore dei campi;</li>";
        $descr.="<li>la prima riga deve contenere i nomi dei campi: id_candidato,voti</li>";
        $descr.="<li>i voti devono essere formattati come un numero intero senza indicatore delle migliaia (es. 1500)</li>";
        $descr.="<li>per ottenere il file di mappatura tra gli identificativi e i candidati scrivere a: amministrazioneaperta@regione.sardegna.it</li>";
        $descr.="</ul>";
        $descr.="<hr/>";

        $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='margin-bottom: 1em;'>Questa funzionalità permette di caricare i risultati dei voti ai candidati consiglieri tramite importazione da file csv.".$descr."<div style='width:100%;text-align:center'><span class='blinking' style='color: red'>!ATTENZIONE<span></div><b>L'importazione può andare a buon fine esclusivamente se non sono presenti anomalie sui risultati relativi ai voti presidente e voti di lista.</b></div>")));
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("height"=>30)));

        //options
        $section=new AA_FieldSet($id."_CSV_Import_Options","Opzioni di importazione");
        $section->AddCheckBoxField("csv_reset","Reimposta a 0 (zero) il numero dei voti dei candidati non presenti sul file csv",array("labelWidth"=>550,"bottomPadding"=>10));
        $section->AddCheckBoxField("csv_incrementale","Considera il numero dei voti incrementale rispetto a quanto già presente",array("labelWidth"=>550,"bottomPadding"=>10));
        $wnd->AddGenericObject($section);
        
        //csv
        $wnd->AddFileUploadField("SierComunePreferenzeCSV","Scegli il file csv...", array("required"=>true,"validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti in formato csv (dimensione max: 5Mb).","accept"=>"application/csv"));

        $wnd->EnableCloseWndOnSuccessfulSave();

        $wnd->enableRefreshOnSuccessfulSave(false);

        $wnd->SetApplyButtonName("Procedi");

        $wnd->SetSaveTask("GetSierComuneRisultatiPreferenzeCsvImportCalc");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg import da csv risultati candidati
    public function Template_GetSierOCRisultatiPreferenzeCsvImportDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCRisultatiPreferenzeCsvImportDlg";
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV", $this->id);

        $form_data=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp("id"),"csv_reset"=>1,"refresh_obj_id"=>$_REQUEST['refresh_obj_id'],"refresh"=>$_REQUEST['refresh']);
        $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV dei voti candidati Consiglio regionale", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(680);
        $wnd->SetBottomPadding(36);
        $wnd->EnableValidation();

        $descr="<ul>Il file csv deve avere le seguenti caratteristiche:";
        $descr.="<li>la codifica dei caratteri deve essere in formato UTF-8;</li>";
        $descr.="<li>usare il carattere \",\" (virgola) come separatore dei campi;</li>";
        $descr.="<li>la prima riga deve contenere i nomi dei campi: id_candidato,voti</li>";
        $descr.="<li>i voti devono essere formattati come un numero intero senza indicatore delle migliaia (es. 1500)</li>";
        $descr.="<li>per ottenere il file di mappatura tra gli identificativi e i candidati scrivere a: amministrazioneaperta@regione.sardegna.it</li>";
        $descr.="</ul>";
        $descr.="<hr/>";

        $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='margin-bottom: 1em;'>Questa funzionalità permette di caricare i risultati dei voti ai candidati consiglieri tramite importazione da file csv.".$descr."<div style='width:100%;text-align:center'><span class='blinking' style='color: red'>!ATTENZIONE<span></div><b>L'importazione può andare a buon fine esclusivamente se non sono presenti anomalie sui risultati relativi ai voti presidente e voti di lista.</b></div>")));
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("height"=>30)));

        //options
        $section=new AA_FieldSet($id."_CSV_Import_Options","Opzioni di importazione");
        $section->AddCheckBoxField("csv_reset","Reimposta a 0 (zero) il numero dei voti dei candidati non presenti sul file csv",array("labelWidth"=>550,"bottomPadding"=>10));
        $section->AddCheckBoxField("csv_incrementale","Considera il numero dei voti incrementale rispetto a quanto già presente",array("labelWidth"=>550,"bottomPadding"=>10));
        $wnd->AddGenericObject($section);
        
        //csv
        $wnd->AddFileUploadField("SierComunePreferenzeCSV","Scegli il file csv...", array("required"=>true,"validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti in formato csv (dimensione max: 5Mb).","accept"=>"application/csv"));

        $wnd->EnableCloseWndOnSuccessfulSave();

        $wnd->enableRefreshOnSuccessfulSave(false);

        $wnd->SetApplyButtonName("Procedi");

        $wnd->SetSaveTask("GetSierOCRisultatiPreferenzeCsvImportCalc");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg import preferenze csv
    public function Template_GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg";
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_sierComune)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id);

        $data=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();
        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $data=array(array("candidato"=>"pinco","voti"=>0));
        }
        
        $tot_voti=0;
        foreach($data as $curCandidato)
        {
            $tot_voti+=intVal($curCandidato['voti']);
        }

        if(sizeof($data)>0)
        {
            $form_data=array();
            
            $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id,$form_data,$form_data);
            
            //$wnd->SetLabelAlign("right");
            //$wnd->SetLabelWidth(120);
            
            $wnd->SetWidth(720);
            $wnd->SetHeight(540);
            //$wnd->SetBottomPadding(36);
            //$wnd->EnableValidation();
            //denominazione,indirizzo,contatti,risultati,affluenza,operatori,sezioni,elettori_m,elettori_f,id_circoscrizione,rendiconti,pec,lastupdate
            $columns=array(
                array("id"=>"candidato","header"=>array("<div style='text-align: left'>Candidato</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
                array("id"=>"voti","header"=>array("<div style='text-align: right'>voti</div>",array("content"=>"textFilter")),"width"=>90, "css"=>array("text-align"=>"right"),"sort"=>"int")
            );

            $desc="<p>Sono stati riconosciuti <b>".sizeof((array)$data)." Candidati</b>, per un totale di #tot_voti# voti.</p>";
            $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("style"=>"clean","template"=>$desc,"autoheight"=>true,"data"=>array("tot_voti"=>$tot_voti))));
    
            $scrollview=new AA_JSON_Template_Generic($id."_ScrollCsvImportPreviewTable",array(
                "type"=>"clean",
                "view"=>"scrollview",
                "scroll"=>"x"
            ));
            $table=new AA_JSON_Template_Generic($id."_CsvImportPreviewTable", array(
                "view"=>"datatable",
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>array_values($data)
            ));
            $scrollview->addRowToBody($table);
    
            $wnd->AddGenericObject($scrollview);
    
            $wnd->EnableCloseWndOnSuccessfulSave();
            
            $wnd->SetApplyButtonName("Importa");

            $wnd->SetSaveTask("SierComuneRisultatiPreferenzeCsvImport");
            $params=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp('id'));
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTaskParams($params);
        }
        else
        {
            $wnd=new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id);
            
            $wnd->SetWidth(480);
            $wnd->SetHeight(340);

            $desc="<div style='display:flex; width: 100%; height: 100%; justify-content: center; align-items: center'>Non sono stati trovati dati importare.</div>";
            $wnd->AddView(new AA_JSON_Template_Generic("",array()));
            $wnd->AddView(new AA_JSON_Template_Template("",array("style"=>"clean","template"=>$desc,"autoheight"=>true,"data"=>array("tot_voti"=>$tot_voti))));
            $wnd->AddView(new AA_JSON_Template_Generic("",array()));
        }

        return $wnd;
    }

    //Template dlg import preferenze csv
    public function Template_GetSierOCRisultatiPreferenzeCsvImportPreviewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg";
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_sierComune)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id);

        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        //$wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(540);
        //$wnd->SetBottomPadding(36);
        //$wnd->EnableValidation();
        //denominazione,indirizzo,contatti,risultati,affluenza,operatori,sezioni,elettori_m,elettori_f,id_circoscrizione,rendiconti,pec,lastupdate
        $columns=array(
            array("id"=>"candidato","header"=>array("<div style='text-align: left'>Candidato</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"voti","header"=>array("<div style='text-align: right'>voti</div>",array("content"=>"textFilter")),"width"=>90, "css"=>array("text-align"=>"right"),"sort"=>"int")
        );

        $data=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();
        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $data=array(array("candidato"=>"pinco","voti"=>0));
        }

        //AA_Log::Log(__METHOD__." - dati csv: ".print_r($data,TRUE),100);

        $desc="<p>Sono stati riconosciuti <b>".sizeof((array)$data)." Candidati</b></p>";
        $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("style"=>"clean","template"=>$desc,"autoheight"=>true)));

        $scrollview=new AA_JSON_Template_Generic($id."_ScrollCsvImportPreviewTable",array(
            "type"=>"clean",
            "view"=>"scrollview",
            "scroll"=>"x"
        ));
        $table=new AA_JSON_Template_Generic($id."_CsvImportPreviewTable", array(
            "view"=>"datatable",
            "css"=>"AA_Header_DataTable",
            "hover"=>"AA_DataTable_Row_Hover",
            "columns"=>$columns,
            "data"=>array_values($data)
        ));
        $scrollview->addRowToBody($table);

        $wnd->AddGenericObject($scrollview);

        $wnd->EnableCloseWndOnSuccessfulSave();

        //$wnd->enableRefreshOnSuccessfulSave();

        $wnd->SetApplyButtonName("Importa");

        $wnd->SetSaveTask("Update_OC_RisultatiPreferenzeCsvImport");
        $params=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp('id'));
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        //if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetSaveTaskParams($params);
        
        return $wnd;
    }

    //Template dlg addnew multi preview comuni
    public function Template_GetSierComuneAddNewMultiPreviewDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneAddNewMultiPreviewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id);

        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Caricamento multiplo da file CSV - fase 2 di 3", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        //$wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(1280);
        $wnd->SetHeight(720);
        //$wnd->SetBottomPadding(36);
        //$wnd->EnableValidation();
        //denominazione,indirizzo,contatti,risultati,affluenza,operatori,sezioni,elettori_m,elettori_f,id_circoscrizione,rendiconti,pec,lastupdate
        $columns=array(
            array("id"=>"denominazione","header"=>array("<div style='text-align: center'>Denominazione</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"indirizzo","header"=>array("<div style='text-align: center'>Indirizzo</div>",array("content"=>"textFilter")),"width"=>250, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"circoscrizione","header"=>array("<div style='text-align: center'>Circoscrizione</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"pec","header"=>array("<div style='text-align: center'>Pec</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"sezioni","header"=>array("<div style='text-align: center'>Sezioni</div>",array("content"=>"textFilter")),"width"=>90, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"elettori_m","header"=>array("<div style='text-align: center'>Elett. M</div>",array("content"=>"textFilter")),"width"=>90, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"elettori_f","header"=>array("<div style='text-align: center'>Elett. F</div>",array("content"=>"textFilter")),"width"=>90, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"contatti","header"=>array("<div style='text-align: center'>Contatti</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"right"),"sort"=>"text")
        );

        $data=AA_SessionVar::Get("SierComuneMultiFromCSV_ParsedData")->GetValue();

        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $data=array();
        }

        //AA_Log::Log(__METHOD__." - dati csv: ".print_r($data,TRUE),100);

        $desc="<p>Sono stati riconosciuti <b>".sizeof((array)$data)." Comuni</b> differenti.</p>";
        $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("style"=>"clean","template"=>$desc,"autoheight"=>true)));

        $scrollview=new AA_JSON_Template_Generic($id."_ScrollCsvImportPreviewTable",array(
            "type"=>"clean",
            "view"=>"scrollview",
            "scroll"=>"x"
        ));
        $table=new AA_JSON_Template_Generic($id."_CsvImportPreviewTable", array(
            "view"=>"datatable",
            "css"=>"AA_Header_DataTable",
            "hover"=>"AA_DataTable_Row_Hover",
            "columns"=>$columns,
            "data"=>array_values($data)
        ));
        $scrollview->addRowToBody($table);

        $wnd->AddGenericObject($scrollview);

        $wnd->EnableCloseWndOnSuccessfulSave();

        //$wnd->enableRefreshOnSuccessfulSave();

        $wnd->SetApplyButtonName("Importa");

        $wnd->SetSaveTask("SierComuneAddNewMulti");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg addnew comune multi result
    public function Template_GetSierComuneAddNewMultiResultDlg($object=null,$count=array(0,0))
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneAddNewMultiResultDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 3 di 3", $this->id);

        $wnd=new AA_GenericWindowTemplate($id, "Caricamento multiplo da file CSV - fase 3 di 3");
        
        //$wnd->SetLabelAlign("right");
        //$wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(350);
        //$wnd->SetBottomPadding(36);
        //$wnd->EnableValidation();

        $desc="<p>Sono stati inseriti <b>".$count[0]." Comuni</b>.</p>";
        if($count[1] > 0) $desc.="<p>Sono stati scartati <b>".$count[1]." Comuni</b>.</p>";
        $wnd->AddView(new AA_JSON_Template_Template("",array("style"=>"clean","template"=>$desc,"autoheight"=>true)));
        
        return $wnd;
    }

    //Template sezione bozze (da specializzare)
    public function TemplateSection_Bozze($params=array())
    {
        $is_enabled= false;
       
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $is_enabled=true;
        }
        
        if(!$is_enabled)
        {
            $content = new AA_JSON_Template_Template(static::AA_UI_PREFIX."_".static::AA_UI_BOZZE_BOX,
                array(
                "type"=>"clean",
                "update_time"=>Date("Y-m-d H:i:s"),
                "name"=>"Schede in bozza",
                "template"=>"L'utente corrente non è abilitato alla visualizzazione della sezione."
            ));
        
            return $content;
        }

        $content=$this->TemplateGenericSection_Bozze($params,false);
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $content->EnableAddNew(false);
            $content->EnablePublish(false);
            $content->EnableReassign(false);
            $content->EnableTrash(false);
        }

        return $content->toObject();
    }
    
    //Restituisce i dati delle bozze
    public function GetDataSectionBozze_List($params=array())
    {
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) && !$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            AA_Log::Log(__METHOD__." - ERRORE: l'utente corrente: ".$this->oUser->GetUserName()." non è abilitato alla visualizzazione delle bozze.",100);
            return array();
        }

        return $this->GetDataGenericSectionBozze_List($params,"GetDataSectionBozze_CustomFilter","GetDataSectionBozze_CustomDataTemplate");
    }

    //Personalizza il filtro delle bozze per il modulo corrente
    protected function GetDataSectionBozze_CustomFilter($params = array())
    {
        //anno rif
        if($params['Anno'] > 0)
        {
            $params['where'][]=" AND ".AA_Sier::AA_DBTABLE_DATA.".anno = '".addslashes($params['AnnoRiferimento'])."'";
        }

        return $params;
    }

    //Personalizza il template dei dati delle bozze per il modulo corrente
    protected function GetDataSectionBozze_CustomDataTemplate($data = array(),$object=null)
    {
        
        if($object instanceof AA_Sier)
        {

            $data['pretitolo']=$object->GetProp("Anno");
            $tag="";
            $flags=$object->GetProp('Flags');
            if($flags==0)
            {
                $tag="<span class='AA_DataView_Tag AA_Label AA_Label_Green'>accesso disabilitato</span>";
            }
            else
            {
                foreach(AA_Sier_Const::GetFlagsForTags() as $key=>$value)
                {
                    if(($flags & $key) > 0) $tag.="<span class='AA_DataView_Tag AA_Label AA_Label_Green'>".$value."</span>";
                }
            }
        }

        $data['tags']=$tag;
        return $data;
    }

    
    
    //Template organismo publish dlg
    public function Template_GetSierPublishDlg($params)
    {
        //lista organismi da ripristinare
        if($params['ids'])
        {
            $ids= json_decode($params['ids']);
            
            foreach($ids as $curId)
            {
                $organismo=new AA_Sier($curId,$this->oUser);
                if($organismo->isValid() && ($organismo->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_PUBLISH)>0)
                {
                    $ids_final[$curId]=$organismo->GetDescr();
                    unset($organismo);
                }
            }

            $id=$this->id."_PublishDlg";

            //Esiste almeno un organismo che può essere pubblicato dall'utente corrente
            if(sizeof($ids_final)>0)
            {
                $forms_data['ids']=json_encode(array_keys($ids_final));
                
                $wnd=new AA_GenericFormDlg($id, "Pubblica", $this->id, $forms_data,$forms_data);
               
                //Disattiva il pulsante di reset
                $wnd->EnableResetButton(false);

                //Imposta il nome del pulsante di conferma
                $wnd->SetApplyButtonName("Procedi");

                $tabledata=array();
                foreach($ids_final as $id_org=>$desc)
                {
                    $tabledata[]=array("Denominazione"=>$desc);
                }

                if(sizeof($ids_final) > 1) $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"I seguenti ".sizeof($ids_final)." provvedimenti/accordi verranno pubblicati, vuoi procedere?")));
                else $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il seguente elemento/accordo verrà pubblicato, vuoi procedere?")));

                $table=new AA_JSON_Template_Generic($id."_Table", array(
                    "view"=>"datatable",
                    "scrollX"=>false,
                    "autoConfig"=>true,
                    "select"=>false,
                    "data"=>$tabledata
                ));

                $wnd->AddGenericObject($table);

                $wnd->EnableCloseWndOnSuccessfulSave();
                $wnd->enableRefreshOnSuccessfulSave();
                $wnd->SetSaveTask('PublishSier');
            }
            else
            {
                $wnd=new AA_GenericWindowTemplate($id, "Avviso",$this->id);
                $wnd->AddView(new AA_JSON_Template_Template("",array("css"=>array("text-align"=>"center"),"template"=>"<p>L'utente corrente non ha i permessi per pubblicare i provvedimenti/accordi selezionati.</p>")));
                $wnd->SetWidth(380);
                $wnd->SetHeight(115);
            }
            
            return $wnd;
        }
    }
    
    //Template organismo delete dlg
    public function Template_GetSierDeleteDlg($params)
    {
        return $this->Template_GetGenericObjectDeleteDlg($params,"DeleteSier");
    }
        
    //Template dlg addnew provvedimenti
    public function Template_GetSierAddNewDlg()
    {
        $id=$this->GetId()."_AddNew_Dlg";
        
        $form_data=array();
        
        $form_data['Note']="";
        $form_data['Anno']=date("Y");
        $form_data['Flags']=0;
        $form_data['nome']="Elezioni regionali ".date("Y");
        $form_data['descrizione']="";
        
        $wnd=new AA_GenericFormDlg($id, "Aggiungi elezioni regionali", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(400);
        $wnd->EnableValidation();
        
        $anno_fine=date("Y")+5;
        $anno_start=($anno_fine-10);
        //anno riferimento
        $options=array();
        for($i=$anno_fine; $i>=$anno_start; $i--)
        {
            $options[]=array("id"=>$i, "value"=>$i);
        }
        $wnd->AddSelectField("Anno","Anno",array("required"=>true,"validateFunction"=>"IsSelected","bottomLabel"=>"*Indicare l'anno in cui si dovrebbero svolgere le elezioni.", "placeholder"=>"...","options"=>$options,"value"=>Date('Y')));

        //Nome
        $wnd->AddTextField("nome","Titolo",array("required"=>true, "bottomLabel"=>"*Inserisci il titolo.", "placeholder"=>"es. Nuove elezioni regionali..."));

        //Descrizione
        $label="Descrizione";
        $wnd->AddTextareaField("descrizione",$label,array("bottomLabel"=>"*Breve descrizione.", "placeholder"=>"Inserisci qui la descrizione..."));

        //Note
        $label="Note";
        $wnd->AddTextareaField("Note",$label,array("bottomLabel"=>"*Eventuali annotazioni.", "placeholder"=>"Inserisci qui le note..."));
        
        $wnd->EnableCloseWndOnSuccessfulSave();

        $wnd->SetSaveTask("AddNewSier");
        
        return $wnd;
    }
    
    //Template dlg aggiungi giornata
    public function Template_GetSierAddNewGiornataDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewGiornataDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array();
        $form_data['giornata']=date("Y-m-d");
        $form_data['affluenza']=0;
        $form_data['risultati']=0;
        $form_data['orario_apertura']="7:00";
        $form_data['orario_chiusura']="22:00";

        $wnd=new AA_GenericFormDlg($id, "Aggiungi giornata", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(480);
        $wnd->SetHeight(550);

        //data
        $wnd->AddDateField("giornata", "Data", array("required"=>true,"bottomLabel" => "*Selezionare una data dal calendario","width"=>350,"labelWidth"=>180));
        $wnd->AddTextField("orario_apertura","Orario apertura",array("required"=>true,"bottomLabel" => "*Orario di apertura dei seggi","width"=>350,"labelWidth"=>180));
        $wnd->AddTextField("orario_chiusura","Orario chiusura",array("required"=>true,"bottomLabel" => "*Orario di chiusura dei seggi","width"=>350,"labelWidth"=>180));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic(),false);

        //Abilita/disabilita il caricamento dell'affluenza
        $wnd->AddSwitchBoxField("affluenza","Caricamento affluenza",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>180,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dell'affluenza."));

        //Abilita/disabilita il caricamento dei risultati
        $wnd->AddSwitchBoxField("risultati","Caricamento risultati",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>180,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dei risultati."));
        
        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierGiornata");
        
        return $wnd;
    }

    //Template dlg aggiungi giornata
    public function Template_GetSierModifyGiornataDlg($object=null,$data="")
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyGiornataDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $giornate=$object->GetGiornate();

        $form_data=array();
        if($data !="")
        {
            $form_data['giornata']=$data;
            $form_data['affluenza']=$giornate[$data]['affluenza'];
            $form_data['risultati']=$giornate[$data]['risultati'];
            $form_data['orario_apertura']=$giornate[$data]['orario_apertura'];
            $form_data['orario_chiusura']=$giornate[$data]['orario_chiusura'];
            $form_data['old_giornata']=$data;
        }
        else
        {
            $form_data['giornata']=date("Y-m-d");
            $form_data['affluenza']=0;
            $form_data['risultati']=0;
            $form_data['orario_apertura']="7:00";
            $form_data['orario_chiusura']="22:00";
        }

        $wnd=new AA_GenericFormDlg($id, "Modifica giornata", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(480);
        $wnd->SetHeight(550);

        //data
        $wnd->AddDateField("giornata", "Data", array("required"=>true,"bottomLabel" => "*Selezionare una data dal calendario","width"=>350,"labelWidth"=>180));
        $wnd->AddTextField("orario_apertura","Orario apertura",array("required"=>true,"bottomLabel" => "*Orario di apertura dei seggi","width"=>350,"labelWidth"=>180));
        $wnd->AddTextField("orario_chiusura","Orario chiusura",array("required"=>true,"bottomLabel" => "*Orario di chiusura dei seggi","width"=>350,"labelWidth"=>180));
        $wnd->AddGenericObject(new AA_JSON_Template_Generic(),false);

        //Abilita/disabilita il caricamento dell'affluenza
        $wnd->AddSwitchBoxField("affluenza","Caricamento affluenza",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>180,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dell'affluenza."));

        //Abilita/disabilita il caricamento dei risultati
        $wnd->AddSwitchBoxField("risultati","Caricamento risultati",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>180,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dei risultati."));
        
        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierGiornata");
        
        return $wnd;
    }

    //Template dlg aggiungi lista
    public function Template_GetSierAddNewListaDlg($object=null,$coalizione=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewListaDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("id_coalizione"=>$coalizione->GetProp('id'));
        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        foreach($circoscrizioni as $key=>$val)
        {
            $form_data["ordine_".$key]=0;
        }

        $wnd=new AA_GenericFormDlg($id, "Aggiungi una nuova Lista", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(800);

        //denominazione
        $wnd->AddTextField("denominazione", "Denominazione", array("required"=>true,"labelWidth"=>150,"bottomLabel" => "*Indicare la denominazione della Lista.", "placeholder" => "..."));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));

        //ordine
        $section=new AA_FieldSet($id."_Section_Ordine","Ordine di visualizzazione per circoscrizione");
        $numCirc=0;
        foreach($circoscrizioni as $key=>$val)
        {
            if($numCirc%2) $section->AddTextField("ordine_".$key, $val, array("required"=>true,"labelWidth"=>150,"labelAlign"=>"right","bottomLabel" => "*Ordine per ".$val, "value" => 0),false);
            else $section->AddTextField("ordine_".$key, $val, array("required"=>true,"labelWidth"=>150,"labelAlign"=>"right","bottomLabel" => "*Ordine per ".$val, "value" => 0));
            $numCirc++;
        }
        $wnd->AddGenericObject($section);

        $section=new AA_FieldSet($id."_Section_Url","Scegliere un'immagine per la Lista.");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //file
        $section->AddFileUploadField("NewListaImage","", array("bottomLabel"=>"*Caricare solo immagini in formato jpg o png (dimensione max: 1Mb).","accept"=>"image/jpg,image/png"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierLista");
        
        return $wnd;
    }

    //Template dlg aggiungi lista
    public function Template_GetSierModifyListaDlg($object=null,$coalizione=null,$lista=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyListaDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("id_coalizione"=>$coalizione->GetProp('id'),"id_lista"=>$lista->GetProp('id'),"denominazione"=>$lista->GetProp("denominazione"),'ordine'=>$lista->GetProp("ordine"));
        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        foreach($circoscrizioni as $key=>$val)
        {
            $form_data["ordine_".$key]=$lista->GetProp("ordine_".$key);
        }

        $wnd=new AA_GenericFormDlg($id, "Modifica Lista", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(800);

        //denominazione
        $wnd->AddTextField("denominazione", "Denominazione", array("required"=>true,"gravity"=>3,"labelWidth"=>150,"bottomLabel" => "*Indicare la denominazione della Lista.", "placeholder" => "..."));

        //ordine
        $section=new AA_FieldSet($id."_Section_Ordine","Ordine di visualizzazione per circoscrizione");
        $numCirc=0;
        foreach($circoscrizioni as $key=>$val)
        {
            if($numCirc%2) $section->AddTextField("ordine_".$key, $val, array("required"=>true,"labelWidth"=>150,"labelAlign"=>"right","bottomLabel" => "*Ordine per ".$val, "value" => 0),false);
            else $section->AddTextField("ordine_".$key, $val, array("required"=>true,"labelWidth"=>150,"labelAlign"=>"right","bottomLabel" => "*Ordine per ".$val, "value" => 0));
            $numCirc++;
        }
        $wnd->AddGenericObject($section);
        
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
       
        $section=new AA_FieldSet($id."_Section_Url","Scegliere un'immagine per la Lista.");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //file
        $section->AddFileUploadField("UpdateListaImage","", array("bottomLabel"=>"*Caricare solo immagini in formato jpg o png (dimensione max: 1Mb).<br>Non selezionare nessun file per mantenere quello corrente.","accept"=>"image/jpg,image/png"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierLista");
        
        return $wnd;
    }

    //Template dlg aggiungi Coaiizione
    public function Template_GetSierAddNewCoalizioneDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewCoalizioneDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("ordine"=>0);
        
        $wnd=new AA_GenericFormDlg($id, "Aggiungi Coalizione", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(540);

        //denominazione
        $wnd->AddTextField("denominazione", "Denominazione", array("required"=>true,"labelWidth"=>150,"bottomLabel" => "*Indicare la denominazione della coalizione.", "placeholder" => "..."));

        //nome candidato
        $wnd->AddTextField("nome_candidato", "Presidente", array("required"=>true,"labelWidth"=>150,"bottomLabel" => "*Indicare il nome e cognome del candidato Presidente.", "placeholder" => "..."));

        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("required"=>true,"validateFunction"=>"IsPositive","labelWidth"=>150,"bottomLabel" => "*Indicare l'ordine di visualizzazione.", "placeholder" => "..."));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Scegliere un'immagine per la Coalizione.");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //file
        $section->AddFileUploadField("NewCoalizioneImage","", array("bottomLabel"=>"*Caricare solo immagini in formato jpg o png (dimensione max: 1Mb).","accept"=>"image/jpg,image/png"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierCoalizione");
        
        return $wnd;
    }

    //Template dlg modifica Coalizione
    public function Template_GetSierModifyCoalizioneDlg($object=null,$coalizione=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyCoalizioneDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array();
        if($coalizione instanceof AA_SierCoalizioni)
        {
            $form_data['denominazione']=$coalizione->GetProp("denominazione");
            $form_data['nome_candidato']=$coalizione->GetProp("nome_candidato");
            $form_data['ordine']=$coalizione->GetProp("ordine");
        }
        else
        {
            AA_Log::Log(__METHOD__." - coalizione non valida: ".print_r($coalizione,true),100);
        }
        
        $wnd=new AA_GenericFormDlg($id, "Modifica Coalizione", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(540);

        //denominazione
        $wnd->AddTextField("denominazione", "Denominazione", array("required"=>true,"labelWidth"=>150,"bottomLabel" => "*Indicare la denominazione della coalizione.", "placeholder" => "..."));

        //nome candidato
        $wnd->AddTextField("nome_candidato", "Presidente", array("required"=>true,"labelWidth"=>150,"bottomLabel" => "*Indicare il nome e cognome del candidato Presidente.", "placeholder" => "..."));

        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("required"=>true,"validateFunction"=>"IsPositive","labelWidth"=>150,"bottomLabel" => "*Indicare l'ordine di visualizzazione.", "placeholder" => "..."));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Scegliere un'immagine per la Coalizione.");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //file
        $section->AddFileUploadField("NewCoalizioneImage","", array("bottomLabel"=>"*Caricare solo immagini in formato jpg o png (dimensione max: 1Mb).<br>Non selezionare nessun file per mantenere quello corrente.","accept"=>"image/jpg,image/png"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_coalizione"=>$coalizione->GetProp("id")));
        $wnd->SetSaveTask("UpdateSierCoalizione");
        
        return $wnd;
    }

    //Template dlg aggiungi candidato
    public function Template_GetSierAddNewCandidatoDlg($object=null,$lista=null,$id_circoscrizione=0)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewCandidatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"));
        if($lista instanceof AA_SierLista)
        {
            $form_data['id_lista']=$lista->GetProp("id");
        }

        if($id_circoscrizione>0)
        {
            $form_data['id_circoscrizione']=$id_circoscrizione;
        }
        
        $wnd=new AA_GenericFormDlg($id, "Aggiungi candidato", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        //Imposta il controllo su cui abilitare il focus
        $wnd->SetDefaultFocusedItem("cognome");

        //Cognome
        $wnd->AddTextField("cognome", "Cognome", array("required"=>true,"bottomLabel" => "*Indicare il cognome del candidato", "placeholder" => "es. Verdi"));

        //nome
        $wnd->AddTextField("nome", "Nome", array("required"=>true,"bottomLabel" => "*Indicare il nome del candidato", "placeholder" => "es. Giuseppe"));

        //cf
        $wnd->AddTextField("cf", "Codice fiscale", array("bottomLabel" => "*Indicare il codice fisclae del candidato, se presente."));

        //Circoscrizione
        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        $options=array();
        foreach($circoscrizioni as $id=>$descr)
        {
            $options[]=array("id"=>$id,"value"=>$descr);
        }
        $wnd->AddSelectField("id_circoscrizione", "Circoscrizione", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));

        //Lista
        $liste=$object->GetListe();
        $options=array();
        foreach($liste as $id=>$lista)
        {
            $options[]=array("id"=>$id,"value"=>$lista->GetProp("denominazione"));
        }
        $wnd->AddSelectField("id_lista", "Lista", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));
        
        /*
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Curriculum - Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCV","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);*/

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierCandidato");
        
        return $wnd;
    }

    //Template dlg aggiungi operatore
    public function Template_GetSierComuneOperatoriAddNewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneOperatoriAddNewDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_comune"=>$comune->GetProp("id"));
        
        $wnd=new AA_GenericFormDlg($id, "Aggiungi operatore", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        //Imposta il controllo su cui abilitare il focus
        $wnd->SetDefaultFocusedItem("cognome");

        //Cognome
        $wnd->AddTextField("cognome", "Cognome", array("required"=>true,"bottomLabel" => "*Indicare il cognome dell'operatore", "placeholder" => "es. Verdi"));

        //nome
        $wnd->AddTextField("nome", "Nome", array("required"=>true,"bottomLabel" => "*Indicare il nome dell'operatore", "placeholder" => "es. Giuseppe"));

        //cf
        $wnd->AddTextField("cf", "Codice fiscale", array("required"=>true,"bottomLabel" => "*Indicare il codice fiscale dell'operatore, se presente."));

        //email
        $wnd->AddTextField("email", "Email", array("required"=>true,"bottomLabel" => "*Indicare l'email dell'operatore", "placeholder" => "giuseppe@verdi.it"));

        //Ruolo
        $options=array();
        $options[]=array("id"=>"1","value"=>"Caricamento dati");
        $options[]=array("id"=>"2","value"=>"Caricamento rendiconti");
        $options[]=array("id"=>"3","value"=>"Caricamento dati e rendiconti");
        
        $wnd->AddSelectField("ruolo", "Ruolo", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);

        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierComuneOperatore");
        
        return $wnd;
    }
    
    //Template dlg modifca operatore
    public function Template_GetSierComuneOperatoriModifyDlg($object=null,$comune=null,$operatore=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneOperatoriModifyDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_comune"=>$comune->GetProp("id"));

        if($operatore)
        {
            $form_data["nome"]=$operatore['nome'];
            $form_data["cognome"]=$operatore['cognome'];
            $form_data["cf"]=strtoupper($operatore['cf']);
            $form_data["ruolo"]=$operatore['ruolo'];
            $form_data["email"]=$operatore['email'];
            $form_data["lastlogin"]=$operatore['lastlogin'];
        }

        $wnd=new AA_GenericFormDlg($id, "Modifica operatore", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        //Imposta il controllo su cui abilitare il focus
        $wnd->SetDefaultFocusedItem("cognome");

        //Cognome
        $wnd->AddTextField("cognome", "Cognome", array("required"=>true,"bottomLabel" => "*Indicare il cognome dell'operatore", "placeholder" => "es. Verdi"));

        //nome
        $wnd->AddTextField("nome", "Nome", array("required"=>true,"bottomLabel" => "*Indicare il nome dell'operatore", "placeholder" => "es. Giuseppe"));

        //cf
        $wnd->AddTextField("cf", "Codice fiscale", array("required"=>true,"bottomLabel" => "*Indicare il codice fiscale dell'operatore, se presente."));

        //email
        $wnd->AddTextField("email", "Email", array("required"=>true,"bottomLabel" => "*Indicare l'email dell'operatore", "placeholder" => "giuseppe@verdi.it"));

        //Ruolo
        $options=array();
        $options[]=array("id"=>"1","value"=>"Caricamento dati");
        $options[]=array("id"=>"2","value"=>"Caricamento rendiconti");
        $options[]=array("id"=>"3","value"=>"Caricamento dati e rendiconti");
        
        $wnd->AddSelectField("ruolo", "Ruolo", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);

        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierComuneOperatore");
        
        return $wnd;
    }

    //Template dlg modifica candidato
    public function Template_GetSierModifyCandidatoDlg($object=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyCandidatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"));
        foreach($candidato->GetProps() as $key=>$val)
        {
            if($key !="id") $form_data[$key]=$val;
        }
        
        $wnd=new AA_GenericFormDlg($id, "Modifica candidato", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        //Imposta il controllo su cui abilitare il focus
        $wnd->SetDefaultFocusedItem("cognome");

        //Cognome
        $wnd->AddTextField("cognome", "Cognome", array("required"=>true,"bottomLabel" => "*Indicare il cognome del candidato", "placeholder" => "es. Verdi"));

        //nome
        $wnd->AddTextField("nome", "Nome", array("required"=>true,"bottomLabel" => "*Indicare il nome del candidato", "placeholder" => "es. Giuseppe"));

        //cf
        $wnd->AddTextField("cf", "Codice fiscale", array("bottomLabel" => "*Indicare il codice fisclae del candidato, se presente."));
        
        //Circoscrizione
        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        $options=array();
        foreach($circoscrizioni as $id=>$descr)
        {
            $options[]=array("id"=>$id,"value"=>$descr);
        }
        $wnd->AddSelectField("id_circoscrizione", "Circoscrizione", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));

        //Lista
        $liste=$object->GetListe();
        $options=array();
        foreach($liste as $id=>$lista)
        {
            $options[]=array("id"=>$id,"value"=>$lista->GetProp("denominazione"));
        }
        $wnd->AddSelectField("id_lista", "Lista", array("required"=>true, "gravity"=>2,"validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una voce dal menu a tendina", "options"=>$options));

        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("gravity"=>1,"labelAlign"=>"right","bottomLabel" => "*Posizione nella Lista."),false);

        /*
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Curriculum - Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCV","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);*/

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_candidato"=>$candidato->GetProp('id')));
        $wnd->SetSaveTask("UpdateSierCandidato");
        
        return $wnd;
    }

    //Template dlg modifica candidato
    public function Template_GetOCVerifyLoginDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetOCVerifyLoginDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"));
        
        $wnd=new AA_GenericFormDlg($id, "Codice di verifica operatore", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        //Imposta il controllo su cui abilitare il focus
        $wnd->SetDefaultFocusedItem("codice");

        //Cognome
        $wnd->AddTextField("codice", "Codice", array("required"=>true,"bottomLabel" => "*Indicare il codice di 8 cifre pervenuto via email."));

        $wnd->SetApplyButtonName("Verifica");
        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("OCVerifyLogin");
        
        return $wnd;
    }

    //Template dlg aggiungi candidato
    public function Template_GetSierAddNewCandidatoCVDlg($object=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewCandidatoCVDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_candidato"=>$candidato->GetProp("id"));
        
        $wnd=new AA_GenericFormDlg($id, "Imposta cv candidato", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCvCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il curriculum per il candidato: <b>".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCV","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierCandidatoCV");
        
        return $wnd;
    }

    //Template dlg aggiungi curriculum presidente candidato
    public function Template_GetSierModifyPresidenteCVDlg($object=null,$coalizione=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyPresidenteCVDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_coalizione"=>$coalizione->GetProp("id"));
        
        $wnd=new AA_GenericFormDlg($id, "Imposta cv candidato Presidente", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCvCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il curriculum per il candidato presidente: <b>".$coalizione->GetProp("nome_candidato")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCV","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierPresidenteCV");
        
        return $wnd;
    }

    //Template dlg aggiungi casellario presidente candidato
    public function Template_GetSierModifyPresidenteCGDlg($object=null,$coalizione=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyPresidenteCGDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_coalizione"=>$coalizione->GetProp("id"));
        
        $wnd=new AA_GenericFormDlg($id, "Imposta cv candidato Presidente", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCvCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il casellario per il candidato presidente: <b>".$coalizione->GetProp("nome_candidato")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCG","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierPresidenteCG");
        
        return $wnd;
    }

    //Template dlg modifica candidato cv
    public function Template_GetSierModifyCandidatoCVDlg($object=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyCandidatoCVDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_candidato"=>$candidato->GetProp("id"));
        if(strpos($candidato->GetProp("cv"),"http") !==false) $form_data['url']=$candidato->GetProp("cv");

        $wnd=new AA_GenericFormDlg($id, "Imposta cv candidato", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCvCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il curriculum per il candidato: <b>".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCV","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierCandidatoCV");
        
        return $wnd;
    }

    //Template dlg aggiungi candidato cg
    public function Template_GetSierAddNewCandidatoCGDlg($object=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewCandidatoCGDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_candidato"=>$candidato->GetProp("id"));
        
        $wnd=new AA_GenericFormDlg($id, "Imposta casellario", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCgCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il casellario giudiziale per il candidato: <b>".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCG","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierCandidatoCG");
        
        return $wnd;
    }

    //Template dlg modifica candidato cg
    public function Template_GetSierModifyCandidatoCGDlg($object=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyCandidatoCGDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);

        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"id_candidato"=>$candidato->GetProp("id"));
        if(strpos($candidato->GetProp("cg"),"http") !==false) $form_data['url']=$candidato->GetProp("cg");

        $wnd=new AA_GenericFormDlg($id, "Imposta casellario", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(640);
        $wnd->SetHeight(480);

        $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_IntroCgCandidato",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items:center; width: 100%;height:100%'><div>Imposta il casellario giudiziale per il candidato: <b>".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")."</b>.</div></div>")));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewCandidatoCG","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("UpdateSierCandidatoCG");
        
        return $wnd;
    }

    //Template dlg aggiungi allegato/link
    public function Template_GetSierAddNewAllegatoDlg($object=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierAddNewAllegatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array("aggiornamento"=>date("Y-m-d"),"ordine"=>0);
        
        $wnd=new AA_GenericFormDlg($id, "Aggiungi allegato/link", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(800);

        //descrizione
        $wnd->AddTextField("estremi", "Descrizione", array("gravity"=>3,"required"=>true,"bottomLabel" => "*Indicare una descrizione per l'allegato o il link", "placeholder" => "es. DGR ..."));
        
        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("gravity"=>1,"bottomLabel" => "*0=auto","labelAlign"=>"right"),false);

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        //categorie
        $tipi=AA_Sier_Const::GetTipoAllegati();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Tipo","Categorie");
        $curRow=0;
        foreach($tipi as $tipo=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("tipo_".$tipo, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------

        //destinatari
        $destinatari=AA_Sier_Const::GetDestinatari();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Destinatari","Destinatari");
        $curRow=0;
        foreach($destinatari as $destinatario=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("destinatari_".$destinatario, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------
        
        //file upload------------------
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewAllegatoDoc","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf o file zip (dimensione max: 30Mb).","accept"=>"application/pdf,application/zip"));
        
        $wnd->AddGenericObject($section);
        //---------------------------------

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierAllegato");
        
        return $wnd;
    }

    //Template dlg modifca allegato/link
    public function Template_GetSierModifyAllegatoDlg($object=null,$allegato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyAllegatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array();
        $form_data["estremi"]=$allegato->GetEstremi();
        $form_data["url"]=$allegato->GetUrl();
        $form_data["tipo"]=$allegato->GetTipo();
        $form_data["aggiornamento"]=date("Y-m-d");
        $form_data["ordine"]=$allegato->GetOrdine();

        $destinatari=$allegato->GetDestinatari(true);
        foreach($destinatari as $curDestinatario)
        {
            $form_data["destinatari_".$curDestinatario]=1;
        }

        $tipi=$allegato->GetTipo(true);
        foreach($tipi as $curTipo)
        {
            $form_data["tipo_".$curTipo]=1;
        }

        $wnd=new AA_GenericFormDlg($id, "Modifica allegato/link", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(800);

        /*//tipo
        $tipologia=AA_Sier_Const::GetTipoAllegati();
        $options=array();
        foreach($tipologia as $id=>$descr)
        {
            $options[]=array("id"=>$id,"value"=>$descr);
        }
        $wnd->AddSelectField("tipo", "Categoria", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una categoria dalla lista", "placeholder" => "...","options"=>$options));*/

        //descrizione
        $wnd->AddTextField("estremi", "Descrizione", array("gravity"=>3,"required"=>true,"bottomLabel" => "*Indicare una descrizione per l'allegato o il link", "placeholder" => "es. DGR ..."));

        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("gravity"=>1,"bottomLabel" => "*0=auto","labelAlign"=>"right"),false);

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        //categorie
        $tipi=AA_Sier_Const::GetTipoAllegati();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Tipo","Categorie");
        $curRow=0;
        foreach($tipi as $tipo=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("tipo_".$tipo, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------

        //destinatari
        $destinatari=AA_Sier_Const::GetDestinatari();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Destinatari","Destinatari");
        $curRow=0;
        foreach($destinatari as $destinatario=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("destinatari_".$destinatario, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------

        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewAllegatoDoc","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_allegato"=>$allegato->GetId()));
        $wnd->SetSaveTask("UpdateSierAllegato");
        
        return $wnd;
    }

    //Template dlg modifca allegato/link
    public function Template_GetSierOCRendicontiModifyAllegatoDlg($object=null,$allegato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierModifyAllegatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array();
        $form_data["estremi"]="";
        $form_data["aggiornamento"]=date("Y-m-d");
        $form_data["file"]="";

        if(is_array($allegato))
        {
            $form_data["estremi"]=$allegato['estremi'];
            $form_data["file"]=$allegato['file'];
        }

        $wnd=new AA_GenericFormDlg($id, "Aggiungi/Modifica allegato", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(800);

        /*//tipo
        $tipologia=AA_Sier_Const::GetTipoAllegati();
        $options=array();
        foreach($tipologia as $id=>$descr)
        {
            $options[]=array("id"=>$id,"value"=>$descr);
        }
        $wnd->AddSelectField("tipo", "Categoria", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una categoria dalla lista", "placeholder" => "...","options"=>$options));*/

        //descrizione
        $wnd->AddTextField("estremi", "Descrizione", array("gravity"=>3,"required"=>true,"bottomLabel" => "*Indicare una descrizione per l'allegato", "placeholder" => "es. Determina n.xxx del yyyy ..."));

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));

        $section=new AA_FieldSet($id."_Section_Url","Scegliere un file da allegare");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //file
        $section->AddFileUploadField("NewAllegatoDoc","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("Update_OC_ComuneRendicontiAllegati");
        
        return $wnd;
    }

    //Template dlg copia allegato/link
    public function Template_GetSierCopyAllegatoDlg($object=null,$allegato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierCopyAllegatoDlg";
        
        //AA_Log:Log(__METHOD__." form data: ".print_r($form_data,true),100);
        
        $form_data=array();
        $form_data["estremi"]=$allegato->GetEstremi();
        $form_data["url"]=$allegato->GetUrl();
        $form_data["tipo"]=$allegato->GetTipo();
        $form_data["aggiornamento"]=date("Y-m-d");
        $form_data["ordine"]=$allegato->GetOrdine();

        $destinatari=$allegato->GetDestinatari(true);
        foreach($destinatari as $curDestinatario)
        {
            $form_data["destinatari_".$curDestinatario]=1;
        }

        $tipi=$allegato->GetTipo(true);
        foreach($tipi as $curTipo)
        {
            $form_data["tipo_".$curTipo]=1;
        }

        $wnd=new AA_GenericFormDlg($id, "Aggiungi nuovo allegato/link", $this->id,$form_data,$form_data);
        
        //$wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(100);
        $wnd->SetBottomPadding(30);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(800);

        /*//tipo
        $tipologia=AA_Sier_Const::GetTipoAllegati();
        $options=array();
        foreach($tipologia as $id=>$descr)
        {
            $options[]=array("id"=>$id,"value"=>$descr);
        }
        $wnd->AddSelectField("tipo", "Categoria", array("required"=>true, "validateFunction"=>"IsSelected","bottomLabel" => "*Scegliere una categoria dalla lista", "placeholder" => "...","options"=>$options));*/

        //descrizione
        $wnd->AddTextField("estremi", "Descrizione", array("gravity"=>3,"required"=>true,"bottomLabel" => "*Indicare una descrizione per l'allegato o il link", "placeholder" => "es. DGR ..."));

        //ordine
        $wnd->AddTextField("ordine", "Ordine", array("gravity"=>1,"bottomLabel" => "*0=auto","labelAlign"=>"right"),false);

        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        
        //categorie
        $tipi=AA_Sier_Const::GetTipoAllegati();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Tipo","Categorie");
        $curRow=0;
        foreach($tipi as $tipo=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("tipo_".$tipo, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------

        //destinatari
        $destinatari=AA_Sier_Const::GetDestinatari();$curRow=1;
        $section=new AA_FieldSet($id."_Section_Destinatari","Destinatari");
        $curRow=0;
        foreach($destinatari as $destinatario=>$descr)
        {
            $newLine=false;
            if($curRow%4 == 0 && $curRow >= 4) $newLine=true;
            $section->AddCheckBoxField("destinatari_".$destinatario, $descr, array("value"=>1,"bottomPadding"=>8),$newLine);
            $curRow++;
        }
        $wnd->AddGenericObject($section);
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("type"=>"spacer","height"=>30)));
        //----------------------

        $section=new AA_FieldSet($id."_Section_Url","Inserire un'url oppure scegliere un file");
        $wnd->SetFileUploaderId($id."_Section_Url_FileUpload_Field");

        //url
        $section->AddTextField("url", "Url", array("validateFunction"=>"IsUrl","bottomLabel"=>"*Indicare un'URL sicura, es. https://www.regione.sardegna.it", "placeholder"=>"https://..."));
        
        $section->AddGenericObject(new AA_JSON_Template_Template("",array("type"=>"clean","template"=>"<hr/>","height"=>18)));

        //file
        $section->AddFileUploadField("NewAllegatoDoc","", array("validateFunction"=>"IsFile","bottomLabel"=>"*Caricare solo documenti pdf (dimensione max: 2Mb).","accept"=>"application/pdf"));
        
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        $wnd->SetSaveTask("AddNewSierAllegato");
        
        return $wnd;
    }

    //Template dlg trash allegato
    public function Template_GetSierTrashAllegatoDlg($object=null,$allegato=null)
    {
        $id=$this->id."_TrashProvvedimentoAllegato_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina allegato", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $url=$allegato->GetUrl();
        if($url =="") $url="file locale";
        $tabledata[]=array("estremi"=>$allegato->GetEstremi(),"url"=>$url);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il seguente allegato verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"estremi", "header"=>"Descrizione", "fillspace"=>true),
              array("id"=>"url", "header"=>"Url", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierAllegato");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_allegato"=>$allegato->GetId()));
        
        return $wnd;
    }

    //Template dlg trash comune
    public function Template_GetSierTrashComuneDlg($object=null,$comune=null)
    {
        $id=$this->id."_TrashComune_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina Comune", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("denominazione"=>$comune->GetProp("denominazione"),"circoscrizione"=>$comune->GetProp("circoscrizione"));
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il seguente Comune verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Denominazione", "fillspace"=>true),
              array("id"=>"circoscrizione", "header"=>"Circoscrizione", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierComune");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp("id")));
        
        return $wnd;
    }


    //Template dlg trash curriculum
    public function Template_GetSierTrashCandidatoCVDlg($object=null,$candidato=null)
    {
        $id=$this->id."_TrashCandidatoCV_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina curriculum", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tipo_doc="link";
        if(strpos($candidato->GetProp("cv"),"http")===false) $tipo_doc="file";
        $tabledata[]=array("denominazione"=>$candidato->GetProp("nome")." ".$candidato->GetProp("cognome"),"tipo_doc"=>$tipo_doc);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il curriculum per il seguente candidato verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"tipo_doc", "header"=>"tipo doc", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierCandidatoCV");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_candidato"=>$candidato->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg trash casellario
    public function Template_GetSierTrashCandidatoCGDlg($object=null,$candidato=null)
    {
        $id=$this->id."_TrashCandidatoCG_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina casellario", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tipo_doc="link";
        if(strpos($candidato->GetProp("cg"),"http")===false) $tipo_doc="file";
        $tabledata[]=array("denominazione"=>$candidato->GetProp("nome")." ".$candidato->GetProp("cognome"),"tipo_doc"=>$tipo_doc);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il casellario per il seguente candidato verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"tipo_doc", "header"=>"tipo doc", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierCandidatoCG");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_candidato"=>$candidato->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg trash casellario Presidente
    public function Template_GetSierTrashPresidenteCGDlg($object=null,$coalizione=null)
    {
        $id=$this->id."_TrashPresidenteCG_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina casellario", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tipo_doc="link";
        if(strpos($coalizione->GetProp("cg"),"http")===false) $tipo_doc="file";
        $tabledata[]=array("denominazione"=>$coalizione->GetProp("nome_candidato"),"tipo_doc"=>$tipo_doc);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il casellario per il seguente candidato Presidente verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"tipo_doc", "header"=>"tipo doc", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierPresidenteCG");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_coalizione"=>$coalizione->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg trash casellario Presidente
    public function Template_GetSierTrashPresidenteCVDlg($object=null,$coalizione=null)
    {
        $id=$this->id."_TrashPresidenteCG_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina curriculum", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tipo_doc="link";
        if(strpos($coalizione->GetProp("cg"),"http")===false) $tipo_doc="file";
        $tabledata[]=array("denominazione"=>$coalizione->GetProp("nome_candidato"),"tipo_doc"=>$tipo_doc);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Il curriculum per il seguente candidato Presidente verrà eliminato, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"tipo_doc", "header"=>"tipo doc", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierPresidenteCV");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_coalizione"=>$coalizione->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg trash candidato
    public function Template_GetSierTrashCandidatoDlg($object=null,$candidato=null)
    {
        $id=$this->id."_TrashCandidato_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina informazioni candidato", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("denominazione"=>$candidato->GetProp("nome")." ".$candidato->GetProp("cognome"));
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Le informazioni del seguente candidato verrànno eliminate, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierCandidato");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_candidato"=>$candidato->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg trash candidato
    public function Template_GetSierComuneOperatoriTrashDlg($object=null,$comune=null,$operatore=null)
    {
        $id=$this->id."_TrashComuneOperatori_Dlg";
        
        $form_data=$operatore;
        $form_data["id_comune"]=$comune->GetProp('id');
        
        $wnd=new AA_GenericFormDlg($id, "Elimina operatore", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("denominazione"=>$operatore["nome"]." ".$operatore["cognome"],"cf"=>strtoupper($operatore["cf"]),"email"=>$operatore["email"]);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Le informazioni del seguente candidato verrànno eliminate, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"cf", "header"=>"cf", "width"=>150),
              array("id"=>"email", "header"=>"email", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetSaveTask("TrashSierComuneOperatore");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg trash giornata affluenza
    public function Template_GetSierComuneAffluenzaTrashDlg($object=null,$comune=null,$giornata=null)
    {
        $id=$this->id."_TrashComuneAffluenza_Dlg";
        
        $form_data=array("giornata"=>$giornata);
        $form_data["id_comune"]=$comune->GetProp('id');
        
        $wnd=new AA_GenericFormDlg($id, "Elimina operatore", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("giornata"=>$giornata);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Le informazioni sull'affluenza della seguente giornata saranno eliminate, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"giornata", "header"=>"Giornata", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetSaveTask("TrashSierComuneAffluenza");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Template dlg trash candidato
    public function Template_GetSierComuneRisultatiPreferenzeTrashDlg($object=null,$comune=null,$candidato=null)
    {
        $id=$this->id."_TrashComuneRisultatiPreferenze_Dlg";
        
        $form_data=array("id_candidato"=>$candidato->GetProp("id"));
        $form_data["id_comune"]=$comune->GetProp('id');
        
        $wnd=new AA_GenericFormDlg($id, "Elimina preferenze candidato", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("denominazione"=>$candidato->GetProp("cognome")." ".$candidato->GetProp("nome"),"lista"=>$candidato->GetProp("lista"));
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"I voti attribuiti al seguente candidato verrànno eliminati, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"denominazione", "header"=>"Candidato", "fillspace"=>true),
              array("id"=>"lista", "header"=>"Lista", "width"=>150)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetSaveTask("TrashSierComuneRisultatiPreferenze");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId()));
        
        return $wnd;
    }

    //Task Aggiungi giornata
    public function Task_AddNewSierGiornata($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $giornata=substr($_REQUEST['giornata'],0,10);
        if(strlen($giornata) != 10)
        {
            $task->SetError("Data non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Data non valida</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }

        $giornate=$object->GetGiornate();
        
        $affluenza=0;
        if($_REQUEST['affluenza'] > 0) $affluenza=1;
        $risultati=0;
        if($_REQUEST['risultati'] > 0) $risultati=1;

        if(!isset($_REQUEST['orario_apertura']) || $_REQUEST['orario_apertura'] == "") $apertura="7:00";
        else $apertura=trim($_REQUEST['orario_apertura']);

        if(!isset($_REQUEST['orario_chiusura']) || $_REQUEST['orario_chiusura'] == "") $chiusura="22:00";
        else $chiusura=trim($_REQUEST['orario_chiusura']);

        $giornate[$giornata]=array("affluenza"=>$affluenza,"risultati"=>$risultati,"orario_apertura"=>$apertura,"orario_chiusura"=>$chiusura);
        $object->SetProp("Giornate",json_encode($giornate));
        if(!$object->Update($this->oUser,true,"Aggiunta giornata - ".$_REQUEST['giornata']))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiunta della giornata. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Giornata aggiunta con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica giornata
    public function Task_UpdateSierGiornata($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $giornata=substr($_REQUEST['giornata'],0,10);
        if(strlen($giornata) != 10)
        {
            $task->SetError("Data non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Data non valida</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }

        $giornate=$object->GetGiornate();

        //controlla se e' cambiata la data
        if($_REQUEST['giornata']!=$_REQUEST['old_giornata'])
        {
            unset($giornate[$_REQUEST['old_giornata']]);
        }
        
        $affluenza=0;
        if($_REQUEST['affluenza'] > 0) $affluenza=1;
        $risultati=0;
        if($_REQUEST['risultati'] > 0) $risultati=1;

        if(!isset($_REQUEST['orario_apertura']) || $_REQUEST['orario_apertura'] == "") $apertura="7:00";
        else $apertura=trim($_REQUEST['orario_apertura']);

        if(!isset($_REQUEST['orario_chiusura']) || $_REQUEST['orario_chiusura'] == "") $chiusura="22:00";
        else $chiusura=trim($_REQUEST['orario_chiusura']);

        $giornate[$giornata]=array("affluenza"=>$affluenza,"risultati"=>$risultati,"orario_apertura"=>$apertura,"orario_chiusura"=>$chiusura);
        ksort($giornate);

        $object->SetProp("Giornate",json_encode($giornate));
        if(!$object->Update($this->oUser,true,"Modifica giornata - ".$_REQUEST['giornata']))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiunta della giornata. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Giornata aggiornata con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica control pannel
    public function Task_UpdateSierControlPannel($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile=AA_SessionFileUpload::Get("SierWebAppQRCode_file");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;
        }
        
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC) && !$this->oUser->IsSuperUser())
        {
            $sTaskLog="<status id='status'>0</status><content id='content'>";
            $sTaskLog.= "operazioni concluse.";
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);

            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return true;
        }

        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo")."</error>";
            $task->SetLog($sTaskLog);

            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $cp=$object->GetControlPannel();

        //qr code web APP
        if($uploadedFile->isValid())
        {   
            $file=$uploadedFile->GetValue();
            if(file_exists($file['tmp_name']))
            {
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    if($cp['sierwebappqrcode']!="")
                    {
                        if(!$storage->DelFile($cp['sierwebappqrcode']))
                        {
                            AA_Log::Log(__METHOD__." - ".AA_Log::$lastErrorLog);
                        }
                        else
                        {
                            $cp['sierwebappqrcode']="";
                        }
                    }

                    $storageFile=$storage->AddFileFromUpload($uploadedFile,1);
                    if(!$storageFile->IsValid())
                    {
                        AA_Log::Log(__METHOD__." - ".AA_Log::$lastErrorLog);
                    }
                    else $cp['sierwebappqrcode']=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - Storage non valido. - ".AA_Log::$lastErrorLog);
                }

                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }
        }  

        // --------- Esportazione risultati --------------------
        if(isset($_REQUEST['risultati_scrutinio_parziale_check']) && $_REQUEST['risultati_scrutinio_parziale_check'] > 0) $cp['risultati_scrutinio_parziale_check']=1;
        else $cp['risultati_scrutinio_parziale_check']=0;

        if(isset($_REQUEST['risultati_voti_presidente_check']) && $_REQUEST['risultati_voti_presidente_check'] > 0) $cp['risultati_voti_presidente_check']=1;
        else $cp['risultati_voti_presidente_check']=0;

        if(isset($_REQUEST['risultati_voti_lista_check']) && $_REQUEST['risultati_voti_lista_check'] > 0) $cp['risultati_voti_lista_check']=1;
        else $cp['risultati_voti_lista_check']=0;

        if(isset($_REQUEST['risultati_voti_candidato_check']) && $_REQUEST['risultati_voti_candidato_check'] > 0) $cp['risultati_voti_candidato_check']=1;
        else $cp['risultati_voti_candidato_check']=0;
        //-------------------------------------------------------

        //certificazione corpo elettorale da parte dei comuni
        if(isset($_REQUEST['abilita_cert_corpo_elettorale']) && $_REQUEST['abilita_cert_corpo_elettorale'] > 0) $cp['abilita_cert_corpo_elettorale']=1;
        else $cp['abilita_cert_corpo_elettorale']=0;

        //finestra temporale modifica corpo elettorale da parte dei comuni
        if(isset($_REQUEST['finestra_temporale_cert_corpo_elettorale']) && $_REQUEST['finestra_temporale_cert_corpo_elettorale'] >= 0) $cp['finestra_temporale_cert_corpo_elettorale']=intVal($_REQUEST['finestra_temporale_cert_corpo_elettorale']);
        else $cp['finestra_temporale_cert_corpo_elettorale']=0;

        //url feed pubblico risultati
        if(isset($_REQUEST['url_feed_risultati']) && $_REQUEST['url_feed_risultati'] > 0) $cp['url_feed_risultati']=$_REQUEST['url_feed_risultati'];
        else $cp['url_feed_risultati']="";

        $object->SetControlPannel($cp);
        if(!$object->Update($this->oUser,true,"Modifica pannello di controllo"))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del pannello di controllo. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
                
        $task->SetStatus(AA_GenericModuleTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("RefreshControlPannel",json_encode(array("id"=>$object->GetId())));
        $task->SetContent("dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica giornata
    public function Task_DeleteSierGiornata($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo oggetto non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'oggetto: ".$object->GetProp("titolo")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $giornata=substr($_REQUEST['giornata'],0,10);
        if(strlen($giornata) != 10)
        {
            $task->SetError("Data non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Data non valida</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }

        $giornate=$object->GetGiornate();
        if(isset($giornate[$_REQUEST['giornata']]))unset($giornate[$_REQUEST['giornata']]);

        $object->SetProp("Giornate",json_encode($giornate));
        if(!$object->Update($this->oUser,true,"Elimina giornata - ".$_REQUEST['giornata']))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'eliminazione della giornata. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Giornata eliminata con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Template dlg trash giornata
    public function Template_GetSierTrashGiornataDlg($object=null,$giornata="")
    {
        $id=$this->id."_TrashSierGiornata_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina giornata", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("giornata"=>$giornata);
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"La seguente giornata verrà eliminata, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"giornata", "header"=>"Data", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierGiornata");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"giornata"=>$giornata));
        
        return $wnd;
    }


    //Template dlg trash giornata
    public function Template_GetSierTrashCoalizioneDlg($object=null,$coalizione=null)
    {
        $id=$this->id."_TrashSierCoalizione_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina coalizione", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("coalizione"=>$coalizione->GetProp("denominazione"));
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"La seguente Coalizione verrà eliminata, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"coalizione", "header"=>"Denominazione", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierCoalizione");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_coalizione"=>$coalizione->GetProp("id")));
        
        return $wnd;
    }

    //Template dlg trash lista
    public function Template_GetSierTrashListaDlg($object=null,$coalizione=null,$lista=null)
    {
        $id=$this->id."_TrashSierLista_Dlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericFormDlg($id, "Elimina Lista", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(80);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
        
        //Disattiva il pulsante di reset
        $wnd->EnableResetButton(false);

        //Imposta il nome del pulsante di conferma
        $wnd->SetApplyButtonName("Procedi");
                
        $tabledata=array();
        $tabledata[]=array("lista"=>$lista->GetProp("denominazione"));
      
        $wnd->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"La seguente Lista verrà eliminata, vuoi procedere?")));

        $table=new AA_JSON_Template_Generic($id."_Table", array(
            "view"=>"datatable",
            "autoheight"=>true,
            "scrollX"=>false,
            "columns"=>array(
              array("id"=>"lista", "header"=>"Denominazione", "fillspace"=>true)
            ),
            "select"=>false,
            "data"=>$tabledata
        ));

        $wnd->AddGenericObject($table);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("DeleteSierLista");
        $wnd->SetSaveTaskParams(array("id"=>$object->GetId(),"id_coalizione"=>$coalizione->GetProp("id"),"id_lista"=>$lista->GetProp('id')));
        
        return $wnd;
    }

    //Template dlg modal msg
    public function Template_GetSierAnalisiRisultatiDlg($object=null,$comune=null)
    {
        $id=$this->id."_GetSierAnalisiRisultatiDlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità risultati comune di ".$comune->GetProp("denominazione"), $this->id);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
      
        $risultati=$comune->GetRisultati(true);
        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);

        //AA_Log::Log(__METHOD__." - analisi: ".print_r($analisi,true)." - risultati: ".print_r($risultati,true),100);

        if($analisi[0]==true)
        {
            $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
            foreach($analisi[1] as $curError)
            {
                $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
            }
            $content.="</ul></div>";
        }
        else
        {
            $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%;height: 100%'><p>I dati sono coerenti.</p></div>";
        }
        
        $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));

        return $wnd;
    }

    //Template dlg modal msg
    public function Template_GetSierAnalisiComunicazioniDlg($object=null,$comune=null)
    {
        $id=$this->id."_GetSierAnalisiComunicazioniDlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità comunicazioni", $this->id);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
      
        $comunicazioni=$comune->GetComunicazioni(true);
        $analisi=$object->AnalizeComunicazioni($comunicazioni);
        if($analisi[0]==true)
        {
            $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
            foreach($analisi[1] as $curError)
            {
                $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
            }
            $content.="</ul></div>";
        }
        else
        {
            $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%; height:100%'><p>non sono presenti criticità.</p></div>";
        }
        
        $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));

        return $wnd;
    }

    //Template dlg modal msg
    public function Template_GetSierAnalisiCorpoElettoraleDlg($object=null,$comune=null)
    {
        $id=$this->id."_GetSierAnalisiCorpoElettoraleDlg";
        
        $form_data=array();
        
        $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità corpo elettorale", $this->id);
        
        $wnd->SetWidth(580);
        $wnd->SetHeight(280);
      
        $comunicazioni=$comune->GetComunicazioni(true);
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        $_45daysago=date('Y-m-d', strtotime($giornateKeys[0].' -45 days'));
        $_15daysago=date('Y-m-d', strtotime($giornateKeys[0].' -15 days'));
        $analisi=array();
        
        //alert comunicazioni corpo elettorale
        if($now > $_45daysago && (!isset($comunicazioni['corpoelettorale_45']) || $comunicazioni['corpoelettorale_45']==0))
        {
            $analisi[0]=true;
            $analisi[1][]="Manca la certificazione del corpo elettorale al 45° giorno";
            $analisi[2]=true;
        }

        if($now > $_15daysago && (!isset($comunicazioni['corpoelettorale_45']) || $comunicazioni['corpoelettorale_15']==0))
        {
            $analisi[0]=true;
            $analisi[1][]="Manca la certificazione del corpo elettorale al 15° giorno";
            $analisi[2]=true;
        }

        if(sizeof($analisi)==0)
        {
            $analisi=array(false,array("non sono presenti criticità",false));
        }
        //AA_Log::Log(__METHOD__." - analisi: ".print_r($analisi,true)." - risultati: ".print_r($risultati,true),100);

        if($analisi[0]==true)
        {
            $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
            foreach($analisi[1] as $curError)
            {
                $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
            }
            $content.="</ul></div>";
        }
        else
        {
            $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%; height:100%'><p>Non sono presenti criticità.</p></div>";
        }
        
        $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));

        return $wnd;
    }

    //Task Aggiungi allegato
    public function Task_AddNewSierAllegato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewAllegatoDoc");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        if(!$uploadedFile->isValid() && $_REQUEST['url'] == "")
        {   
            AA_Log::Log(__METHOD__." - "."Parametri non validi: ".print_r($uploadedFile,true)." - ".print_r($_REQUEST,true),100);
            $task->SetError("Parametri non validi occorre indicare un url o un file.");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Parametri non validi: occorre indicare un url o un file.</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            
            return false;
        }
        
        $id_sier=$object->GetIdData();
        if($object->GetIdDataRev() > 0)
        {
            $id_sier=$object->GetIdDataRev();
        }
        
        $fileHash="";
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        $aggiornamento=substr($_REQUEST['aggiornamento'],0,10);
        if($aggiornamento=="") $aggiornamento=date("Y-m-d");

        //destinatari
        $destinatari=AA_Sier_Const::GetDestinatari();
        $newDestinatari=array();
        foreach($destinatari as $destinatario=>$descr)
        {
            if(isset($_REQUEST['destinatari_'.$destinatario]) && $_REQUEST['destinatari_'.$destinatario]==1) $newDestinatari[]=$destinatario;
        }
        //----

        //tipologia
        $tipi=AA_Sier_Const::GetTipoAllegati();
        $newTipo=array();
        foreach($tipi as $tipo=>$descr)
        {
            if(isset($_REQUEST['tipo_'.$tipo]) && $_REQUEST['tipo_'.$tipo]==1) $newTipo[]=$tipo;
        }
        //--------------

        $ordine=0;
        if(isset($_REQUEST['ordine']) && $_REQUEST['ordine']>0) $ordine=$_REQUEST['ordine'];
        $allegato=new AA_SierAllegati(0,$id_sier,$_REQUEST['estremi'],$_REQUEST['url'],$fileHash,implode(",",$newTipo),$aggiornamento,implode(",",$newDestinatari),addslashes($ordine));
        
        //AA_Log::Log(__METHOD__." - "."allegato: ".print_r($allegato, true),100);
        
        if(!$object->AddNewAllegato($allegato, $this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nel salvataggio dell'allegato. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Allegato caricato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task Aggiungi candidato
    public function Task_AddNewSierCandidato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $circoscrizione=AA_Sier_Const::GetCircoscrizione($_REQUEST['id_circoscrizione']);
        //AA_Log::Log(__METHOD__." - circoscrizione: ".print_r($circoscrizione,true),100);
        if(!is_array($circoscrizione))
        {
            AA_Log::Log(__METHOD__." - "."Parametri non validi: ".print_r($_REQUEST,true),100);
            $task->SetError("Parametri non validi occorre indicare una circoscrizione valida.");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Parametri non validi: occorre indicare una circoscrizione valida.</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }

        $lista=$object->GetLista($_REQUEST['id_lista']);
        //AA_Log::Log(__METHOD__." - lista: ".print_r($lista,true),100);
        if(!($lista instanceof AA_SierLista))
        {
            AA_Log::Log(__METHOD__." - "."Lista non valida: ".print_r($lista,true)." - parametri".print_r($_REQUEST,true),100);
            $task->SetError("Occorre indicare una lista valida.");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Occorre indicare una lista valida.</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        $params=array(
            "id_circoscrizione"=>$circoscrizione['id'],
            "id_lista"=>$lista->GetProp("id"),
            "nome"=>trim($_REQUEST['nome']),
            "cognome"=>trim($_REQUEST['cognome']),
            "cf"=>trim($_REQUEST['cf'])
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - "."Provvedimento: ".print_r($elemento, true),100);
        $newId=$object->AddNewCandidato($candidato, $this->oUser);
        if($newId===false)
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nel salvataggio del candidato. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $params=array(
            "task"=>"GetSierAddNewCandidatoCVDlg",
            "params"=>array(
                "id"=>$object->Getid(),
                "id_candidato"=>$newId
            )
        );
        //$sTaskLog="<status id='status' action='dlg' action_params='".json_encode($params)."'>0</status><content id='content'>";
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Candidato caricato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task Aggiungi candidato
    public function Task_GetSierComuneAddNewMultiResultDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAddNewMultiResultDlg($object,json_decode($_REQUEST['count'],true)),true);
        return true;
    }

    //Task Update candidato
    public function Task_AddNewSierCandidatoCV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCV");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cv precedente se presente
        if($_REQUEST['url'] !="" && strpos($candidato->GetProp("cv"),"http")===false && $candidato->GetProp("cv") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cg"=>$candidato->GetProp('cg'),
            "cv"=>$fileHash,
            "ordine"=>$candidato->GetProp('ordine')
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Aggiornamento del curriculum per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornameto del curriculum. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $params=array(
            "task"=>"GetSierAddNewCandidatoCGDlg",
            "params"=>array(
                "id"=>$object->Getid(),
                "id_candidato"=>$candidato->GetProp("id")
            )
        );
        $sTaskLog="<status id='status' action='dlg' action_params='".json_encode($params)."'>0</status><content id='content'>";
        $sTaskLog.= "Curriculum aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task aggiungi nuovo casellario candidato
    public function Task_AddNewSierCandidatoCG($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCG");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cg precedente se presente
        if($_REQUEST['url'] !="" && strpos($candidato->GetProp("cg"),"http")===false && $candidato->GetProp("cg") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cv"=>$candidato->GetProp('cv'),
            "cg"=>$fileHash,
            "ordine"=>$candidato->GetProp('ordine')

        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Aggiornamento del casellario giudiziale per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del casellario. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Casellario aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica casellario candidato
    public function Task_UpdateSierCandidato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        $ordine=$candidato->GetProp('ordine');
        if($_REQUEST['ordine'] > 0) $ordine=$_REQUEST['ordine'];

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$_REQUEST['id_circoscrizione'],
            "id_lista"=>$_REQUEST['id_lista'],
            "nome"=>trim($_REQUEST['nome']),
            "cognome"=>trim($_REQUEST['cognome']),
            "cf"=>trim($_REQUEST['cf']),
            "cv"=>$candidato->GetProp('cv'),
            "cg"=>$candidato->GetProp('cg'),
            "ordine"=>$ordine
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Aggiornamento dati del candidato: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento dei dati del candidato. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "dati Candidato aggiornati con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica casellario candidato
    public function Task_UpdateSierCandidatoCG($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCG");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cg precedente se presente
        if($_REQUEST['url'] !="" && strpos($candidato->GetProp("cg"),"http")===false && $candidato->GetProp("cg") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cv"=>$candidato->GetProp('cv'),
            "cg"=>$fileHash,
            "ordine"=>$candidato->GetProp('ordine')
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Aggiornamento del casellario giudiziale per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del casellario. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Casellario aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica cv candidato
    public function Task_UpdateSierCandidatoCV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCV");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cg precedente se presente
        if($_REQUEST['url'] !="" && strpos($candidato->GetProp("cv"),"http")===false && $candidato->GetProp("cv") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cg"=>$candidato->GetProp('cg'),
            "cv"=>$fileHash,
            "ordine"=>$candidato->GetProp('ordine')
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Aggiornamento del curriculum giudiziale per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del curriculum. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Curriculum aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica cv candidato Presidente
    public function Task_UpdateSierPresidenteCV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCV");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione == null)
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        if(trim($_REQUEST['url']=="") && !$uploadedFile->isValid())
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Occorre indicare un url o selezionare un file.</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cg precedente se presente
        if($_REQUEST['url'] !="" && strpos($coalizione->GetProp("cv"),"http")===false && $coalizione->GetProp("cv") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $coalizione->SetProp('cv',$fileHash);
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCoalizione($coalizione, $this->oUser,"Aggiornamento del curriculum per: ".$coalizione->GetProp("nome_candidato")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del curriculum. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Curriculum aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task modifica cg candidato Presidente
    public function Task_UpdateSierPresidenteCG($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewCandidatoCG");
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;            
        }
        
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione == null)
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     

            return false;
        }

        if(trim($_REQUEST['url']=="") && !$uploadedFile->isValid())
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Occorre indicare un url o selezionare un file.</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }

        $fileHash=$_REQUEST['url'];
        if($uploadedFile->isValid()) 
        {
            //Se c'è un file uploadato l'url non viene salvata.
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il cg precedente se presente
        if($_REQUEST['url'] !="" && strpos($coalizione->GetProp("cg"),"http")===false && $coalizione->GetProp("cg") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $coalizione->SetProp('cg',$fileHash);
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCoalizione($coalizione, $this->oUser,"Aggiornamento del casellario per: ".$coalizione->GetProp("nome_candidato")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del casellario. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Casellario aggiornato con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina cv candidato
    public function Task_DeleteSierCandidatoCV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        //Elimina il cg precedente se presente
        if(strpos($candidato->GetProp("cv"),"http")===false && $candidato->GetProp("cv") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cg"=>$candidato->GetProp('cg'),
            "cv"=>"",
            "ordine"=>$candidato->GetProp('ordine')
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Rimozione del curriculum per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nella rimozione del curriculum. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Curriculum rimosso con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina cv candidato
    public function Task_DeleteSierCandidatoCG($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        //Elimina il cg precedente se presente
        if(strpos($candidato->GetProp("cg"),"http")===false && $candidato->GetProp("cg") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$candidato->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $params=array(
            "id"=>$candidato->GetProp('id'),
            "id_circoscrizione"=>$candidato->GetProp('id_circoscrizione'),
            "id_lista"=>$candidato->GetProp("id_lista"),
            "nome"=>$candidato->GetProp('nome'),
            "cognome"=>$candidato->GetProp('cognome'),
            "cf"=>$candidato->GetProp('cf'),
            "cv"=>$candidato->GetProp('cv'),
            "cg"=>"",
            "ordine"=>$candidato->GetProp('ordine')
        );
        $candidato=new AA_SierCandidato($params);
        
        //AA_Log::Log(__METHOD__." - candidato: ".print_r($candidato, true),100);

        if(!$object->UpdateCandidato($candidato, $this->oUser,"Rimozione del casellario per: ".$candidato->GetProp("nome")." ".$candidato->GetProp("cognome")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nella rimozione del casellario. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Casellario rimosso con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina cg candidato Presidente
    public function Task_DeleteSierPresidenteCG($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione == null)
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        //Elimina il cg precedente se presente
        if(strpos($coalizione->GetProp("cg"),"http")===false && $coalizione->GetProp("cg") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cg");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $coalizione->SetProp("cg","");
        
        if(!$object->UpdateCoalizione($coalizione, $this->oUser,"Rimozione del casellario per: ".$coalizione->GetProp("nome_candidato")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nella rimozione del casellario. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Casellario rimosso con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina cv candidato Presidente
    public function Task_DeleteSierPresidenteCV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione == null)
        {
            $task->SetError("identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Coalizione non valido. (".$_REQUEST['id_coalizione'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        //Elimina il cg precedente se presente
        if(strpos($coalizione->GetProp("cv"),"http")===false && $coalizione->GetProp("cv") != "")
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$coalizione->GetProp("cv");
                if($oldFile !="" && strpos($oldFile,"http") === false)
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
        }

        $coalizione->SetProp("cv","");
        
        if(!$object->UpdateCoalizione($coalizione, $this->oUser,"Rimozione del curriculum per: ".$coalizione->GetProp("nome_candidato")))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nella rimozione del curriculum. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Curriculum rimosso con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina cv candidato
    public function Task_DeleteSierCandidato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);

            return false;            
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetError("identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>identificativo Candidato non valido. (".$_REQUEST['id_candidato'].")</error>";
            $task->SetLog($sTaskLog);

            return false;
        }        
        
        if(!$object->DeleteCandidato($candidato, $this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nella rimozione delle informazioni del candidato. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Informazioni candidato rimosse con successo.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task Aggiungi Lista
    public function Task_AddNewSierLista($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $fileUpload = AA_SessionFileUpload::Get("NewListaImage");

        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }            
            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }

        //Verifica coalizione
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $task->SetError("Coalizione non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Coalizione non valida</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }
        
        $imageFileHash="";
        $compliance=true;
        
        if($fileUpload->isValid())
        {   
            $file=$fileUpload->GetValue();

            //Verifica che l'immagine rispetti le specifiche (png o jpg, 1mb max)
            if($file['type'] != "image/png" && ($file['type'] != "image/jpeg" && $file['type'] != "image/jpg"))
            {
                $compliance=false;
            }

            if(filesize($file['tmp_name']) > 1024*1024)
            {
                $compliance=false;
            }

            if($compliance)
            {
                //salva l'immagine della lista
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    $storageFile=$storage->AddFile($file['tmp_name'],$file['name'],$file['type'],1);
                    if(!$storageFile->isValid())
                    {
                        AA_Log::Log(__METHOD__." - Errore durante il salvataggio del file nello storage, immagine non salvata. ".print_r($storageFile,true),100);
                    }
                    else $imageFileHash=$storageFile->GetFileHash();
                }
                else AA_Log::Log(__METHOD__." - Storage non valido, immagine non salvata",100);
            }

            //elimina il file temporaneo (se presente)
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                }
            }
        }
        
        //Nuova lista
        $params=array(
            'id_coalizione'=>$coalizione->GetProp('id'),
            'denominazione'=>$_REQUEST['denominazione'],
            'image'=>$imageFileHash
        );

        foreach(AA_Sier_Const::GetCircoscrizioni() as $key=>$val)
        {
            $params["ordine_".$key]=0;
            if(isset($_REQUEST['ordine_'.$key])) $params['ordine_'.$key]=$_REQUEST['ordine_'.$key];
        }

        $lista=new AA_SierLista($params);
        if(!($lista instanceof AA_SierLista))
        {
            $task->SetError("dati Lista non validi");
            $sTaskLog="<status id='status'>-1</status><error id='error'>dati Lista non validi</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false; 
        }

        if(!$object->AddNewLista($lista,$coalizione,$this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nel salvataggio della lista. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        if($compliance) $sTaskLog.= "Lista aggiunta con successo.";
        else $sTaskLog.= "Lista aggiunta con successo. Immagine non salvata in quanto non conforme alle specifiche.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task aggiorna Lista
    public function Task_UpdateSierLista($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $fileUpload = AA_SessionFileUpload::Get("UpdateListaImage");

        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }            
            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }

        //Verifica coalizione
        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $task->SetError("Coalizione non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Coalizione non valida</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }

        //verifica lista
        $liste=$coalizione->GetListe();
        if(!($liste[$_REQUEST['id_lista']] instanceof AA_SierLista))
        {
            $task->SetError("Lista non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Lista non valida</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }

        $lista=$liste[$_REQUEST['id_lista']];

        $imageFileHash=$lista->GetProp("image");
        $compliance=true;
        
        if($fileUpload->isValid())
        {   
            $file=$fileUpload->GetValue();

            //Verifica che l'immagine rispetti le specifiche (png o jpg, 1mb max)
            if($file['type'] != "image/png" && ($file['type'] != "image/jpeg" && $file['type'] != "image/jpg"))
            {
                $compliance=false;
            }

            if(filesize($file['tmp_name']) > 1024*1024)
            {
                $compliance=false;
            }

            if($compliance)
            {
                //salva l'immagine della lista
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    if($lista->GetProp('image') !="")
                    {
                        $oldFile=$storage->GetFileByHash($lista->GetProp('image'));
                        if($oldFile->IsValid())
                        {
                            $storage->DelFile($oldFile);
                        }
                    }
    
                    $storageFile=$storage->AddFile($file['tmp_name'],$file['name'],$file['type'],1);
                    if(!$storageFile->isValid())
                    {
                        AA_Log::Log(__METHOD__." - Errore durante il salvataggio del file nello storage, immagine non salvata. ".print_r($storageFile,true),100);
                    }
                    else $imageFileHash=$storageFile->GetFileHash();
                }
                else AA_Log::Log(__METHOD__." - Storage non valido, immagine non salvata",100);
            }

            //elimina il file temporaneo (se presente)
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                }
            }
        }

        $params=array(
            'id'=>$lista->GetProp('id'),
            'id_coalizione'=>$coalizione->GetProp('id'),
            'denominazione'=>$_REQUEST['denominazione'],
            'image'=>$imageFileHash
        );
         
        foreach(AA_Sier_Const::GetCircoscrizioni() as $key=>$val)
        {
            $params["ordine_".$key]=0;
            if(isset($_REQUEST['ordine_'.$key])) $params['ordine_'.$key]=$_REQUEST['ordine_'.$key];
        }

        $lista=new AA_SierLista($params);
        if(!($lista instanceof AA_SierLista))
        {
            $task->SetError("dati Lista non validi");
            $sTaskLog="<status id='status'>-1</status><error id='error'>dati Lista non validi</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false; 
        }

        //AA_Log::Log(__METHOD__." - lista: ".print_r($lista,true),100);

        if(!$object->UpdateLista($lista,$coalizione,$this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nel salvataggio della lista. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        if($compliance) $sTaskLog.= "Lista aggiornata con successo.";
        else $sTaskLog.= "Lista aggiornata con successo. Immagine non salvata in quanto non conforme alle specifiche.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task Aggiungi coalizione
    public function Task_AddNewSierCoalizione($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $fileUpload = AA_SessionFileUpload::Get("NewCoalizioneImage");

        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }            
            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetProp("estremi")."</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
            return false;            
        }
        
        $imageFileHash="";
        $compliance=true;
        
        if($fileUpload->isValid())
        {   
            $file=$fileUpload->GetValue();

            //Verifica che l'immagine rispetti le specifiche (png o jpg, 1mb max)
            if($file['type'] != "image/png" && ($file['type'] != "image/jpeg" && $file['type'] != "image/jpg"))
            {
                $compliance=false;
            }

            if(filesize($file['tmp_name']) > 1024*1024)
            {
                $compliance=false;
            }

            if($compliance)
            {
                //salva l'immagine della coalizione
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    $storageFile=$storage->AddFile($file['tmp_name'],$file['name'],$file['type'],1);
                    if(!$storageFile->isValid())
                    {
                        AA_Log::Log(__METHOD__." - Errore durante il salvataggio del file nello storage, immagine non salvata. ".print_r($storageFile,true),100);
                    }
                    else $imageFileHash=$storageFile->GetFileHash();
                }
                else AA_Log::Log(__METHOD__." - Storage non valido, immagine non salvata",100);
            }

            //elimina il file temporaneo (se presente)
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                }
            }
        }
        
        $id_sier=$object->GetIdData();
        if($object->GetIdDataRev() > 0)
        {
            $id_sier=$object->GetIdDataRev();
        }
        
        //Nuova coalizione
        $params=array(
            'id_sier'=>$id_sier,
            'denominazione'=>$_REQUEST['denominazione'],
            'nome_candidato'=>$_REQUEST['nome_candidato'],
            'image'=>$imageFileHash
        );

        $newCoalizione=new AA_SierCoalizioni($params);

        if(!$object->AddNewCoalizione($newCoalizione, $this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nel salvataggio della coalizione. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        if($compliance) $sTaskLog.= "Coalizione aggiunta con successo.";
        else $sTaskLog.= "Coalizione aggiunta con successo. Immagine non salvata in quanto non conforme alle specifiche.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task aggiorna coalizione
    public function Task_UpdateSierCoalizione($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        $fileUpload = AA_SessionFileUpload::Get("NewCoalizioneImage");

        if(!$object->isValid())
        {
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }

            return false;
        }
        
        if($object->IsReadOnly())
        {
            $task->SetError("L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->Getid());
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente (".$this->oUser->GetNome().") non ha i privileggi per modificare l'elemento: ".$object->GetId()."</error>";
            $task->SetLog($sTaskLog);
            
            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }

            return false;            
        }
        
        if(!isset($_REQUEST['id_coalizione']) || $_REQUEST['id_coalizione'] == "")
        {
            $task->SetError("Coalizione non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }

            return false;            
        }

        $params=array("id_coalizione"=>$_REQUEST['id_coalizione']);
        $coalizioni=$object->GetCoalizioni($params);
        //AA_Log::Log(__METHOD__." - coalizioni: ".print_r($coalizioni,true),100);

        if(sizeof($coalizioni)==0)
        {
            $task->SetError("Coalizione non valida");
            $sTaskLog="<status id='status'>-1</status><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($fileUpload->isValid())
            {   
                $file=$fileUpload->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }

            return false; 
        }

        $coalizione=$coalizioni[$_REQUEST['id_coalizione']];
        //AA_Log::Log(__METHOD__." - curCoalizione: ".print_r($coalizione,true),100);
        $imageFileHash="";

        $fileUpload = AA_SessionFileUpload::Get("NewCoalizioneImage");
        $compliance=true;
        if($fileUpload->isValid())
        {   
            $file=$fileUpload->GetValue();
            $imageFileHash=hash_file("sha256",$file['tmp_name']);
            
            //Verifica che l'immagine rispetti le specifiche (png o jpg, 1mb max)
            if($file['type'] != "image/png" && ($file['type'] != "image/jpeg" && $file['type'] != "image/jpg"))
            {
                AA_Log::Log(__METHOD__." - tipo file non conforme: ".$file['type'],100);
                $compliance=false;
            }

            if(filesize($file['tmp_name']) > 1024*1024)
            {
                AA_Log::Log(__METHOD__." - dimensione file non conforme: ".$file['size'],100);
                $compliance=false;
            }

            //Verifica che l'immagine sia cambiata
            if($coalizione->GetProp("image") == $imageFileHash)
            {
                AA_Log::Log(__METHOD__." - i file sono uguali: old: ".$coalizione->GetProp("image")." - new: ".$imageFileHash,100);
                $compliance=false;
            }

            if($compliance)
            {
                //salva l'immagine della coalizione
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    //Elimina l'immagine precedente
                    if($coalizione->GetProp("image") !="")
                    {
                        $oldImage=$storage->GetFileByHash($coalizione->GetProp("image"));
                        if($oldImage->IsValid())
                        {
                            if(!$storage->DelFile($oldImage))
                            {
                                AA_Log::Log(__METHOD__." - Errore durante la cancellazione della vecchia immagine. ".print_r($oldImage,true),100);

                                return false;
                            }
                        }
                    }

                    $storageFile=$storage->AddFile($file['tmp_name'],$file['name'],$file['type'],1);
                    if(!$storageFile->isValid())
                    {
                        AA_Log::Log(__METHOD__." - Errore durante il salvataggio del file nello storage, immagine non salvata. ".print_r($storageFile,true),100);
                    }
                    else
                    {
                        $imageFileHash=$storageFile->GetFileHash();
                    }
                    
                }
                else AA_Log::Log(__METHOD__." - Storage non valido, immagine non cambiata",100);
            }
            else $imageFileHash="";

            //elimina il file temporaneo (se presente)
            if(file_exists($file['tmp_name']))
            {
                //AA_Log::Log(__METHOD__." - Elimino il file temporaneo. ".$file['tmp_name'],100);
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                }
            }
        }
        
        $id_sier=$object->GetIdData();
        if($object->GetIdDataRev() > 0)
        {
            $id_sier=$object->GetIdDataRev();
        }

        //Nuova coalizione

        $params=array(
            'id'=>$_REQUEST['id_coalizione'],
            'id_sier'=>$id_sier,
            'denominazione'=>$_REQUEST['denominazione'],
            'nome_candidato'=>$_REQUEST['nome_candidato'],
            'cv'=>$coalizione->GetProp("cv"),
            'cg'=>$coalizione->GetProp("cg"),
            'ordine'=>$_REQUEST['ordine']
        );

        $params['image'] = $imageFileHash;
        if($imageFileHash == "") $params['image']=$coalizione->GetProp('image');

        $newCoalizione=new AA_SierCoalizioni($params);
        //AA_Log::Log(__METHOD__." - newCoalizione: ".print_r($newCoalizione,true),100);

        if(!$object->UpdateCoalizione($newCoalizione, $this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento della coalizione. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        if($compliance) $sTaskLog.= "Coalizione aggiornata con successo.";
        else $sTaskLog.= "Coalizione aggiornata con successo. Immagine non modificata.";
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task elimina coalizione
    public function Task_DeleteSierCoalizione($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<=0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
 
        if(!$object->DeleteCoalizione($_REQUEST['id_coalizione'],$this->oUser))
        {   
            $task->SetError("Errore durante l'eliminazione della coalizione: ".$_REQUEST['id_coalizione']);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore durante l'eliminazione della coalizione: ".$_REQUEST['id_coalizione']."</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Coalizione eliminata con successo.";
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task elimina lista
    public function Task_DeleteSierLista($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<=0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
 
        if(!$object->DeleteLista($_REQUEST['id_lista'],$_REQUEST['id_coalizione'],$this->oUser))
        {   
            $task->SetError("Errore durante l'eliminazione della lista: ".$_REQUEST['id_lista']);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore durante l'eliminazione della lista: ".$_REQUEST['id_coalizione']."</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Lista eliminata con successo.";
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Template dlg modify sier
    public function Template_GetSierModifyDlg($object=null)
    {
        $id=$this->GetId()."_Modify_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica i dati generali", $this->id);

        $form_data['id']=$object->GetID();
        $form_data['nome']=$object->GetName();
        $form_data['descrizione']=$object->GetDescr();

        $flags=$object->GetAbilitazioni();
        foreach(AA_Sier_Const::GetFlags() as $key=>$value)
        {
            if(($flags & $key) >0) $form_data[$key]=1;
            else $form_data[$key] = 0;
        }

        foreach($object->GetDbBindings() as $prop=>$field)
        {
            $form_data[$prop]=$object->GetProp($prop);
        }
        
        $wnd=new AA_GenericFormDlg($id, "Modifica i dati generali", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(1024);
        $wnd->SetHeight(640);
        
        $anno_fine=date("Y")+5;
        $anno_start=($anno_fine-10);
        //anno riferimento
        $options=array();
        for($i=$anno_fine; $i>=$anno_start; $i--)
        {
            $options[]=array("id"=>$i, "value"=>$i);
        }
        $wnd->AddSelectField("Anno","Anno",array("required"=>true,"width"=>200,"validateFunction"=>"IsSelected","tooltip"=>"*Indicare l'anno in cui si dovrebbero svolgere le elezioni.", "placeholder"=>"...","options"=>$options));

        //titolo
        $wnd->AddTextField("nome","Titolo",array("required"=>true, "bottomLabel"=>"*Inserisci il titolo.", "placeholder"=>"es. Nuove elezioni regionali..."),false);

        //Descrizione
        $label="Descrizione";
        $wnd->AddTextareaField("descrizione",$label,array("bottomLabel"=>"*Breve descrizione.", "placeholder"=>"Inserisci qui la descrizione..."));

        //Note
        $label="Note";
        $wnd->AddTextareaField("Note",$label,array("bottomLabel"=>"*Eventuali annotazioni.", "placeholder"=>"Inserisci qui le note..."));

        $abilitazioni = new AA_FieldSet("AA_SIER_ABILITAZIONI","Abilitazioni");

        //Accesso operatori
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_ACCESSO_OPERATORI,"Accesso operatori",array("onLabel"=>"Abilitato","labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Stato accesso operatori comunali."));

        //rendicontazione
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI,"Rendiconti",array("onLabel"=>"Abilitato","labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Stato caricamento rendiconti."),false);

        //Modifica info generali
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_DATIGENERALI,"Info generali",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita la modifica info generali del comune."));

        //Caricamento corpo elettorale
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_CORPO_ELETTORALE,"Corpo elettorale",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dati corpo elettorale."),false);

        //comunicazioni
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI,"Comunicazioni",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento delle comunicazioni."));

        //Affluenza
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_AFFLUENZA,"Affluenza",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dell'affluenza."),false);

        //Risultati
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI,"Risultati",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita il caricamento dei risultati."));

        //esportazione Affluenza
        //$abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_EXPORT_AFFLUENZA,"Esporta affluenza",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita l'esportazione dell'affluenza."));

        //esportazione Risultati
        $abilitazioni->AddSwitchBoxField(AA_Sier_Const::AA_SIER_FLAG_EXPORT_RISULTATI,"Esporta risultati",array("onLabel"=>"Abilitato","bottomPadding"=>28,"labelWidth"=>150,"offLabel"=>"Disabilitato","bottomLabel"=>"*Abilita/disabilita l'esportazione dei risultati."),false);

        $wnd->AddGenericObject($abilitazioni);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("UpdateSier");
        
        return $wnd;
    }  

    //Template dlg tools
    public function Template_GetSierControlPannelDlg($object=null)
    {
        $id=$this->GetId()."_ControlPannel_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Pannello di controllo", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();

        $cp=$object->GetControlPannel();

        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $section=new AA_FieldSet($id."_Section_CP","Opzioni di esportazione dei risultati comunali sul feed pubblico generale","",2);

            $form_data['risultati_scrutinio_parziale_check']=0;
            if(isset($cp['risultati_scrutinio_parziale_check']) && $cp['risultati_scrutinio_parziale_check']>0)$form_data['risultati_scrutinio_parziale_check']=$cp['risultati_scrutinio_parziale_check'];
            $section->AddSwitchBoxField("risultati_scrutinio_parziale_check","Risultati con scrutinio parziale",array("onLabel"=>"includi nel feed","offLabel"=>"escludi dal feed","labelWidth"=>400));
            
            $form_data['risultati_voti_presidente_check']=0;
            if(isset($cp['risultati_voti_presidente_check']) && $cp['risultati_voti_presidente_check']>0)$form_data['risultati_voti_presidente_check']=$cp['risultati_voti_presidente_check'];
            $section->AddSwitchBoxField("risultati_voti_presidente_check","Risultati con criticità sui voti Presidente",array("onLabel"=>"includi nel feed","offLabel"=>"escludi dal feed","labelWidth"=>400));
    
            $form_data['risultati_voti_lista_check']=0;
            if(isset($cp['risultati_voti_lista_check']) && $cp['risultati_voti_lista_check']>0)$form_data['risultati_voti_lista_check']=$cp['risultati_voti_lista_check'];
            $section->AddSwitchBoxField("risultati_voti_lista_check","Risultati con criticità sui voti di Lista",array("onLabel"=>"includi nel feed","offLabel"=>"escludi dal feed","labelWidth"=>400));
    
            $form_data['risultati_voti_candidato_check']=0;
            if(isset($cp['risultati_voti_candidato_check']) && $cp['risultati_voti_candidato_check']>0)$form_data['risultati_voti_candidato_check']=$cp['risultati_voti_candidato_check'];
            $section->AddSwitchBoxField("risultati_voti_candidato_check","Risultati con criticità sui voti candidato Consigliere",array("onLabel"=>"includi nel feed","offLabel"=>"escludi dal feed","labelWidth"=>400));
    
            $form_data['finestra_temporale_cert_corpo_elettorale']=0;
            if(isset($cp['finestra_temporale_cert_corpo_elettorale']) && $cp['finestra_temporale_cert_corpo_elettorale']>0)$form_data['finestra_temporale_cert_corpo_elettorale']=$cp['finestra_temporale_cert_corpo_elettorale'];
    
            $form_data['abilita_cert_corpo_elettorale']=0;
            if(isset($cp['abilita_cert_corpo_elettorale']) && $cp['abilita_cert_corpo_elettorale']>0)$form_data['abilita_cert_corpo_elettorale']=$cp['abilita_cert_corpo_elettorale'];

            $form_data['url_feed_risultati']="";
            if(isset($cp['url_feed_risultati']) && $cp['url_feed_risultati']>0)$form_data['url_feed_risultati']=$cp['url_feed_risultati'];    
            $section->AddTextField("url_feed_risultati","Url pubblico feed risultati",array("labelWidth"=>190));
        }
      
        $wnd=new AA_GenericFormDlg($id, "Pannello di controllo", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(800);
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $wnd->SetHeight(920);
            $wnd->SetWidth(1280);
            $wnd->AddGenericObject($section);

            //QR Code Web APP
            $section=new AA_FieldSet($id."_Section_CP_QRCode","QR Code Web APP","",1);
            if($cp['sierwebappqrcode']=="")
            {
                $section->AddGenericObject(new AA_JSON_Template_Template($id."_WebAppQrCodeImg",array("borderless"=>true,"template"=>"<div style='width:100%;height:100%; display:flex;justify-content:center;align-items:center'>QR Code non impostato.</div>")));
                $section->AddFileUploadField("SierWebAppQRCode_file","Scegli l'immagine del QR code per l'app", array("bottomLabel"=>"*Caricare solo immagini in formato png o jpg (dimensione max: 1Mb).","accept"=>"image/png"));
            }
            else
            {
                $btn=new AA_JSON_Template_Generic($id."_DeleteQRCodeImg_btn",array(
                    "view"=>"button",
                    "type"=>"icon",
                    "icon"=>"mdi mdi-trash-can",
                    "label"=>"Elimina",
                    "align"=>"right",
                    "tooltip"=>"Rimuovi il QR code",
                    "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmTrashWebAppQRCodeDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
                ));
                $section->AddGenericObject(new AA_JSON_Template_Template($id."_WebAppQrCodeImg",array("borderless"=>true,"template"=>"<div style='width:100%;height:100%; display:flex;justify-content:center;align-items:center;flex-direction:column'><div style='text-align:center; width:80%;height:100%;'><img src='".AA_Const::AA_WWW_ROOT."/storage.php?object=".$cp['sierwebappqrcode']."' style='height:100%' /></div></div>")));
                $section->AddGenericObject($btn);
                $section->AddFileUploadField("SierWebAppQRCode_file","Cambia l'immagine del QR code per l'app", array("bottomLabel"=>"*Caricare solo immagini in formato png o jpg (dimensione max: 1Mb).","accept"=>"image/png"));
            }

            $wnd->SetFileUploaderId($id."_Section_CP_QRCode_FileUpload_Field");
            $wnd->AddGenericObject($section,false);

            //Reset dati comuni
            $section=new AA_FieldSet($id."_Section_CP_ResetComuni","Reset dati dei Comuni");
            //Reset Comunicazioni
            $btn=new AA_JSON_Template_Generic($id."_ResetComunicazioniComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Comunicazioni",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Reimposta i dati delle comunicazioni di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmResetComunicazioniComuniDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn);
            $section->AddSpacer(false);

            //Reset Affluenza
            $btn=new AA_JSON_Template_Generic($id."_ResetAffluenzaComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Affluenza",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Reimposta i dati dell'affluenza di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmResetAffluenzaComuniDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn,false);
            $section->AddSpacer(false);

            //Reset Risultati
            $btn=new AA_JSON_Template_Generic($id."_ResetRisultatiComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Risultati",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Reimposta i dati dei risultati di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmResetRisultatiComuniDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn,false);
            $section->AddSpacer(false);

            //Reset feed Risultati
            $btn=new AA_JSON_Template_Generic($id."_ResetFeedRisultatiComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Feed Risultati",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Reimposta il feed dei risultati di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmResetFeedRisultatiComuniDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn,false);

            if($this->oUser->IsSuperUser()) $wnd->AddGenericObject($section);

            //Aggiorna feed comuni
            $section=new AA_FieldSet($id."_Section_CP_UpdateFeed","Aggiornamento dati Comuni e feed");
            
            //Update feed Risultati
            $btn=new AA_JSON_Template_Generic($id."_UpdateFeedRisultatiComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Feed Risultati",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Aggiorna il feed dei risultati di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmUpdateFeedRisultatiComuniDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn);
            $section->AddSpacer(false);

            //Update analisi Risultati
            $btn=new AA_JSON_Template_Generic($id."_UpdateAnalisiRisultatiComuni_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Analisi risultati",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Aggiorna l'analisi dei risultati di tutti i Comuni",
                "click"=>"AA_MainApp.utils.callHandler('doTask', {task:\"UpdateAnalisiRisultatiComuni\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn,false);
            $section->AddSpacer(false);

            //Update feed Risultati generali
            $btn=new AA_JSON_Template_Generic($id."_UpdateFeedRisultatiGenerali_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-reload-alert",
                "label"=>"Feed pubblico",
                "align"=>"right",
                "width"=>150,
                "tooltip"=>"Aggiorna il feed pubblico dei risultati",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmUpdateFeedRisultatiGeneraliDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $section->AddGenericObject($btn,false);

            if($this->oUser->IsSuperUser()) $wnd->AddGenericObject($section);
        }
        else
        {
            $wnd->SetHeight(420);
        }

        $section=new AA_FieldSet($id."_Section_CP_ExportComuni","Export dati dei Comuni");
        //dati
        $btn=new AA_JSON_Template_Generic($id."_ExportDatiComuni_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Tutto",
            "align"=>"right",
            "width"=>150,
            "tooltip"=>"Esporta tutti i dati di tutti i Comuni in formato csv",
            "click"=>"AA_MainApp.utils.callHandler('ExportCorpoElettoraleCSV', {task:\"ExportDatiComuniCSV\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $section->AddGenericObject($btn);
        $section->AddSpacer(false);
        
        //operatori
        $btn=new AA_JSON_Template_Generic($id."_ExportOperatoriComuni_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Operatori",
            "align"=>"right",
            "width"=>150,
            "tooltip"=>"Esporta gli operatori di tutti i Comuni in formato csv",
            "click"=>"AA_MainApp.utils.callHandler('ExportOperatoriComunali', {task:\"GetSierOCEmailsCSV\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $section->AddGenericObject($btn,false);
        $section->AddSpacer(false);

        //corpo elettorale
        $btn=new AA_JSON_Template_Generic($id."_ExportCorpoElettoraleComuni_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Corpo Elettorale",
            "align"=>"right",
            "width"=>150,
            "tooltip"=>"Esporta i dati del corpo elettorale di tutti i Comuni in formato csv",
            "click"=>"AA_MainApp.utils.callHandler('ExportCorpoElettoraleCSV', {task:\"ExportCorpoElettoraleComuniCSV\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));

        $section->AddGenericObject($btn,false);
        $section->AddSpacer(false);

        //Esportazioni servizio elettorale
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Varie...",
            "align"=>"right",
            "width"=>150,
            "tooltip"=>"Esporta i dati dei comuni in formato CSV definito dall'ufficio elettorale",
            "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierExportDatiServizioElettoraleDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $section->AddGenericObject($btn,false);
        $section->AddSpacer(false);
        
        $wnd->AddGenericObject($section);

        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            //rendiconti
            $section=new AA_FieldSet($id."_Section_CP_Rendiconti","Sorteggio dei Comuni per la verifica dei rendiconti");
            if(isset($cp['estrazione_comuni']))
            {
                $btn=new AA_JSON_Template_Generic("",array(
                    "view"=>"button",
                    "type"=>"icon",
                    "icon"=>"mdi mdi-eye",
                    "label"=>"consulta il risultato del sorteggio",
                    "align"=>"right",
                    "width"=>280,
                    "tooltip"=>"Consulta il documento relativo all'estrazione dei comuni sorteggiati per il controllo della rendicontazione.",
                    "click"=>'AA_MainApp.utils.callHandler("pdfPreview", { url: "'.AA_Const::AA_WWW_ROOT."/storage.php?object=".$cp['estrazione_comuni'].'" }, "'.$this->GetId().'");'
                ));

                $section->AddGenericObject($btn);
                $section->AddSpacer(false);

                $btn=new AA_JSON_Template_Generic("",array(
                    "view"=>"button",
                    "type"=>"icon",
                    "icon"=>"mdi mdi-trash-can",
                    "label"=>"rimuovi",
                    "align"=>"right",
                    "width"=>150,
                    "tooltip"=>"Elimina il documento relativo all'estrazione dei comuni sorteggiati per il controllo della rendicontazione.",
                    "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierConfirmDeleteSorteggioDocDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
                ));
                $section->AddGenericObject($btn,false);
            }
            else
            {
                $btn=new AA_JSON_Template_Generic("",array(
                    "view"=>"button",
                    "type"=>"icon",
                    "icon"=>"mdi mdi-dice-multiple",
                    "label"=>"effettua il sorteggio dei comuni",
                    "align"=>"right",
                    "width"=>280,
                    "tooltip"=>"Effettua l'estrazione dei comuni sorteggiati per il controllo della rendicontazione.",
                    "click"=>"AA_MainApp.utils.callHandler('doTask', {task:\"DoSorteggioComuniRendicontazione\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
                ));

                $section->AddGenericObject($btn);
                $section->AddSpacer(false);
            }
            
            $wnd->AddGenericObject($section,false);
        }

        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $section=new AA_FieldSet($id."_Section_CP_Corpoelettorale","Opzioni corpo elettorale");
            $section->AddSwitchBoxField("abilita_cert_corpo_elettorale","Certificazione del corpo elettorale",array("labelWidth"=>360,"onLabel"=>"abilitata","offLabel"=>"disabilitata","bottomLabel"=>"Abilita/Disabilita la certificazione del corpo elettorale da parte dei comuni.","bottomPadding"=>32));
            $section->AddTextField("finestra_temporale_cert_corpo_elettorale","Finestra temporale per la modifica del corpo elettorale",array("labelWidth"=>360,"bottomLabel"=>"Inserire il numero di giorni per i quali è possible modificare il corpo elettorale (0 = senza limiti temporali).","bottomPadding"=>42));
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet($id."_Section_CP_StatusUpdateFeed","Stato aggiornamento automatico feed pubblici");
            $update_time_mini="n.d.";
            $update_time="n.d.";
            if(is_file("/var/log/sier_autoupdate_mini.log")) 
            {
                $update_log=json_decode(file_get_contents("/var/log/sier_autoupdate_mini.log"),true);
                if(is_array($update_log))
                {
                    if($update_log['status']==1) $update_time_mini=$update_log['time'];
                    else $update_time_mini="aggiornamento manuale";
                } 
            }
            else
            {
                AA_Log::Log(__METHOD__." - file log non trovato.",100);
            }
            if(is_file("/var/log/sier_autoupdate.log")) 
            {
                $update_log=json_decode(file_get_contents("/var/log/sier_autoupdate.log"),true);
                if(is_array($update_log))
                {
                    if($update_log['status']==1) $update_time=$update_log['time'];
                    else $update_time="aggiornamento manuale";
                } 
            }
            else
            {
                AA_Log::Log(__METHOD__." - file log non trovato.",100);
            }
            $section->AddGenericObject(new AA_JSON_Template_Template($id."_LastUpdateFeedPubblic",array("borderless"=>true,"template"=>"<div style='display: flex; justify-content: space-evenly; align-items: center'><div style='width: 80%'><b>Data e ora ultimo aggiornamento (mini)</b>:</div><div style='text-align: right'>#update_time#</div></div>","data"=>array("update_time"=>$update_time_mini))));
            $section->AddGenericObject(new AA_JSON_Template_Template($id."_LastUpdateFeedPubblic",array("borderless"=>true,"template"=>"<div style='display: flex; justify-content: space-evenly; align-items: center'><div style='width: 80%'><b>Data e ora ultimo aggiornamento (esteso)</b>:</div><div style='text-align: right'>#update_time#</div></div>","data"=>array("update_time"=>$update_time))));
            $wnd->AddGenericObject($section,false);
        }

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetSaveTask("UpdateSierControlPannel");
        
        return $wnd;
    }

    //Template dlg tools
    public function Template_GetSierExportDatiServizioElettoraleDlg($object=null)
    {
        $id=$this->GetId()."_ExportCSV_ServiziElettorali_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Esportazione in CSV", $this->id);

        $wnd=new AA_GenericWindowTemplate($id, "Esportazione in CSV", $this->id);

        $wnd->SetWidth(500);
        $wnd->SetHeight(300);

        $wnd->AddView(new AA_JSON_Template_Generic());
     
        //Esportazioni risultati regionali
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Risultati Regionali",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Risultati Regionali",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_Regionale\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());
        
        //Esportazioni risultati circoscrizionali
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Risultati Circoscrizionali",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Risultati circoscrizionali",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_Circoscrizionale\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());

        //Esportazioni risultati comunali
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Risultati Comunali",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Risultati comunali",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_Comunale\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());

        //Esportazioni preferenze circoscrizionali
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Preferenze per circoscrizione",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Preferenze ",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_PreferenzeCircoscrizionali\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());

        //Esportazioni preferenze per comune
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Preferenze per comune",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Preferenze per comune",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_PreferenzeComunali\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());

        //Esportazioni dati sui votanti per comune
        $btn=new AA_JSON_Template_Generic("",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Dati sui votanti",
            "align"=>"right",
            "width"=>350,
            "tooltip"=>"Preferenze per comune",
            "click"=>"AA_MainApp.utils.callHandler('ExportDatiServizioElettoraleCSV', {task:\"ExportDatiComuniCSV_Votanti\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $wnd->AddView($btn);
        $wnd->AddView(new AA_JSON_Template_Generic());

        return $wnd;
    }

    //Template pdf sorteggio comuni
    protected function Template_BuildSorteggioComuniRendicontazione($object=null)
    {
        include_once "pdf_lib.php";

        $count = 1;

        $rowsForPage=1;
        $vociIndice=array(
            0=>"Estrazione"
        );

        //nome file
        $filename = "estrazione";
        $filename .= "-" . date("YmdHis");
        $doc = new AA_PDF_RAS_TEMPLATE_A4_PORTRAIT($filename);

        $doc->SetHeaderHeight("25mm");
        $doc->SetDocumentStyle("font-family: sans-serif; font-size: 3mm;");
        $doc->SetPageCorpoStyle("display: flex; flex-direction: column; justify-content: space-between; padding:0;");
        $curRow = 0;
        $rowForPage = $rowsForPage;
        $lastRow = $rowForPage - 1;
        $curPage = null;
        $curPage_row = "";
        $curNumPage = 0;
        $maxItemHeight=intval(100/$rowsForPage);
        //$columns_width=array("titolare"=>"10%","incarico"=>"8%","atto"=>"10%","struttura"=>"28%","curriculum"=>"10%","art20"=>"12%","altri_incarichi"=>"10%","1-ter"=>"10%","emolumenti"=>"10%");
        //$columns_width=array("dal"=>"10%","al"=>"10%","inconf"=>"10%","incomp"=>"10%","anno"=>"25%","titolare"=>"50%","tipo_incarico"=>"10%","atto_nomina"=>"10%","struttura"=>"40%","curriculum"=>"25%","altri_incarichi"=>"25%","1-ter"=>"25%","emolumenti"=>"10%");
        $rowContentWidth = "width: 99.8%;";

        if ($count > 1) 
        {
            //pagina di intestazione (senza titolo)
            $curPage = $doc->AddPage();
            $curPage->SetCorpoStyle("display: flex; flex-direction: column; justify-content: center; align-items: center; padding:0;");
            $curPage->SetFooterStyle("border-top:.2mm solid black");
            $curPage->ShowPageNumber(false);

            //Intestazione
            $intestazione = "<div style='width: 100%; text-align: center; font-size: 28; font-weight: bold; margin-bottom: 2em;'>Titolo</div>";
            $intestazione .= "<div style='width: 100%; text-align: center; font-size: x-small; font-weight: normal;margin-top: 3em;'>documento generato il " . date("Y-m-d") . "</div>";
            
            $curPage->EnableFooter(true);
            $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>seriale: ".$serial." </div>");
            $curPage->SetContent($intestazione);
            $curNumPage++;

            $doc->SetTitle("<div style='display:flex;justify-content:space-around;align-items:center;flex-direction:column; height:70%;width:100%;padding-top: 1em'><span style='font-size:18px'>Comune di ".$comune->GetProp("denominazione")."</span><hr style='width:25%'><div><span>".$title."</span><br><span style='font-weight:normal; font-size:smaller'>" . $object->GetName()."</span></div></div>");
            if($index)
            {
                //pagine indice (50 nominativi per pagina)
                $indiceNumVociPerPagina = 20;
                for ($i = 0; $i < $count / $indiceNumVociPerPagina; $i++) 
                {
                    $curPage = $doc->AddPage();
                    $curPage->SetCorpoStyle("display: flex; flex-direction: column; padding:0;");
                    $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>seriale: ".$serial." - documento generato il " . date("Y-m-d")."</div>");
                    $curNumPage++;
                }
            }
            $curPage=null;
            #---------------------------------------
        }

        //Imposta il titolo per le pagine successive
        
        $doc->SetTitle("SIER (Sistema Informativo Elettorale Regionale)");

        $indice = array();
        $lastPage = $count / $rowForPage + $curNumPage;

        //Rendering pagine
        for($i=0;$i<$count;$i++)
        {
            //inizia una nuova pagina (intestazione)
            if ($curRow == $rowForPage) $curRow = 0;
            if ($curRow == 0) {
                $border = "";
                if ($curPage != null) 
                {
                    if($curPage_row !="")
                    {
                        $curPage->SetContent($curPage_row);
                        $curPage = $doc->AddPage();
                        $curNumPage++;
                        $curPage_row="";
                    }
                }
                else 
                {
                    $curPage_row="";
                    $curPage = $doc->AddPage();
                    $curNumPage++;
                }
                
                $curPage->SetCorpoStyle("display: flex; flex-direction: column;  justify-content: flex-start; padding:0;");
                $curPage_row = "";
            }

            if($i<3) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==4) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==(4+$numPagineRendicontiAssunzioni)) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==(4+$numPagineRendicontiAssunzioni+1)) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];

            $curPage_row .= "<div id='".$i."' style='display:flex;  flex-direction: column; width: 99.8%; height:100%; align-items: center; text-align: center; padding: 0mm; margin-top: 2mm; min-height: 9mm; max-height:".$maxItemHeight."%; overflow: hidden;'>";

            //---------------------------------------- Estrazione ----------------------------------------------
            if($i==0)
            {
                $curPage_row.= "<div style='width: 100%; font-weight:bold; font-size:18px'>".$object->GetName()."</div>";
                $curPage_row.= "<div style='width: 100%; font-size:14px; margin-top:1em;'>Risultato del sorteggio dei comuni che dovranno inviare la documentazione giustificativa delle spese</div>";
                $curPage_row.=$this->Template_RngEstrazionePage($object);
            }
            //-------------------------------------------------------------------------------------------------

            $curPage_row .= "</div>";
            $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>documento generato il " . date("d-m-Y")."</div>");
            $curRow++;
        }
        if ($curPage != null) $curPage->SetContent($curPage_row);
        #-----------------------------------------

        if ($count > 1 && $index) 
        {
            //Aggiornamento indice
            $curNumPage = 1;
            $curPage = $doc->GetPage($curNumPage);
            $vociCount = 0;
            $curRow = 0;
            $bgColor = "";
            $curPage_row = "";

            foreach ($indice as $id => $data) 
            {
                if ($curNumPage != (int)($vociCount / $indiceNumVociPerPagina) + 1) {
                    $curPage->SetContent($curPage_row);
                    $curNumPage = (int)($vociCount / $indiceNumVociPerPagina) + 1;
                    $curPage = $doc->GetPage($curNumPage);
                    $curRow = 0;
                    $bgColor = "";
                }

                //$indexBgColor = "#f5f5f5";
                $indexBgColor = "#fff";
                if ($curPage instanceof AA_PDF_Page) 
                {
                    //Intestazione
                    if ($curRow == 0) $curPage_row = "<div style='width:100%;text-align: center; font-size: larger; font-weight: bold; border-bottom: 1px solid #dedede; margin-bottom: .5em; margin-top: .3em;'>Indice</div>";
                    if ($curRow % 2) $bgColor = "background-color:$indexBgColor;";
                    else $bgColor = "";
                    $curPage_row .= "<div style='display:flex; " . $rowContentWidth . " align-items: center; justify-content: space-between; font-size:larger; padding: .3mm; min-height: 9mm;" . $bgColor . "'>";
                    $dati = explode("|", $data);
                    $curPage_row .= "<div style='width:90%;text-align: left;padding-left: 10mm'><a style='text-decoration: none' href='#" . $id . "'>" . $dati['1'] . "</a></div><div style='width:9%;text-align: right;padding-right: 10mm'><a style='text-decoration: none' href='#" . $id . "'>pag. " . $dati[0] . "</a></div>";
                    $curPage_row .= "</div>";

                    //ultima voce
                    if ($vociCount == (sizeof($indice) - 1)) 
                    {
                        $curPage->SetContent($curPage_row);
                    }
                    $curRow++;
                }

                $vociCount++;
            }
        }

        if(!$doc->Render(false))
        {
            AA_Log::Log(__METHOD__." -  errore durante la generazione del report.",100);
        }
        else
        {
            $filePath=$doc->GetFilePath();
            //AA_Log::Log(__METHOD__." -  filePath: ".$filePath,100);    
        }

        $storage=AA_Storage::GetInstance($this->oUser);
        if($storage->IsValid())
        {
            $file=$storage->AddFile($filePath,"estrazione_comuni_".date("Ymd"),"application/pdf",1);
            
            //elimina il file temporaneo
            if(is_file($doc->GetFilePath()))
            {
                unlink($doc->GetFilePath());
            }

            if($file->IsValid()) return $file;
            else
            {
                AA_Log::Log(__METHOD__." -  errore nella generazione del file relativo all'estrazione.",100);
                return false;
            }
        }
        else
        {
            AA_Log::Log(__METHOD__." -  storage non abilitato.",100);
            return false;
        }
    }

    public function Template_RngEstrazionePage($object=null)
    {
        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $start=0;
        $end=$start+100;
        $count=1;
        
        //costruisce la lista dei comuni
        $comuni=$object->GetComuni();
        $comuniCircoscrizione=array();
        foreach($comuni as $id=>$curComune)
        {
            if(!isset($comuniCircoscrizione[$curComune->GetProp('id_circoscrizione')])) $comuniCircoscrizione[$curComune->GetProp('id_circoscrizione')]=array();
            $comuniCircoscrizione[$curComune->GetProp('id_circoscrizione')][]=$id;
        }

        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        $comuniEstratti=array();
        $limitiCircoscrizione=array(
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CAGLIARI=>11,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CARBONIAIGLESIAS=>3,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_MEDIOCAMPIDANO=>4,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_NUORO=>8,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OGLIASTRA=>3,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OLBIATEMPIO=>4,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_ORISTANO=>13,
            AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_SASSARI=>10
        );

        foreach($circoscrizioni as $idCircoscrizione=>$curCircoscrizione)
        {
            $comuniEstratti[$idCircoscrizione]=array();
            $count=0;
            $from=0;
            $to=sizeof($comuniCircoscrizione[$idCircoscrizione])-1;
            $end=$limitiCircoscrizione[$idCircoscrizione];
            
            while($count<$end)
            {
                $num=rand($from,$to);
                while(array_search($comuniCircoscrizione[$idCircoscrizione][$num],$comuniEstratti[$idCircoscrizione],true) !==false)
                {
                    $num=rand($from,$to);
                }
                
                $comuniEstratti[$idCircoscrizione][]=$comuniCircoscrizione[$idCircoscrizione][$num];
                $count++;
            }
        }
        
        if($count>($end-$start)/2) $count=1;
        $val="<div style='margin-top:1em; margin-bottom:1em; text-align: center'>ALLEGATO 1</div>";
        $val.="<div style='margin-top:1em; margin-bottom:1em;'>In data ".date("d-m-Y")." alle ore ".date("H:i").", tramite il sistema di sorteggio informatizzato del SIER (Sistema Informativo Elettorale Regionale), sono stati estratti i 56 comuni, di seguito elencati, il cui rendiconto delle spese elettorali sarà assoggettato a verifica della documentazione giustificativa delle spese.";
        //$val.="<li>ogni Comune puo' essere estratto una sola volta e l'estrazione e' di tipo casuale;</li>";
        //foreach($limitiCircoscrizione as $idCircoscrizione=>$limit)
        {
            //$val.="<li>sono stati estratti ".$limit." Comuni per la circoscrizione di ".$circoscrizioni[$idCircoscrizione].";</li>";
        }
        //$val.="<li>l'estrazione e' stata effettuata in data: ".date("d-m-Y")." alle ".date("H:i").";</li>";
        $val.="</div>";
        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $attestazione->SetStyle("text-align:justify;");
        $attestazione->SetText($val);

        $intestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $intestazione->SetStyle("text-align:center; margin-top:2em;width:99.7%; border-bottom: 1px solid #dedede");
        $intestazione->SetText("<span style='font-weight:bold;line-height: 18px;'>Comuni estratti</span>");

        $firstRow= new AA_XML_Div_Element(uniqid(),$layout);
        $firstRow->SetStyle("width:99%; height:30%;display:flex;justify-content:space-between; align-items:start;");
        
        //Cagliari
        $template= new AA_GenericTableTemplateView(uniqid(),$firstRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CAGLIARI];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CAGLIARI] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }
        
        //Carbonia
        $template= new AA_GenericTableTemplateView(uniqid(),$firstRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CARBONIAIGLESIAS];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_CARBONIAIGLESIAS] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        //medio camidano
        $template= new AA_GenericTableTemplateView(uniqid(),$firstRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_MEDIOCAMPIDANO];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_MEDIOCAMPIDANO] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }
        
        //Nuoro
        $template= new AA_GenericTableTemplateView(uniqid(),$firstRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_NUORO];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_NUORO] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        $secondRow= new AA_XML_Div_Element(uniqid(),$layout);
        $secondRow->SetStyle("width:99%; height:30%;display:flex;justify-content:space-between; align-items:start;");

        //Ogliastra
        $template= new AA_GenericTableTemplateView(uniqid(),$secondRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OGLIASTRA];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OGLIASTRA] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        //Olbia
        $template= new AA_GenericTableTemplateView(uniqid(),$secondRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OLBIATEMPIO];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_OLBIATEMPIO] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        //Oristano
        $template= new AA_GenericTableTemplateView(uniqid(),$secondRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_ORISTANO];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_ORISTANO] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        //Sassari
        $template= new AA_GenericTableTemplateView(uniqid(),$secondRow,null,array("evidentiate-rows"=>false,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"24%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $titolo="Circoscrizione<br>".$circoscrizioni[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_SASSARI];
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>".$titolo."</span>"));
        $curRow=1;
        foreach($comuniEstratti[AA_Sier_Const::AA_SIER_CIRCOSCRIZIONE_SASSARI] as $curComune)
        {
            $template->SetCellText($curRow,0,$comuni[$curComune]->GetProp("denominazione"),"left");
            $curRow++;
        }

        return $layout->__toString();
    }

    //Template confirm reset comunicazioni comuni
    public function Template_GetSierConfirmResetComunicazioniComuniDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmResetComunicazioniComuni_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma reset comunicazioni Comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>resetterà tutte le comunicazioni effettuate dai comuni.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("ResetComunicazioniComuni");
        
        return $wnd;
    }

    //Template confirm reset comunicazioni comuni
    public function Template_GetSierComuneRendicontiConfirmTrashServiziDlg($object=null,$comune=null,$id_servizio)
    {
        $id=$this->GetId()."_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi'][$id_servizio]) || $id_servizio=="")
        {
            $wnd = new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Identificativo servizio non valido.</div>")));
            return $wnd;
        }

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        $form_data['id_servizio']=$id_servizio;
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' la voce di rendicontazione del bene/servizio relativa a:<p><b>".$rendiconti['servizi'][$id_servizio]['descrizione']."</b></p></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("DeleteSierComuneRendicontiServizi");
        
        return $wnd;
    }

    //Template confirm delete servizi OC comuni
    public function Template_GetSierOCRendicontiConfirmTrashServiziDlg($object=null,$comune=null,$id_servizio)
    {
        $id=$this->GetId()."_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi'][$id_servizio]) || $id_servizio=="")
        {
            $wnd = new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Identificativo servizio non valido.</div>")));
            return $wnd;
        }

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        $form_data['id_servizio']=$id_servizio;
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione rendicontazione bene/servizio", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' la voce di rendicontazione del bene/servizio relativa a:<p><b>".$rendiconti['servizi'][$id_servizio]['descrizione']."</b></p></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();

        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("Delete_OC_ComuneRendicontiServizi");
        
        return $wnd;
    }

    //Template confirm delete servizi OC comuni
    public function Template_GetSierOCRendicontiConfirmTrashAllegatiDlg($object=null,$comune=null,$allegato=null)
    {
        $id=$this->GetId()."_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione allegato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione allegato", $this->id);

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['ras']['allegati'][$allegato]) || $allegato==null)
        {
            $wnd = new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione allegato", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Identificativo allegato non valido.</div>")));
            return $wnd;
        }

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        $form_data['file']=$allegato;
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione rendicontazione allegato", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' l'allegato relativo a:<p><b>".$rendiconti['ras']['allegati'][$allegato]['estremi']."</b></p></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();

        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("Delete_OC_ComuneRendicontiAllegati");
        
        return $wnd;
    }

    //Template confirm delete personale detyerminato comuni
    public function Template_GetSierComuneRendicontiConfirmTrashPersonaleDeterminatoDlg($object=null,$comune=null,$id_personale_det)
    {
        $id=$this->GetId()."_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione contratto personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione contratto personale a tempo determinato", $this->id);

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det'][$id_personale_det]) || $id_personale_det=="")
        {
            $wnd = new AA_GenericWindowTemplate($id, "Conferma eliminazione voce di rendicontazione", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Identificativo servizio non valido.</div>")));
            return $wnd;
        }

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        $form_data['id_personale_det']=$id_personale_det;
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione voce di rendicontazione", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' la voce di rendicontazione per le competenze del personale a tempo determinato relativa al provv. di assunzione:<p><b>".$rendiconti['personale_det'][$id_personale_det]['estremi_assunzione']."</b> - importo: ".AA_Utils::number_format($rendiconti['personale_det'][$id_personale_det]['importo'],2,",",".")."</p></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
        if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("DeleteSierComuneRendicontiPersonaleDeterminato");
        
        return $wnd;
    }


    //Template confirm delete personale detyerminato comuni
    public function Template_GetSierOCRendicontiConfirmTrashPersonaleDeterminatoDlg($object=null,$comune=null,$id_personale_det)
    {
        $id=$this->GetId()."_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione contratto personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione rendicontazione contratto personale a tempo determinato", $this->id);

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det'][$id_personale_det]) || $id_personale_det=="")
        {
            $wnd = new AA_GenericWindowTemplate($id, "Conferma eliminazione voce di rendicontazione", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Identificativo servizio non valido.</div>")));
            return $wnd;
        }

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        $form_data['id_personale_det']=$id_personale_det;
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione voce di rendicontazione", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(480);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' la voce di rendicontazione per le competenze del personale a tempo determinato relativa al proovvedimento di assunzione:<p><b>".$rendiconti['personale_det'][$id_personale_det]['estremi_assunzione']."</b> - importo: ".AA_Utils::number_format($rendiconti['personale_det'][$id_personale_det]['importo'],2,",",".")."</p></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("Delete_OC_ComuneRendicontiPersonaleDeterminato");
        
        return $wnd;
    }

    //Template confirm reset comunicazioni comuni
    public function Template_GetSierConfirmResetFeedRisultatiComuniDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmResetFeedRisultatiComuni_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma reset feed risultati Comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma reset feed risultati Comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>resetterà i feed dei risultati di tutti i comuni.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("ResetFeedRisultatiComuni");
        
        return $wnd;
    }

    //Template confirm reset comunicazioni comuni
    public function Template_GetSierConfirmUpdateFeedRisultatiGeneraliDlg($object=null)
    {
        $id=$this->GetId()."_GetSierConfirmUpdateFeedRisultatiGeneraliDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma aggiornamento feed pubblici risultati", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma aggiornamento feed pubblici risultati", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>aggiornerà i feed pubblici dei risultati.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("UpdateFeedRisultatiGenerali");
        
        return $wnd;
    }

    //Template confirm reset risultati comuni
    public function Template_GetSierConfirmResetRisultatiComuniDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmResetRisultatiComuni_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma reset risultati Comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma reset risultati Comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>resetterà i risultati di tutti i comuni.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("ResetRisultatiComuni");
        
        return $wnd;
    }

    //Template confirm delete report sorteggio
    public function Template_GetSierConfirmDeleteSorteggioDocDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmDeleteSortegioDoc_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione report sorteggio comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione report sorteggio comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminera' definitvamente il report del sorteggio dei comuni ai fini della verifica della rendicontazione delle spese elettorali.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("DeleteSorteggioComuniRendicontazione");
        
        return $wnd;
    }

    public function Template_GetSierConfirmTrashWebAppQRCodeDlg($object=null)
    {
        $id=$this->GetId()."_GetSierConfirmTrashWebAppQRCodeDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma eliminazione QR code", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma eliminazione QR code", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>eliminerà il QR code attuale per la SierWebApp.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("DeleteSierWebAppQrCode");
        
        return $wnd;
    }

    //Template confirm reset risultati comuni
    public function Template_GetSierConfirmUpdateFeedRisultatiComuniDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmUpdateFeedRisultatiComuni_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma aggiornamento del feed risultati dei Comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma aggiornamento del feed risultati dei Comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>aggiornerà il feed risultati di tutti i comuni.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("UpdateFeedRisultatiComuni");
        
        return $wnd;
    }

    //Template confirm reset risultati comuni
    public function Template_OC_ConfirmCertCorpoElettoraleDlg($object=null,$comune=null)
    {
        $id=$this->GetId()."_ConfirmCertCorpoElettoraleDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma certificazione del Corpo elettorale", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        $form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma certificazione del Corpo elettorale", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>La certificazione del corpo elettorale <b>non permetterà più la modifica del dato fino alla prossima finestra temporale.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("Update_OC_CertificazioneCorpoElettorale");
        
        return $wnd;
    }

    //Template confirm reset risultati comuni
    public function Template_GetSierConfirmResetAffluenzaComuniDlg($object=null)
    {
        $id=$this->GetId()."_ConfirmResetAffluenzaComuni_Dlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Conferma reset dell'affluenza Comuni", $this->id);
        //if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Conferma reset comunicazioni Comuni", $this->id);

        $form_data=array();
        $form_data['id']=$object->GetID();
        //$form_data['id_comune']=$comune->GetProp("id");
        
        $wnd=new AA_GenericFormDlg($id, "Conferma reset dell'affluenza Comuni", $this->id,$form_data,$form_data);
        
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(120);
        
        $wnd->SetWidth(540);
        $wnd->SetHeight(400);
        
        $template="<div style='display: flex; justify-content: center; align-items: center; flex-direction:column'><p class='blinking' style='font-size: larger;font-weight:900;color: red'>ATTENZIONE!</p><p>Questa operazione <b>resetterà l'affluenza di tutti i comuni.</b></p><p style='font-size: larger;'>Vuoi procedere?</p></div>";
        $layout=new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","autoheight"=>true,"template"=>$template));

        $wnd->AddGenericObject($layout);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        $wnd->SetApplyButtonName("Procedi");
        $wnd->EnableResetButton(false);
        $wnd->SetSaveTask("ResetAffluenzaComuni");
        
        return $wnd;
    }

    public function Template_GetSierHelpDlg()
    {
        $id=$this->GetId()."_Help_Dlg";
        
        $wnd=new AA_GenericWindowTemplate($id, "Aiuto", $this->id);
        
        $wnd->SetWidth(350);

        $platform=AA_Platform::GetInstance($this->oUser);
        $manualPath=$platform->GetModulePathURL($this->GetId())."/docs/manuale_oc.pdf";
        $action='AA_MainApp.utils.callHandler("pdfPreview", { url: "'.$manualPath.'" }, "'.$this->GetId().'");';

        $layout=new AA_JSON_Template_Layout($id."_Aiuto_box",array("type"=>"clean"));
        $layout->AddRow(new AA_JSON_Template_Generic("",array("height"=>20)));
        $toolbar_oc=new AA_JSON_Template_Toolbar($id."_ToolbarOC",array("type"=>"clean","borderless"=>true));

        //manuale operatore comunale
        $btn=new AA_JSON_Template_Generic($id."_Manuale_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-help-circle",
            "label"=>"Manuale caricamento risultati",
            "align"=>"center",
            "inputWidth"=>300,
            "click"=>$action,
            "tooltip"=>"Visualizza o scarica il manuale operatore comunale per iul caricamento dei risultati elettorali"
        ));

        $toolbar_oc->AddCol($btn);
        $layout->AddRow($toolbar_oc);

        $layout->AddRow(new AA_JSON_Template_Generic("",array("height"=>20)));

        $toolbar_oc=new AA_JSON_Template_Toolbar($id."_ToolbarOC",array("type"=>"clean","borderless"=>true));
        $manualPath=$platform->GetModulePathURL($this->GetId())."/docs/manuale_oc_rendiconti.pdf";
        $action='AA_MainApp.utils.callHandler("pdfPreview", { url: "'.$manualPath.'" }, "'.$this->GetId().'");';
        //manuale operatore comunale rendiconti
        $btn=new AA_JSON_Template_Generic($id."_ManualeRendiconti_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-help-circle",
            "label"=>"Manuale caricamento rendiconti",
            "align"=>"center",
            "inputWidth"=>300,
            "click"=>$action,
            "tooltip"=>"Visualizza o scarica il manuale operatore comunale per la compilazione dei rendiconti"
        ));

        $toolbar_oc->AddCol($btn);
        $layout->AddRow($toolbar_oc);

        $layout->AddRow(new AA_JSON_Template_Generic("",array("height"=>20)));

        $wnd->AddView($layout);        

        return $wnd;
    }

    

    //Template detail (da specializzare)
    public function TemplateSection_Detail($params)
    {
        //Gestione dei tab
        //$id=static::AA_UI_PREFIX."_Detail_Generale_Tab_".$params['id'];
        //$params['DetailOptionTab']=array(array("id"=>$id, "value"=>"Generale","tooltip"=>"Dati generali","template"=>"TemplateSierDettaglio_Generale_Tab"));
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER)) $params['readonly']=true;
        
        $params['MultiviewEventHandlers']=array("onViewChange"=>array("handler"=>"onDetailViewChange"));

        $params['disable_SaveAsPdf']=true;
        $params['disable_SaveAsCsv']=true;
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER)) $params['disable_MenuAzioni']=true;
        
        $detail = $this->TemplateGenericSection_Detail($params);

        return $detail;
    }
    
    //Template section detail, tab generale
    public function TemplateSierDettaglio_Generale_Tab($object=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_GENERALE_BOX;

        if(!($object instanceof AA_Sier)) return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));

        $rows_fixed_height=50;
        $canModify=false;
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0 && $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER)) $canModify=true;

        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC)|| $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF))
        {
            $cp=$object->GetControlPannel();
            $url=$cp['url_feed_risultati'];
            if(strpos($url,"mini=1")===false)
            {
                if(strpos($url,"?") !==false) $url."&mini=1";
                else $url.="?mini=1";
            }
            $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_ControlPannel",array("height"=>32,"type"=>"clean","borderless"=>true));
            $modify_btn=new AA_JSON_Template_Generic($id."_ShowReports_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-account-search",
                 "label"=>"Reports",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Consulta la reportistica sui risultati delle consultazioni",
                 "click"=>"AA_MainApp.utils.callHandler('StartRisultatiApp', {url:\"".addslashes($url)."\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->AddElement(new AA_JSON_Template_Generic());
            $toolbar->AddElement($modify_btn);  

            if($canModify)
            {
                $modify_btn=new AA_JSON_Template_Generic($id."_GeneraleOtions_btn",array(
                    "view"=>"button",
                     "type"=>"icon",
                     "icon"=>"mdi mdi-tools",
                     "label"=>"Strumenti",
                     "align"=>"right",
                     "width"=>120,
                     "tooltip"=>"Pannello di controllo",
                     "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierControlPannelDlg\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
                ));
                $toolbar->AddElement($modify_btn);
            }
        }
        else $toolbar=null;
        
        $layout=$this->TemplateGenericDettaglio_Header_Generale_Tab($object,$id,$toolbar,$canModify);

        //Descrizione
        $value=$object->GetDescr();
        $descr=new AA_JSON_Template_Template($id."_Descrizione",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Descrizione:","value"=>$value),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //anno riferimento
        $value=$object->GetProp("Anno");
        if($value=="")$value="n.d.";
        $anno_rif=new AA_JSON_Template_Template($id."_AnnoRif",array(
            "template"=>"<span style='font-weight:700'>#title#</span><br><span>#value#</span>",
            "gravity"=>1,
            "data"=>array("title"=>"Anno:","value"=>$value)
        ));
        
        //note
        $value = $object->GetProp("Note");
        $note=new AA_JSON_Template_Template($id."_Note",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "data"=>array("title"=>"Note:","value"=>$value)
        ));
        
        
        //prima riga
        $riga=new AA_JSON_Template_Layout($id."_FirstRow",array("height"=>$rows_fixed_height,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddCol($anno_rif);
        $riga->AddCol($this->TemplateDettaglio_Abilitazioni($object,$id."_Abilitazioni"));
        $layout->AddRow($riga);

        //seconda riga
        $riga=new AA_JSON_Template_Layout($id."_SecondRow",array("gravity"=>1,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $layout_gen=new AA_JSON_Template_Layout($id."_DescrNoteLayout",array("gravity"=>3,"type"=>"clean"));
        $layout_gen->addRow($descr);
        $layout_gen->addRow($note);
        $riga->addCol($layout_gen);

        //$riga->addCol($this->TemplateDettaglio_Allegati($object,$id,$canModify));
        $riga->addCol($this->TemplateDettaglio_Giornate($object,$id,$canModify));

        //$layout->AddRow($riga);

        //terza riga
        //$riga=new AA_JSON_Template_Layout($id."_ThirdRow",array("gravity"=>1));
      

        $layout->AddRow($riga);

        return $layout;
    }

    //Template section oc login
    public function TemplateSection_OC_Login($object=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_SECTION_OC_DESKTOP;

        if(!($object instanceof AA_Sier))
        {
            $object=new AA_Sier($_SESSION['oc_sier_object']);
            if(!$object->IsValid())
            {
                return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi","name"=>"Accesso operatore comunale"));
            }
        } 
        
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean","name"=>"Accesso operatore comunale"));

        //login disabilitato
        $sier_flags=$object->GetAbilitazioni();
        if(($sier_flags&AA_Sier_Const::AA_SIER_FLAG_ACCESSO_OPERATORI)==0)
        {
            $layout->AddRow(new AA_JSON_Template_Template($id."_TemplateVoid",array("template"=>"<div style='display: flex; justify-content:center; align-items: center;width:100%;height:100%; font-weight: bold'><span>Accesso operatori temporaneamente disabilitato.</span></div>")));
            return $layout;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $layout->AddRow(new AA_JSON_Template_Template($id."_TemplateVoid",array("template"=>"<div style='display: flex; justify-content:center; align-items: center'><div>L'utente corrente non è abilitato all'accesso come operatore comunale.</div></div>")));
            return $layout;
        }

        $form=new AA_JSON_Template_Form($id."_LoginOCForm",array(
            "maxWidth"=>400,
            "elementsConfig"=>array("labelWidth"=>180, "labelAlign"=>"left", "labelPosition"=>"top","bottomPadding"=>15),
            "padding"=>15,
            "validation"=>"validateForm",
            "css"=>array("background-color"=>"#F3FAFD !important", "border"=>"solid 1px 1198FF","border-radius"=>"5px !important", "font-size"=>"smaller")
        ));

        $formBox=new AA_JSON_Template_Layout($id."_FormBox",array("type"=>"space","css"=>array("background-color"=>"transparent")));
        $form->AddElement(new AA_JSON_Template_Text($id."LoginOC_cf",array("required"=>true,"name"=>"cf","label"=>"<b>Codice fiscale</b>")));

        $params = "{task: 'OCLogin'";
        $params .= ", data: $$('" . $id . "_LoginOCForm').getValues()}";
        $script="if($$('" . $id . "_LoginOCForm').validate())";
        $script.=" AA_MainApp.utils.callHandler('saveData',$params,'".$this->GetId()."')";

        $form_button_layout=new AA_JSON_Template_Layout($id."_LoginButton",array("type"=>"clean","autoheight"=>true,"css"=>array("background-color"=>"transparent")));
        $form_button_layout->AddCol(new AA_JSON_Template_Generic(""));
        $btn_login=new AA_JSON_Template_Generic($id."_Accedi_btn",array(
            "view"=>"button",
             "type"=>"icon",
             "icon"=>"mdi mdi-login",
             "label"=>"Accedi",
             "css"=>"webix_primary",
             "align"=>"center",
             "width"=>120,
             "tooltip"=>"Accedi",
             "click"=>$script
         ));
        $form_button_layout->AddCol($btn_login);
        $form_button_layout->AddCol(new AA_JSON_Template_Generic(""));

        $form->AddElement($form_button_layout);
        $header_layout=new AA_JSON_Template_Layout($id."_Header_box",array("type"=>"clean"));
        $header_layout->AddRow(new AA_JSON_Template_Generic());
        $header_layout->AddRow(new AA_JSON_Template_Template($id."_PreviewHeaderTitle",array("template"=>"<div style='display:flex;justify-content:center; align-items:center;'><span style='font-size: 24px; color:#006699'>".$object->GetName()."</span></div>","align"=>"center")));
        $header_layout->AddRow(new AA_JSON_Template_Generic());
        $formBox->AddCol(new AA_JSON_Template_Generic());
        $formBox->AddCol($form);
        $formBox->AddCol(new AA_JSON_Template_Generic());

        $layout->AddRow($header_layout);
        $layout->AddRow($formBox);
        $layout->AddRow(new AA_JSON_Template_Generic());

        return $layout;
    }

    //Template section oc login
    public function TemplateSection_OC_Desktop($object=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_SECTION_OC_DESKTOP;

        if(!($object instanceof AA_Sier))
        {
            $object=new AA_Sier($_SESSION['oc_sier_object']);
            if(!$object->IsValid())
            {
                return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi","name"=>"Accesso operatore comunale"));
            }
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        $intestazione="Cruscotto operatore - comune di ";
        if($comune instanceof AA_SierComune)
        {
            $intestazione.=$comune->GetProp("denominazione");     
        }
        
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean","name"=>$intestazione));

        $sier_flags=$object->GetAbilitazioni();
        $sections=array(
            array("id"=>$id."_Generale_".$operatore->GetOperatoreComunaleComune(),"value"=>"Dati generali e corpo elettorale","icon"=>"mdi mdi-information-variant-circle"),
            array("id"=>$id."_Comunicazioni_".$operatore->GetOperatoreComunaleComune(),"value"=>"Comunicazioni","icon"=>"mdi mdi-send-check"),
            array("id"=>$id."_Affluenza_".$operatore->GetOperatoreComunaleComune(),"value"=>"Dati affluenza","icon"=>"mdi mdi-vote"),
            array("id"=>$id."_Risultati_".$operatore->GetOperatoreComunaleComune(),"value"=>"Risultati","icon"=>"mdi mdi-stack-overflow"),
            array("id"=>$id."_Rendiconti_".$operatore->GetOperatoreComunaleComune(),"value"=>"Rendicontazione","icon"=>"mdi mdi-cash-sync"),
            array("id"=>$id."_Documenti_".$operatore->GetOperatoreComunaleComune(),"value"=>"Documenti","icon"=>"mdi mdi-file-document-multiple")
        );

        $multiview = new AA_JSON_Template_Multiview($id . "_Multiview_".$object->GetId(), array(
            "type" => "clean",
            "css" => "AA_Detail_Content",
            "value" => $id."_OC_PreviewBox".$operatore->GetOperatoreComunaleComune()
        ));

        $riepilogo_template="<div class='AA_DataView_Moduli_item' onclick=\"#onclick#\" style='cursor: pointer; border: 1px solid; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 97%; margin:5px;'>";
        //icon
        $riepilogo_template.="<div style='display: flex; align-items: center; height: 120px; font-size: 90px;'><span class='#icon#'></span></div>";
        //name
        $riepilogo_template.="<div style='display: flex; align-items: center;justify-content: center; flex-direction: column; font-size: larger;height: 60px'>#name#</div>";
        $riepilogo_template.="</div>";

        $nMod=0;
        $moduli_view=new AA_JSON_Template_Layout($id."_OC_PreviewBox".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean","css"=>array("background-color"=>"transparent")));
        foreach($sections as $curModId=>$curMod)
        {
            $nMod++;
            //AA_Log::Log(__METHOD__." - Aggiungo la slide: ".$id."_ModuliView_".$nSlide." - nMod: ".$nMod ,100);
            $name="<span style='font-weight:900;'>".implode("</span><span>",explode("-",$curMod['value']))."</span>";
            $onclick="AA_MainApp.utils.callHandler('OC_SectionBoxClick','".$curMod['id']."','".$this->GetId()."')";
            $moduli_data=array("id"=>$curModId,"name"=>$name,"icon"=>$curMod['icon'],"onclick"=>$onclick);
            $moduli_view->AddCol(new AA_JSON_Template_Template($id."_ModuleBox_".$moduli_data['id'],array("template"=>$riepilogo_template,"borderless"=>true,"data"=>array($moduli_data))));
        }
        $preview_layout=new AA_JSON_Template_Layout($id."_PreviewBox_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean","minHeight"=>300));
        $preview_header_box=new AA_JSON_Template_Layout($id."_PreviewHeaderBox_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean","minHeight"=>300));
        $preview_header_box_col=new AA_JSON_Template_Layout($id."_PreviewHeaderBox_Col".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean","minHeight"=>300));
        $preview_header_box_col->AddRow(new AA_JSON_Template_Generic());
        $preview_header_box_col->AddRow(new AA_JSON_Template_Generic($id."_PreviewHeaderTitle",array("view"=>"label","label"=>"<span style='font-size: 24px; color:#006699'>".$object->GetName()."</span>","align"=>"center")));
        $preview_header_box_col->AddRow(new AA_JSON_Template_Template($id."_PreviewHeaderContent",array("template"=>"<div style='display: flex; justify-content:center; align-center: center; width: 100%; height:100%'><p>Ciao <b>".$operatore->GetOperatoreComunaleNome()."</b>, fai click su uno dei box sottostanti per accedere alla relativa sezione.</p></div>")));
        $preview_header_box->AddCol(new AA_JSON_Template_Generic("",array("width"=>300)));
        $preview_header_box->AddCol($preview_header_box_col);
        
        $cp=$object->GetControlPannel();
        if(isset($cp['sierwebappqrcode']) && $cp['sierwebappqrcode']!="")
        {
            $preview_header_box->AddCol(new AA_JSON_Template_Template($id."_WebAppQrCode",array("width"=>300,"height"=>300,"template"=>"<div style='width: 100%;height: 100%; display:flex;justify-content:center;align-items:center;flex-direction:column;'><div style='display:flex;justify-content:center;align-items:center;flex-direction:column;width: 90%;height: 90%; min-height:250px; background-color:#fff;border-radius:15px;border:1px solid #dedede; box-shadow: 5px 5px 10px #000'><img src='".AA_Const::AA_WWW_ROOT."/storage.php?object=".$cp['sierwebappqrcode']."' style='width: 55%' /><div style='display:flex;justify-content:center;align-items: flex-end; font-size:smaller; height:50px;'><div style='text-align:center'>Segui l'andamento delle consultazioni in <b>tempo reale dal tuo smartphone!</b></div></div></div></div>")));
        }
        else $preview_header_box->AddCol(new AA_JSON_Template_Generic("",array("width"=>300)));

        $preview_layout->AddRow($preview_header_box);
        $preview_layout->AddRow($moduli_view);
        $preview_layout->AddRow(new AA_JSON_Template_Generic());
        $multiview->AddCell($preview_layout);

        //------------- header ------------------
        $header = new AA_JSON_Template_Layout($id . "_Header" . "_".$object->GetId(), array("type" => "clean", "height" => 38, "css" => "AA_SectionContentHeader"));
        $canModify=false;
        $layout_tab=new AA_JSON_Template_Layout($id . "_Layout_TabBar_".$object->GetId(),array("type"=>"clean","minWidth"=>500));
        $gravity_tabbar=4;
        $layout_tab->AddCol(new AA_JSON_Template_Generic($id . "_TabBar_".$object->GetId(), array(
            "view" => "tabbar",
            "gravity"=>$gravity_tabbar,
            "borderless" => true,
            "value" => $id."_Generale_".$operatore->GetOperatoreComunaleComune(),
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_Multiview_".$object->GetId(),
            "options" => array(
                array("id"=>$id."_Generale_".$operatore->GetOperatoreComunaleComune(),"value"=>"Dati generali e corpo elettorale"),
                array("id"=>$id."_Affluenza_".$operatore->GetOperatoreComunaleComune(),"value"=>"Dati affluenza"),
                array("id"=>$id."_Risultati_".$operatore->GetOperatoreComunaleComune(),"value"=>"Risultati"),
                array("id"=>$id."_Rendiconti_".$operatore->GetOperatoreComunaleComune(),"value"=>"Rendicontazione"),
            )
        )));
        $header->AddCol($layout_tab);
        //$layout->AddRow($layout_tab);
        //-------------------------------------------------------

        //-------------------   Scheda generale  ------------------------------
        if (($sier_flags&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_DATIGENERALI) > 0) $canModify=true;
        $layout_generale=new AA_JSON_Template_Layout($id."_Generale_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_DatiGenerali",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //$toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Generale_Back".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));

        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_DatiGenerali_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Dati generali</span>", "align"=>"center")));
        
        //Pulsante di modifica
        if($canModify)
        {            
            $modify_btn=new AA_JSON_Template_Generic($id."_OC_Modify_Generale_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica dati generali e corpo elettorale",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyDatiGeneraliDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        }
        
        $layout_generale->addRow($toolbar);
        $layout_generale->addRow($this->Template_OC_Generale($id,$object,$comune));
        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        //-------------------  Comunicazioni  ------------------------------
        $canModify=false;
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        if (($sier_flags&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI) > 0 && $now >= $giornateKeys[0]) $canModify=true;
        $layout_generale=new AA_JSON_Template_Layout($id."_Comunicazioni_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_Comunicazioni",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //$toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Comunicazioni_Back".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));

        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Comunicazioni_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Comunicazioni</span>", "align"=>"center")));
        
        //Pulsante di modifica
        if($canModify)
        {            
            $modify_btn=new AA_JSON_Template_Generic($id."_OC_Modify_Comunicazioni_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica dati generali e corpo elettorale",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyComunicazioniDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        }
        
        $layout_generale->addRow($toolbar);
        $layout_generale->addRow($this->Template_OC_Comunicazioni($id,$object,$comune));
        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        //-------------------   Affluenza  ------------------------------
        $canModify=false;
        if (($sier_flags&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_AFFLUENZA) > 0) $canModify=true;
        $layout_generale=new AA_JSON_Template_Layout($id."_Affluenza_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_Affluenza",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //$toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Affluenza_Back_".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Affluenza_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Dati affluenza alle urne</span>", "align"=>"center")));
        
        //Pulsante di modifica
        if($canModify)
        {            
            $modify_btn=new AA_JSON_Template_Generic($id."_OC_Modify_Affluenza_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi/Modifica dati affluenza",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCAffluenzaAddNewDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        }
        
        $layout_generale->addRow($toolbar);
        $layout_generale->addRow($this->Template_OC_Affluenza($id,$object,$comune));
        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        //------------------------------  Risultati  ---------------------------------
        $canModify=false;
        if (($sier_flags&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0) $canModify=true;
        $layout_generale=new AA_JSON_Template_Layout($id."_Risultati_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_Risultati",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Risultati_Back_".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Risultati_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Dati risultati consultazioni</span>", "align"=>"center")));
        $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        
        $layout_generale->addRow($toolbar);
        $layout_generale->addRow($this->Template_OC_Risultati($id,$object,$comune));
        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        //--------------------------------   Rendiconti  -----------------------------
        $canModify=false;
        if (($sier_flags&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI) > 0 && $operatore->GetOperatoreComunaleRuolo() > 1) $canModify=true;
        $layout_generale=new AA_JSON_Template_Layout($id."_Rendiconti_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_Rendiconti",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Rendiconti_Back".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Rendiconti_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Rendicontazione spese e rimborsi</span>", "align"=>"center")));
        $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        $layout_generale->addRow($toolbar);
        //$layout_generale->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display: flex; justify-content: center; align-items: center; height:100%; width:100%'>Il modulo verra' abilitato prossimamente.</div>")));
        
        $layout_generale->addRow($this->Template_OC_Rendiconti($id,$object,$comune,$canModify));

        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        //--------------------------------   Documenti  -----------------------------
        $canModify=false;
        $layout_generale=new AA_JSON_Template_Layout($id."_Documenti_".$operatore->GetOperatoreComunaleComune(),array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_Documenti",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #c0c0c0 !important","background-color"=>"#dedede !important")));
        //torna al riepilogo
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_OC_Documenti_Back".$operatore->GetOperatoreComunaleComune()."_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-keyboard-backspace",
            "label"=>"Riepilogo",
            "align"=>"left",
            "width"=>120,
            "tooltip"=>"Torna al riepilogo",
            "click"=>"$$('".$id."_PreviewBox_".$operatore->GetOperatoreComunaleComune()."').show()"
        )));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Documenti_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Documenti</span>", "align"=>"center")));
        $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
        
        $layout_generale->addRow($toolbar);
    
        $layout_generale->addRow($this->Template_OC_Documenti($id,$object,$comune));

        $multiview->addCell($layout_generale);
        //----------------------------------------------------------------------------

        $layout->AddRow($multiview);
    
        return $layout;
    }

    //Template OC generale
    public function Template_OC_Generale($id,$object=null,$comune=null,$modify=false)
    {
        $id.=$id."_Generale_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));
        
        //Descrizione
        $value=$comune->GetProp("denominazione");
        $descr=new AA_JSON_Template_Template($id."_Denominazione",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Denominazione:","value"=>$value),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //Circoscrizione
        $value=$comune->GetProp("circoscrizione");
        $circoscrizione=new AA_JSON_Template_Template($id."_Circoscrizione",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Circoscrizione:","value"=>$value),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //Pec
        $value=$comune->GetProp("pec");
        $pec=new AA_JSON_Template_Template($id."_Pec",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Pec:","value"=>$value),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        
        //Indirizzo
        $value=$comune->GetProp("indirizzo");
        $indirizzo=new AA_JSON_Template_Template($id."_Indirizzo",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Indirizzo:","value"=>$value),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //note
        $value = $comune->GetProp("contatti");
        $note=new AA_JSON_Template_Template($id."_Contatti",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "data"=>array("title"=>"Note e contatti:","value"=>$value)
        ));

        $template="<div style='display: flex;justify-content: flex-start;width: 100%; padding:1em;'><div style='font-weight:700;width: 500px'>#title#</div><div style='text-align:right; width: 90px'>#value#</div></div>";
        $template_tot="<div style='display: flex;justify-content: flex-start;width: 100%; padding:1em;'><div style='font-weight:900;width: 500px;text-align: right'>#title#</div><div style='text-align:right; width: 90px'>#value#</div></div>";
        //sezioni totali
        $value = $comune->GetProp("sezioni");
        $sezioni=new AA_JSON_Template_Template($id."_Sezioni",array(
            "template"=>$template_tot,
            "data"=>array("title"=>"Totale sezioni:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //sezioni ordinarie
        $value = $comune->GetProp("sezioni_ordinarie");
        $sezioni_ordinarie=new AA_JSON_Template_Template($id."_SezioniOrdinarie",array(
            "template"=>$template,
            "data"=>array("title"=>"Sezioni ordinarie:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //sezioni ospedaliere
        $value = $comune->GetProp("sezioni_ospedaliere");
        $sezioni_ospedaliere=new AA_JSON_Template_Template($id."_SezioniOspedaliere",array(
            "template"=>$template,
            "data"=>array("title"=>"Sezioni ospedaliere:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"2px solid #dadee0 !important")
        ));

        //elettori maschi
        $value = $comune->GetProp("elettori_m");
        $elettori_m=new AA_JSON_Template_Template($id."_Elettori_m",array(
            "template"=>$template,
            "data"=>array("title"=>"Elettori maschi <i>(compresi i residenti all'estero)</i>:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        
        //elettori maschi esteri
        $value = $comune->GetProp("elettori_esteri_m");
        $elettori_esteri_m=new AA_JSON_Template_Template($id."_Elettori_esteri_m",array(
            "template"=>$template,
            "data"=>array("title"=>"Elettori maschi residenti all'estero:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //elettori femmine
        $value = $comune->GetProp("elettori_f");
        $elettori_f=new AA_JSON_Template_Template($id."_Elettori_f",array(
            "template"=>$template,
            "data"=>array("title"=>"Elettrici femmine <i>(comprese le residenti all'estero)</i>:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"2px solid #dadee0 !important")
        ));

        //totale elettori esteri
        $value = $comune->GetProp("elettori_esteri_f")+$comune->GetProp("elettori_esteri_m");
        $elettori_esteri_tot=new AA_JSON_Template_Template($id."_Elettori_esteri_tot",array(
            "template"=>$template_tot,
            "data"=>array("title"=>"Totale elettori residenti all'estero:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        
        //totale elettori
        $value = $comune->GetProp("elettori_f")+$comune->GetProp("elettori_m");
        $elettori_tot=new AA_JSON_Template_Template($id."_Elettori_tot",array(
            "template"=>$template_tot,
            "data"=>array("title"=>"Totale elettori:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //elettori femmine estere
        $value = $comune->GetProp("elettori_esteri_f");
        $elettori_esteri_f=new AA_JSON_Template_Template($id."_Elettori_esteri_f",array(
            "template"=>$template,
            "data"=>array("title"=>"Elettrici femmine residenti all'estero:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"2px solid #dadee0 !important")
        ));

        //luoghi di cura sub 100
        $value = $comune->GetProp("luoghi_cura_sub100");
        $luoghi_cura_sub100=new AA_JSON_Template_Template($id."_Luoghi_cura_sub100",array(
            "template"=>$template,
            "data"=>array("title"=>"Luoghi di cura con meno di 100 posti letto:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        //luoghi di cura over 100
        $value = $comune->GetProp("luoghi_cura_over100");
        $luoghi_cura_over100=new AA_JSON_Template_Template($id."_Luoghi_cura_over100",array(
            "template"=>$template,
            "data"=>array("title"=>"Luoghi di cura con più di 100 posti letto:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        
        //luoghi detenzione
        $value = $comune->GetProp("luoghi_detenzione");
        $luoghi_detenzione=new AA_JSON_Template_Template($id."_Luoghi_detenzione",array(
            "template"=>$template,
            "data"=>array("title"=>"Luoghi di detenzione:","value"=>$value),
            "height"=>48,
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));

        $rows_fixed_height=60;
        
        //prima riga
        $riga=new AA_JSON_Template_Layout($id."_FirstRow",array("height"=>$rows_fixed_height,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddCol($descr);
        $riga->AddCol($circoscrizione);
        $layout->AddRow($riga);

        //seconda riga
        $riga=new AA_JSON_Template_Layout($id."_SecondRow",array("height"=>$rows_fixed_height,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddCol($indirizzo);
        $riga->AddCol($pec);
        $layout->AddRow($riga);

        //terza riga
        $riga=new AA_JSON_Template_Layout($id."_ThirdRow",array("type"=>"clean","height"=>80,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddCol($note);
        $layout->AddRow($riga);

        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important","background-color"=>"#dedede !important")));
        //Pulsante di modifica
        $cp=$object->GetControlPannel();
        $comunicazioni=$comune->GetComunicazioni(true);
        $temp_modify=true;
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        $_45daysago=date('Y-m-d', strtotime($giornateKeys[0].' '.(-45+$cp['finestra_temporale_cert_corpo_elettorale']).' days'));
        $_15daysago_pre=date('Y-m-d', strtotime($giornateKeys[0].' '.(-15).' days'));
        $_15daysago=date('Y-m-d', strtotime($giornateKeys[0].' '.(-15+$cp['finestra_temporale_cert_corpo_elettorale']).' days'));
        $certified="";

        if($cp['abilita_cert_corpo_elettorale']>0) $toolbar->AddElement(new AA_JSON_Template_Generic("",array("width"=>240)));
        else $toolbar->AddElement(new AA_JSON_Template_Generic("",array("width"=>120)));

        //finestra temporale di modifica del corpo elettorale
        if($cp['finestra_temporale_cert_corpo_elettorale']>0)
        {
            //verifica la presenza all'interno delle finestre temporali
            if($now > $_45daysago && $now < $_15daysago_pre) $temp_modify=false;
            if($now > $_45daysago && $now > $_15daysago) $temp_modify=false;
        }

        if($cp['abilita_cert_corpo_elettorale']>0)
        {
            //verifica non sia già stato certificato
            if(isset($comunicazioni['corpoelettorale_45']) && $comunicazioni['corpoelettorale_45']>0 && $now <= $_45daysago)
            {
                $certified="<span class='mdi mdi-certificate' style='font-size:larger;color: #fff'>&nbsp;Dati certificati</span>";
                $temp_modify=false;
            }

            if(isset($comunicazioni['corpoelettorale_45']) && $comunicazioni['corpoelettorale_45']>0 && $now > $_45daysago && $now < $_15daysago_pre)
            {
                $certified="<span class='mdi mdi-certificate' style='font-size:larger;color: #fff'>&nbsp;Dati certificati</span>";
                $temp_modify=false;
            }

            if(isset($comunicazioni['corpoelettorale_15']) && $comunicazioni['corpoelettorale_15']>0 && $now <= $_15daysago) 
            {
                $certified="<span class='mdi mdi-certificate' style='font-size:larger;color: #fff'>&nbsp;Dati certificati</span>";
                $temp_modify=false;
            }

            if(isset($comunicazioni['corpoelettorale_45']) && $comunicazioni['corpoelettorale_45']>0 && isset($comunicazioni['corpoelettorale_15']) && $comunicazioni['corpoelettorale_15']>0)
            {
                $certified="<span class='mdi mdi-certificate' style='font-size:larger;color: #fff'>&nbsp;Dati certificati</span>";
                $temp_modify=false;
            }
        }    

        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_CorpoElettorale_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Sezioni e corpo elettorale</span>", "align"=>"center")));

        //AA_Log::Log(__METHOD__." - comunicazioni: ".print_r($comunicazioni,true),100);

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_CORPO_ELETTORALE)>0 && $temp_modify)
        {
            if($cp['abilita_cert_corpo_elettorale']>0)
            {
                $certify_btn=new AA_JSON_Template_Generic($id."_OC_Certify_CorpoElettorale_btn",array(
                    "view"=>"button",
                     "type"=>"icon",
                     "icon"=>"mdi mdi-certificate",
                     "label"=>"Certifica",
                     "css"=>"AA_ButtonGreen",
                     "align"=>"right",
                     "width"=>120,
                     "tooltip"=>"Certifica il dato del corpo elettorale",
                     "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCConfirmCertCorpoElettoraleDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
                ));
                $toolbar->AddElement($certify_btn);                    
            }

            $modify_btn=new AA_JSON_Template_Generic($id."_OC_Modify_CorpoElettorale_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Corpo elettorale",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyCorpoElettoraleDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        else
        {
            if($certified!="" && $cp['abilita_cert_corpo_elettorale']>0)
            {
                $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Certified_Title",array("view"=>"label","label"=>$certified,"width"=>240, "css"=>array("background"=>"#6cb456 !important","border-radius"=>"10px"),"align"=>"center")));
            }
            else 
            {
                if($cp['abilita_cert_corpo_elettorale']>0)
                {
                    $certified="<span class='mdi mdi-book-cancel' style='font-size:larger;color: #fff'>&nbsp;Dati non certificati</span>";
                    $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Certified_Title",array("view"=>"label","label"=>$certified,"width"=>240,"css"=>array("background"=>"#e15131 !important","border-radius"=>"10px"), "align"=>"center")));
                }
                else $toolbar->addElement(new AA_JSON_Template_Generic("",array("width"=>120)));
            }
        }

        $layout->AddRow($toolbar);

        $layout_corpo=new AA_JSON_Template_Layout($id."_CorpoBox",array("type"=>"clean"));
        //corpo elettorale
        $riga=new AA_JSON_Template_Layout($id."_QuadRow",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $riga->AddRow($sezioni_ordinarie);
        $riga->AddRow($sezioni_ospedaliere);
        $riga->AddRow($sezioni);
        //$layout_corpo->AddCol($riga);

        //$riga=new AA_JSON_Template_Layout($id."_6Row",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $riga->AddRow($luoghi_cura_sub100);
        $riga->AddRow($luoghi_cura_over100);
        $riga->AddRow($luoghi_detenzione);
        $layout_corpo->AddCol($riga);

        $riga=new AA_JSON_Template_Layout($id."_5Row",array("type"=>"clean"));
        $riga->AddRow($elettori_m);
        $riga->AddRow($elettori_f);
        $riga->AddRow($elettori_tot);
        $riga->AddRow($elettori_esteri_m);
        $riga->AddRow($elettori_esteri_f);
        $riga->AddRow($elettori_esteri_tot);
        $layout_corpo->AddCol($riga);
        
        $layout->addRow($layout_corpo);
        
        $layout->AddRow(new AA_JSON_Template_Generic());

        return $layout;
    }

    //Template OC generale
    public function Template_OC_Comunicazioni($id,$object=null,$comune=null,$modify=false)
    {
        $id.=$id."_Comunicazioni_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));
        
        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        $first=true;
        foreach($giornate as $giornata=>$curGiornata)
        {
            $col=new AA_JSON_Template_Layout($id."_col_".$giornata,array("type"=>"clean"));
            $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important","background-color"=>"#dedede !important")));
            $toolbar->AddElement(new AA_JSON_Template_Generic(""));
            $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_OC_Comunicazioni_Title_".$giornata,array("view"=>"label","label"=>"<span style='color:#003380'>Giornata del ".$giornata."</span>", "align"=>"center")));
            $toolbar->AddElement(new AA_JSON_Template_Generic(""));
            $col->addRow($toolbar);

            if($first) $values=array("title_inizio"=>"Avvenuta costituzione degli uffici elettorali di sezione e riscontro materiale elettorale","value_inizio"=>"non comunicata","title_fine"=>"Chiusura operazioni uffici elettorali di sezione","value_fine"=>"non comunicata");
            else $values=array("title_inizio"=>"Apertura operazioni uffici elettorali di sezione ","value_inizio"=>"non comunicata","title_fine"=>"Chiusura operazioni uffici elettorali di sezione","value_fine"=>"non comunicata");

            if(isset($comunicazioni[$giornata]) && $comunicazioni[$giornata]['inizio']>0) $values['value_inizio']="comunicata";
            if(isset($comunicazioni[$giornata]) && $comunicazioni[$giornata]['fine']>0) $values['value_fine']="comunicata";

            $row=new AA_JSON_Template_Template($id."_".$giornata,array(
                "template"=>"<div style='display: flex; align-items:center; height: 42px;'><span style='display: inline-block; font-weight:700;width: 70%'>#title_inizio#</span><span>#value_inizio#</span></div><div style='display: flex; align-items:center; height: 42px;'><span style='display: inline-block;font-weight:700;width: 70%'>#title_fine#</span><span>#value_fine#</span></div>",
                "gravity"=>1,
                "data"=>$values
            ));
            $col->AddRow($row);
            $layout->AddCol($col);
            $first=false;
        }

        return $layout;
    }

    //Template OC documenti
    public function Template_OC_Documenti($id,$object=null,$comune=null,$modify=false)
    {
        $id.=$id."_Documenti_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();
        $canModify=false;

        #documenti----------------------------------
        $curId=$id;
        $layout=new AA_JSON_Template_Layout($curId,array("type"=>"clean","gravity"=>4));
        $options_documenti=array();

        if($canModify)
        {
            $options_documenti[]=array("id"=>"ordine","header"=>array("<div style='text-align: center'>n.</div>",array("content"=>"textFilter")),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int");
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Categorie</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"destinatariDescr","header"=>array("<div style='text-align: center'>Destinatari</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>120,"css"=>array("text-align"=>"center"));
        }
        else
        {
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Categorie</div>",array("content"=>"textFilter")),"width"=>400, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"destinatariDescr","header"=>array("<div style='text-align: center'>Destinatari</div>",array("content"=>"textFilter")),"width"=>400, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>100,"css"=>array("text-align"=>"center"));
        }

        $documenti=new AA_JSON_Template_Generic($curId."_Allegati_Table",array("view"=>"datatable", "select"=>true,"scrollX"=>false,"css"=>"AA_Header_DataTable","hover"=>"AA_DataTable_Row_Hover","columns"=>$options_documenti));

        $storage=AA_Storage::GetInstance();

        $documenti_data=array();
        foreach($object->GetAllegati() as $id_doc=>$curDoc)
        {
            if($curDoc->GetUrl() == "")
            {
                $view='AA_MainApp.utils.callHandler("wndOpen", {url: "storage.php?object='.$curDoc->GetFileHash().'"},"'.$this->id.'")';
                $view_icon="mdi-floppy";
                $tip="Scarica";

                if($storage->IsValid())
                {
                    $file=$storage->GetFileByHash($curDoc->GetFileHash());
                    if($file->IsValid())
                    {
                        if(strpos($file->GetmimeType(),"pdf",0) !==false)
                        {
                            $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curDoc->GetFileHash().'"},"'.$this->id.'")';
                            $view_icon="mdi-eye";
                            $tip="Consulta";
                        }
                    }
                }
            }
            else 
            {
                $view='AA_MainApp.utils.callHandler("wndOpen", {url: "'.$curDoc->GetUrl().'"},"'.$this->id.'")';
                $view_icon="mdi-eye";
                $tip="Naviga (in un'altra finestra)";
            }
            
            
            $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            $copy='AA_MainApp.utils.callHandler("dlg", {task:"GetSierCopyAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            if($canModify) $ops="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='".$tip."' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a><a class='AA_DataTable_Ops_Button' title='Copia' onClick='".$copy."'><span class='mdi mdi-content-copy'></span></a><a class='AA_DataTable_Ops_Button' title='Modifica' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
            else $ops="<div class='AA_DataTable_Ops' style='justify-content: center'><a class='AA_DataTable_Ops_Button' title='".$tip."' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a></div>";
            $docDestinatari=array();
            foreach($curDoc->GetDestinatariDescr(true) as $curDestinatario)
            {
                $docDestinatari[]="<span class='AA_Label AA_Label_LightGreen'>".$curDestinatario."</span>";
            }
            $docTipo=array();
            foreach($curDoc->GetTipoDescr(true) as $curTipo)
            {
                $docTipo[]="<span class='AA_Label AA_Label_LightGreen'>".$curTipo."</span>";
            }
            
            $documenti_data[]=array("id"=>$id_doc,"ordine"=>$curDoc->GetOrdine(),"destinatariDescr"=>implode("&nbsp;",$docDestinatari),"estremi"=>$curDoc->GetEstremi(),"tipoDescr"=>implode("&nbsp;",$docTipo),"tipo"=>$curDoc->GetTipo(),"aggiornamento"=>$curDoc->GetAggiornamento(),"ops"=>$ops);
        }
        $documenti->SetProp("data",$documenti_data);
        if(sizeof($documenti_data) > 0) 
        {
            $layout->AddRow($documenti);
        }
        else 
        {
            $layout->AddRow(new AA_JSON_Template_Template($id."_OC_Documenti_Void",array("type"=>"clean","template"=>"<div style='display:flex; justify-content:center; align-items:center; width:100%;height:100%'><span>Non sono presenti documenti</span></div>")));
        }
        #--------------------------------------

        return $layout;
    }

    //template rendiconti
    public function Template_OC_Rendiconti($id,$object=null,$comune=null,$canModify=false)
    {
        $id.=$id."_Rendiconti_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();

        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $rendiconti=$comune->GetRendiconti(true);

        if($id=="") $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_RENDICONTI_COMUNALI."_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI;
        else  $id.="_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        $multiview=new AA_JSON_Template_Multiview($id."_Multiview_".$object->GetId(),array(
            "type" => "clean",
            "css" => "AA_Detail_Content",
            "value" => $id."_RendicontiPersonaleBox")
        );

        //---------------------------- header --------------------------------
        $header = new AA_JSON_Template_Layout($id . "_Header" . "_".$object->GetId(), array("type" => "clean", "height" => 38, "css" => "AA_SectionContentHeader"));
        $layout_tab=new AA_JSON_Template_Layout($id . "_Layout_TabBar_".$object->GetId(),array("type"=>"clean","minWidth"=>500));
        $gravity_tabbar=4;
        $rendicontiOpts=array(
            array("id"=>$id."_RendicontiRiepilogoBox","value"=>"Prospetto riassuntivo"),
            array("id"=>$id."_RendicontiSeggiBox","value"=>"Componenti seggi"),
            array("id"=>$id."_RendicontiPersonaleBox","value"=>"<span style='font-size:smaller'>Lavoro straordinario e missioni</span>"),
            array("id"=>$id."_RendicontiPersonaleDetBox","value"=>"<span style='font-size:smaller'>Assunzione personale a tempo determinato</span>"),
            array("id"=>$id."_RendicontiBuoniBox","value"=>"Buoni pasto"),
            array("id"=>$id."_RendicontiServiziBox","value"=>"Beni e servizi"));
        if($rendiconti['ras']['caricamento_allegati']==1)
        {
            $rendicontiOpts[]= array("id"=>$id."_RendicontiAllegatiBox","value"=>"Allegati");
        }

        $layout_tab->AddCol(new AA_JSON_Template_Generic($id . "_TabBar_".$object->GetId(), array(
            "view" => "tabbar",
            "gravity"=>$gravity_tabbar,
            "borderless" => true,
            "value" => $id."_RendicontiRiepilogoBox",
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_Multiview_".$object->GetId(),
            "options" => $rendicontiOpts
            )
        ));
        $header->AddCol($layout_tab);
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#ebf0fa","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        //$toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning",array("view"=>"label","label"=>$warning,"align"=>"center")));
        /*
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiGenerali_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica dati generali dei risultati",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRisultatiGeneraliModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }*/
        //$layout->AddRow($toolbar);
        $layout->AddRow($header);
        //---------------------------------------------------------------------
        $layout->AddRow($multiview);
        //------------------------------ riepilogo -------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiRiepilogoBox",array("type"=>"clean"));
        $box=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar("",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>180)));
        $title="Prospetto riassuntivo generale";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-cog",
                "label"=>"Genera report",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>180,
                "tooltip"=>"Genera il report in formato pdf con i dati inseriti fino a questo momento",
                "click"=>'AA_MainApp.utils.callHandler("pdfPreview", {url: "'.$this->GetTaskManagerUrl().'?task=GetSierOCRendicontiExportPdf&id='.$object->GetId().'&id_comune='.$comune->GetProp('id_comune').'"},"'.$this->id.'")'
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        $totale=0;
        //content
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div style='width:70%;text-align:center'>Spese presentate a rimborso</div><div style='width:30%; text-align:center'>Importo totale</div></div>"));
        $box->AddRow($header);
        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:100%;height:100%;'><div style='font-weight:400;width:70%; min-width:70%; padding-left:20px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 20px'>#value#</div></div>";
        //competenze seggi
        $value=0;
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $value+=$rendiconti['seggi']['competenze']['importo'];
            $totale+=$rendiconti['seggi']['competenze']['importo'];
        }
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $value+=$rendiconti['seggi']['missioni']['importo'];
            $totale+=$rendiconti['seggi']['missioni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Competenze corrisposte ai componenti dei seggi (comprensiva di missioni):","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $value=0;
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $value+=$rendiconti['comune']['straordinario']['importo'];
            $totale+=$rendiconti['comune']['straordinario']['importo'];
        }
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $value+=$rendiconti['comune']['missioni']['importo'];
            $totale+=$rendiconti['comune']['missioni']['importo'];
        }
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $value+=$rendiconti['comune']['oneri']['importo'];
            $totale+=$rendiconti['comune']['oneri']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Lavoro straordinario e missioni dei dipendenti (compresi oneri):","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right"),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $value=0;
        if(isset($rendiconti['personale_det']))
        {
           foreach($rendiconti['personale_det'] as $key=>$val)
           {
                $value+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
                $totale+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
           }
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Assunzione di personale a tempo determinato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $value=0;
        if(isset($rendiconti['buoni']['importo']))
        {
            $value+=$rendiconti['buoni']['importo'];
            $totale+=$rendiconti['buoni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Buoni pasto dei dipendenti addetti al servizio elettorale:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right"),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        
        $software=0;
        $trasporto=0;
        $materiale=0;
        $propaganda=0;
        $collegamenti=0;
        $altro=0;
        $spese_postali=0;
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $key=>$val)
            {
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_PROPAGANDA_ELETTORALE) $propaganda+=floatVal($val['importo']);              
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_COLLEGAMENTI) $collegamenti+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_ALTRO) $altro+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_MATERIALE_ALLESTIMENTO) $materiale+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_SPESE_POSTALI) $spese_postali+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_STAMPATI_SOFTWARE) $software+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_TRASPORTO_ARREDAMENTO) $trasporto+=floatVal($val['importo']);
                $totale+=floatVal($val['importo']);
            }
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Stampati o software sostitutivi non forniti direttamente dalla Regione o dallo Stato:","value"=>AA_Utils::number_format($software,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Trasporto del materiale elettorale e degli arredi dei seggi - Allestimento dei seggi:","value"=>AA_Utils::number_format($trasporto,2,",","."),"value_align"=>"right"),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Acquisto di materiale di consumo per l’allestimento dei seggi:","value"=>AA_Utils::number_format($materiale,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Spese per la propaganda elettorale:","value"=>AA_Utils::number_format($propaganda,2,",","."),"value_align"=>"right"),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Collegamenti telefonici straordinari ai fini della raccolta dei dati elettorali:","value"=>AA_Utils::number_format($collegamenti,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Spese postali e telegrafiche:","value"=>AA_Utils::number_format($spese_postali,2,",","."),"value_align"=>"right"),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Altre spese indispensabili per gli adempimenti elettorali:","value"=>AA_Utils::number_format($altro,2,",","."),"value_align"=>"right"),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>TOTALE SPESE PRESENTATE A RIMBORSO:</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".AA_Utils::number_format($totale,2,",",".")."</span>","value_align"=>"right"),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $box->AddRow(new AA_JSON_Template_Generic());
        $generaleLayout->AddRow($box);
        $multiview->AddCell($generaleLayout);
        //------------------------------------------------------------------------

        //-------------------------------- Competenze seggio -----------------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiSeggiBox",array("type"=>"clean"));
        $first_row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $generaleLayout->addRow($first_row);
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeSeggio_Box",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeSeggio_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze corrisposte ai componenti dei seggi elettorali";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRendicontiSpesePersonaleCompetenzeSeggio_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica le competenze spettanti ai componenti dei seggi elettorali",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiSeggiModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:280px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 50px'>#value#</div></div>";
        $template_short="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:200px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 10px'>#value#</div></div>";
        //competenze seggi
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_liquidazione']))
        {
            $value=$rendiconti['seggi']['competenze']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimento di liquidazione:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><span>Trattamento di missione presidenti di seggio</span></div>"));
        //$row->addCol($val);
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_pagamento']))
        {
            $value=$rendiconti['seggi']['competenze']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandato di pagamento:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        //$row->addCol($val);
        $box->addRow($val);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol(new AA_JSON_Template_Generic());
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $value=$rendiconti['seggi']['competenze']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>2,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"left"),
            "css"=>array("background-color"=>"","border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $box->addRow($header);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['estremi_liquidazione']))
        {
            $value=$rendiconti['seggi']['missioni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimento di liquidazione:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        //$row->addCol($val);
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['estremi_pagamento']))
        {
            $value=$rendiconti['seggi']['missioni']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandato di pagamento:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $box->addRow($val);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['componenti']))
        {
            $value=$rendiconti['seggi']['missioni']['componenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"n. missioni:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['km']))
        {
            $value=$rendiconti['seggi']['missioni']['km'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Km percorsi:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->AddRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol(new AA_JSON_Template_Generic());
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $value=$rendiconti['seggi']['missioni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>2,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->AddRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta:<li>l'effettiva partecipazione dei componenti dei seggi per tutta la durata delle operazioni elettorali e l'applicazione ad essi degli onorari indicati nella circolare dell'Amministrazione regionale in materia di rendicontazione delle spese sostenute dai Comuni.</li></ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
        ));
        $row->AddRow($val);
        $box->AddRow($row);
        $box->AddRow(new AA_JSON_Template_Generic("",array("height"=>10)));
        $first_row->AddCol($box);
        $multiview->AddCell($generaleLayout);
        //------------------------------------------------------------------------------------------------
      
        //--------------------------- Spese Personale ----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiPersonaleBox",array("type"=>"clean"));
        $first_row=new AA_JSON_Template_Layout($id."_Personale_FirstRow",array("type"=>"clean"));
        $generaleLayout->addRow($first_row);
        //$second_row=new AA_JSON_Template_Layout($id."_Personale_SecondRow",array("type"=>"clean"));
        //$generaleLayout->addRow($second_row);
        //---------------- Competenze comune ----------------
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeComune_Box",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeComune_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti al personale per lavoro straordinario e missioni";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyComuneRendicontiPersonaleIndeterminato_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica le competenze spettanti al personale per straordinario e missioni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiPersonaleIndeterminatoModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div style='width:60%'>Lavoro straordinario</div><div style='width:40%'>Missioni</div></div>"));
        $box->AddRow($header);

        //content
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_autorizzazione']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_autorizzazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di autorizzazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_autorizzazione']))
        {
            $value=$rendiconti['comune']['missioni']['estremi_autorizzazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di autorizzazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_liquidazione']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_liquidazione']))
        {
            $value=$rendiconti['comune']['missioni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_pagamento']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['km']))
        {
            $value=$rendiconti['comune']['missioni']['km'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Km percorsi:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['periodo_max']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_max']);
            $value="dal ".$periodo[0]." al ".$periodo[1];
        }
        
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo autorizzato:","value"=>$value,"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['periodo_effettivo']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_effettivo']);
            $value="dal ".$periodo[0]." al ".$periodo[1];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo effettivo:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['dipendenti']))
        {
            $value=$rendiconti['comune']['missioni']['dipendenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti che hanno effettuato missioni:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['dipendenti_max']))
        {
            $value=$rendiconti['comune']['straordinario']['dipendenti_max'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti autorizzati:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['dipendenti_effettivi']))
        {
            $value=$rendiconti['comune']['straordinario']['dipendenti_effettivi'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti con straordinario:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $value=$rendiconti['comune']['missioni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['ore_max']))
        {
            $value=$rendiconti['comune']['straordinario']['ore_max'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Ore autorizzate:","value"=>$value,"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['ore_effettive']))
        {
            $value=$rendiconti['comune']['straordinario']['ore_effettive'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Ore effettive:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $value=$rendiconti['comune']['straordinario']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div>Oneri</div></div>"));
        $box->AddRow($header);
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['estremi_pagamento']))
        {
            $value=$rendiconti['comune']['oneri']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento oneri:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            //"css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['dettagli']))
        {
            $dettagli=explode("|",$rendiconti['comune']['oneri']['dettagli']);
            $value="cpdel: ".AA_Utils::number_format($dettagli[0],2,",",".")." - irap: ".AA_Utils::number_format($dettagli[1],2,",",".")." - altro (".$dettagli[3]."): ".AA_Utils::number_format($dettagli[2],2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Dettaglio oneri:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            //"css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $value=$rendiconti['comune']['oneri']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato per oneri:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);
       
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta che:<li>sono stati rispettati i limiti per il lavoro straordinario elettorale previsti nell'art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68;</li>";
        $value.="<li>la retribuzione per il lavoro straordinario di cui si chiede il rimborso è stata corrisposta ai dipendenti che potevano essere retribuiti con il compenso per prestazioni straordinarie in base al C.C.N.L. da applicarsi per il periodo considerato;</li>";
        $value.="<li>sono state applicate le tariffe orarie per il lavoro straordinario previste dal C.C.N.L. vigente nel periodo considerato;</li>";
        $value.="<li>sono state rispettate le disposizioni contrattuali e legislative in materia di trattamento di trasferta dei dipendenti comunali.</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>3,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify","font-size"=>"smaller")
        ));
        $row->AddCol($val);
        $value="<ul>In caso di più consultazioni si attesta:<li>il rispetto dei limiti per il lavoro straordinario elettorale, previsti nell’art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68, complessivamente per le diverse consultazioni;</li>";
        $value.="<li>il rispetto del riparto delle spese tra gli enti interessati alle consultazioni indicato nelle circolari in materia della Regione e dello Stato:</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>2,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify","font-size"=>"smaller")
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $first_row->AddCol($box);
        //---------------------------------------------------
        $multiview->addCell($generaleLayout);
        //-------------------------------------------------------------------------------------

        //----------------------------- Spese personale a tempo determinato -------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiPersonaleDetBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeTempoDet_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti per il personale a tempo determinato";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_AddnewRendicontiSpesePersonaleCompetenzeTempoDet_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi delle competenze spettanti per il personale a tempo determinato",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiPersonaleDeterminatoModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->AddRow($toolbar);
        
        //content
        $rendiconti=$comune->GetRendiconti(true);
        if(isset($rendiconti['personale_det']) && sizeof($rendiconti['personale_det'])>0)
        {
            $data=array();
            foreach($rendiconti['personale_det'] as $key=>$val)
            {
                $ops="&nbsp;";
                if($canModify)
                {
                    $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiPersonaleDeterminatoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_personale_det:'".$key."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiConfirmTrashPersonaleDeterminatoDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_personale_det:'".$key."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='Modifica voce relativa al personale assunto a tempo determinato' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                }
        
                $estremi="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $estremi.="<div style='display:flex; width:100%'><div style='width:25%;min-width:25%'>Assunzione:</div><div>".$val['estremi_assunzione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Liquidazione:</div><div>".$val['estremi_liquidazione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Pagamento:</div><div>".$val['estremi_pagamento']."</div></div>";
                //$estremi.="<div style='display:flex;width:100%'><div style='width:25%'>periodo:</div><div> dal ".$val['periodo_dal']." al ".$val['periodo_al']."</div></div>";
                $estremi.="</div>";

                $oneri="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $oneri.="<div style='display:flex; width:100%'><div style='width:40%;min-width:40%'>Estremi pagamento:</div><div>".$val['oneri_pagamento']."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Cpdel:</div><div>".AA_Utils::number_format($val['oneri_cpdel'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Irap:</div><div>".AA_Utils::number_format($val['oneri_irap'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Altro:</div><div>".AA_Utils::number_format($val['oneri_altro'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Altro(descrizione):</div><div>".$val['oneri_altro_desc']."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Importo presentato:</div><div>".AA_Utils::number_format($val['oneri_importo'],2,",",".")."</div></div>";
                $oneri.="</div>";

                $periodo="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%;font-size:smaller'>";
                $periodo.="<div style='display:flex; width:100%'><div style='width:25%'>dal:</div><div>".substr($val['periodo_dal'],0,10)."</div></div>";
                $periodo.="<div style='display:flex; width:100%'><div style='width:25%'>al:</div><div>".substr($val['periodo_al'],0,10)."</div></div>";
                $periodo.="</div>";

                $data[]=array("id"=>$key,"tipologia"=>$val['tipologia'],"qualifica"=>$val['qualifica'],"importo"=>AA_Utils::number_format($val['importo'],2,",","."),
                "estremi"=>$estremi,
                "oneri"=>$oneri,
                "periodo"=>$periodo,
                "ops"=>$ops
                );
            }

            if($canModify)
            {
                $columns=array(
                    array("id"=>"qualifica","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"periodo","header"=>array("<div style='text-align: center'>Periodo</div>"),"width"=>120, "css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"width"=>130, "css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"oneri","header"=>array("<div style='text-align: center'>Oneri</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>90, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller"))
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>150,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "eventHandlers"=>array("onresize"=>array("handler"=>"adjustRowHeight","module_id"=>$this->GetId())),
                "columns"=>$columns,
                "data"=>$data
            ));

            $generaleLayout->addRow($table);

            $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
            $value="<ul>Si attesta che:<li>la spesa di cui si chiede il rimborso per l'assunzione di personale a tempo determinato è relativa al lavoro prestato nel periodo elettorale indicato nella circolare della Regione in materia di rendicontazione;</li>";
            $value.="<li>i contratti individuali di lavoro a tempo determinato, stipulati dal Comune, danno luogo alla costituzione di un rapporto di lavoro subordinato con l'Ente;</li>";
            $value.="</ul>";
            $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
            ));
            $row->AddRow($val);
            $generaleLayout->addRow($row);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $multiview->AddCell($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------------ Buoni pasto ------------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiBuoniBox",array("type"=>"clean"));
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeBuoniPasto_Box",array("type"=>"clean"));
        $generaleLayout->AddRow($box);
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeBuoniPasto_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti per i buoni pasto dei dipendenti addetti";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRendicontiSpesePersonaleCompetenzeBuoniPasto_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica delle competenze per i buoni pasto dei dipendenti addetti al servizio elettorale",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiBuoniModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        //content
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_liquidazione']))
        {
            $value=$rendiconti['buoni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_pagamento']))
        {
            $value=$rendiconti['buoni']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['erogati']))
        {
            $value=$rendiconti['buoni']['erogati'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Buoni pasto erogati:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['dipendenti']))
        {
            $value=$rendiconti['buoni']['dipendenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti che hanno usufruito dei buoni:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['periodo']))
        {
            $value=explode("|",$rendiconti['buoni']['periodo']);
            $value="dal ".$value[0]." al ".$value[1];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo di utilizzo:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['buoni']['importo']))
        {
            $value=$rendiconti['buoni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>2,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="";
        if(isset($rendiconti['buoni']['note']))
        {
            $value=$rendiconti['buoni']['note'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"note:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta che:<li>i buoni pasto sono stati erogati ai dipendenti per le sole giornate di lavoro straordinario elettorale effettuate e nel rispetto delle condizioni e limiti previsti nel C.C.N.L. vigente nel periodo considerato;</li>";
        $value.="<li>l'Amministrazione comunale aveva già attivato il servizio per l'erogazione dei buoni pasto ai propri dipendenti;</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
        "template"=>$value,
        "gravity"=>1,
        "autoheight"=>true,
        "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
        ));
        $row->AddRow($val);
        $box->addRow($row);
        $multiview->AddCell($generaleLayout);
        //--------------------------------------------------------------------------------------

        //----------------------------- Spese per beni e servizi -------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiServiziBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RendicontiServizi",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Beni e servizi non forniti direttamente dalla Regione","align"=>"center")));
        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi un nuovo elemento",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiServiziModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->addRow($toolbar);

        $rendiconti=$comune->GetRendiconti(true);
        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        if(isset($rendiconti['servizi']) && sizeof($rendiconti['servizi'])>0)
        {
            $data=array();
            foreach($rendiconti['servizi'] as $idServizio=>$curServizio)
            {
                $ops="&nbsp;";
                if($canModify)
                {
                    $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiServiziModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_servizio:'".$idServizio."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiConfirmTrashServiziDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_servizio:'".$idServizio."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    if($curServizio['note']!="") $note='<a href="#" title="Visualizza le note" onClick=\'let note=CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse("'.base64_encode($curServizio['note']).'"));AA_MainApp.ui.modalBox(note,"Note")\'><span class="mdi mdi-clipboard-text"></span></a>';
                    else $note="";
                    $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;$note<a class='AA_DataTable_Ops_Button' title='Modifica il bene/servizio' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                }
        
                $estremi="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $estremi.="<div style='display:flex; width:100%'><div style='width:25%;min-width:25%'>Impegno:</div><div>".$curServizio['estremi_impegno']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Liquidazione:</div><div>".$curServizio['estremi_liquidazione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Pagamento:</div><div>".$curServizio['estremi_pagamento']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Fattura:</div><div>".$curServizio['estremi_fattura']."</div></div>";
                $estremi.="</div>";
                $data[]=array("id"=>$idServizio,"tipologia"=>$tipologia[$curServizio['tipologia']],"descrizione"=>$curServizio['descrizione'],"ditta"=>$curServizio['ditta'],"importo"=>AA_Utils::number_format($curServizio['importo'],2,",","."),
                "estremi"=>$estremi,
                "ops"=>$ops
                );
            }

            if($canModify)
            {
                $columns=array(
                    array("id"=>"tipologia","header"=>array("<div style='text-align: center'>Tipologia</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"width"=>120,"css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>90, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    array("id"=>"tipologia","header"=>array("<div style='text-align: center'>Tipologia</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller"))
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>100,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "eventHandlers"=>array("onresize"=>array("handler"=>"adjustRowHeight","module_id"=>$this->GetId())),
                "data"=>$data
            ));

            $generaleLayout->addRow($table);
            
            $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
            $value="<ul>Si attesta che:<li>Nell'ipotesi di acquisto di nuovi tabelloni per la propaganda elettorale, si attesta che l'importo di cui si chiede il rimborso costituisce il 10% del totale della relativa spesa:</li>";
            $value.="<li>l'eventuale spesa richiesta a rimborso per collegamenti telefonici e' relativa al noleggio di telefoni cellulari o all’attivazione di collegamenti telefonici straordinari e al relativo traffico telefonico nei giorni della votazione per la raccolta dei dati elettorali.</li>";
            $value.="</ul>";
            $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
            ));
            $row->AddRow($val);
            $generaleLayout->addRow($row);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $multiview->addCell($generaleLayout);
        //---------------------------------------------------------------------------------------

        //----------------------------------------- Allegati ----------------------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiAllegatiBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RendicontiAllegati",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Allegati","align"=>"center")));
        if($canModify > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi un nuovo allegato",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRendicontiAllegatiModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->addRow($toolbar);

        $box_files=new AA_JSON_Template_Layout("",array("gravity"=>7,"type"=>"clean"));
        if(isset($rendiconti['ras']['allegati']) && sizeof($rendiconti['ras']['allegati']) > 0)
        {
            $data=array();
            $storage=AA_Storage::GetInstance($this->oUser);
            foreach($rendiconti['ras']['allegati'] as $idAllegato=>$curAllegato)
            {
                if($idAllegato !="")
                {
                    $ops="&nbsp;";
                    $view="AA_MainApp.utils.callHandler('wndOpen', {url: 'storage.php?object=".$curAllegato['file']."&attachment=true'},'".$this->id."')";
                    $view_icon="mdi-floppy";
                    $tip="Scarica";
    
                    if($storage->IsValid())
                    {
                        $file=$storage->GetFileByHash($curAllegato['file']);
                        if($file->IsValid())
                        {
                            AA_Log::Log(__METHOD__." - mime type: ".$file->GetmimeType()." - filename: ".$file->GetName(),100);
                            if(strpos($file->GetmimeType(),"pdf",0) !==false)
                            {
                                $view="AA_MainApp.utils.callHandler('pdfPreview', {url: 'storage.php?object=".$curAllegato['file']."'},'".$this->id."')";
                                $view_icon="mdi-eye";
                                $tip="Consulta";
                            }
                        }
                    }
    
                    if($canModify)
                    {
                        
                        $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiAllegatiModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",file:'".$idAllegato."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                        $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierOCRendicontiConfirmTrashAllegatiDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",file:'".$idAllegato."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                        $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='".$tip."' onClick=\"".$view."\"><span class='mdi ".$view_icon."'></span></a><a class='AA_DataTable_Ops_Button' title='Modifica l&apos;allegato' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina l&apos;allegato' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                    }
                    else
                    {
                        $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='".$tip."' onClick=\"".$view."\"><span class='mdi ".$view_icon."'></span></a>&nbsp;</div>";
                    }
                    $data[]=array("id"=>$idAllegato,"file"=>$curAllegato['file'],
                    "data_prov"=>substr($curAllegato['aggiornamento'],0,10),
                    "estremi"=>$curAllegato['estremi'],
                    "ops"=>$ops
                    );
                }
            }

            if($canModify)
            {
                $columns=array(
                    //array("id"=>"data_prov","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: left'>Estremi</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>150, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    //array("id"=>"data","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Estremi</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>24,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));

            $box_files->addRow($table);
        }
        else
        {
            $box_files->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $generaleLayout->AddRow($box_files);
        $multiview->addCell($generaleLayout);
        //---------------------------------------------------------------------------------------

        return $layout;
    }

    //Template OC risultati
    public function Template_OC_Risultati($id,$object=null,$comune=null,$modify=false)
    {
        $id.=$id."_Risultati_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));
        
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $risultati=$comune->GetRisultati(true);
        $rows_fixed_height=50;

        $id.="_".static::AA_UI_LAYOUT_RISULTATI_COMUNALI;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        $multiview=new AA_JSON_Template_Multiview($id . "_Multiview_".$object->GetId(),array(
            "type" => "clean",
            "css" => "AA_Detail_Content",
            "value" => $id."_RisultatiGeneraleBox")
        );

        //---------------------------- header --------------------------------
        $header = new AA_JSON_Template_Layout($id . "_Header" . "_".$object->GetId(), array("type" => "clean", "height" => 38, "css" => "AA_SectionContentHeader"));
        $canModify=false;
        $layout_tab=new AA_JSON_Template_Layout($id . "_Layout_TabBar_".$object->GetId(),array("type"=>"clean","minWidth"=>500));
        $gravity_tabbar=4;
        $layout_tab->AddCol(new AA_JSON_Template_Generic($id . "_TabBar_".$object->GetId(), array(
            "view" => "tabbar",
            "gravity"=>$gravity_tabbar,
            "borderless" => true,
            "value" => $id."_RisultatiGeneraleBox",
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_Multiview_".$object->GetId(),
            "options" => array(
                array("id"=>$id."_RisultatiGeneraleBox","value"=>"Risultati generali"),
                array("id"=>$id."_RisultatiCoalizioniBox","value"=>"Voti candidati Presidente"),
                array("id"=>$id."_RisultatiListeBox","value"=>"Voti Liste"),
                array("id"=>$id."_RisultatiPreferenzeBox","value"=>"Voti candidati Consiglio Regionale"),
            )
        )));
        $header->AddCol($layout_tab);
        $layout->AddRow($header);
        //---------------------------------------------------------------------
        $layout->AddRow($multiview);

        if(sizeof($risultati)>0)
        {
            $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
            if($analisi[0]==true && $risultati['sezioni_scrutinate'] > 0)
            {
                $color="orange";
                if($analisi[2]==true) $color="red";
                $onClick="AA_MainApp.utils.callHandler('dlg', {task:'GetSierAnalisiRisultatiDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')";
                $warning='<div><span class="mdi mdi-alert" style="color:'.$color.'"></span>&nbsp;<a href="#" onClick="'.$onClick.'">Sono presenti delle criticità, fai click qui per visualizzarle.</span></div>';
            }
            else
            {
                $warning='<div><span class="mdi mdi-check-circle" style="color:green"></span>&nbsp;<span>Le informazioni sono congruenti.</span></div>';
            }    
        }
        else 
        {
            $warning="<div>&nbsp;</div>";
        }
        
        //--------------------------- Dati generali ----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiGeneraleBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning",array("view"=>"label","label"=>$warning,"align"=>"center")));

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
        {
            
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiGenerali_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica dati generali dei risultati",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyRisultatiGeneraliDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        $generaleLayout->addRow($toolbar);

        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:1%;'><div style='font-weight:700;width: 350px;'>#title#</div><div style='width: 150px; text-align: right; padding-right:50px;'>#value#</div></div>";
        
        //Sezioni scrutinate
        if(isset($risultati['sezioni_scrutinate']))$value=$risultati['sezioni_scrutinate'];
        else $value=0;
        $sezioni=new AA_JSON_Template_Template($id."_SezioniScrutinate",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Sezioni scrutinate:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //votanti maschi
        if(isset($risultati['votanti_m']))$value=$risultati['votanti_m'];
        else $value=0;
        $votanti_m=new AA_JSON_Template_Template($id."_VotantiM",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Votanti maschi:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //votanti femmine
        if(isset($risultati['votanti_f']))$value=$risultati['votanti_f'];
        else $value=0;
        $votanti_f=new AA_JSON_Template_Template($id."_VotantiF",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Votanti femmine:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        $riga=new AA_JSON_Template_Layout($id."_DatiGeneraliRow",array("css"=>array("border-bottom"=>"1px solid #dadee0 !important","type"=>"clean")));
        $riga->AddRow($sezioni);
        $riga->AddRow($votanti_m);
        $riga->AddRow($votanti_f);
        //$generaleLayout->AddRow($riga);

        //Voti contestati non assegnati Presidente
        if(isset($risultati['voti_contestati_na_pre']))$value=$risultati['voti_contestati_na_pre'];
        else $value=0;
        $voti_contestati_pre=new AA_JSON_Template_Template($id."_VotiContestatiNA_pre",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti voti contestati e non assegnati (Presidente):","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Voti contestati non assegnati liste
        if(isset($risultati['voti_contestati_na_liste']))$value=$risultati['voti_contestati_na_liste'];
        else $value=0;
        $voti_contestati_liste=new AA_JSON_Template_Template($id."_VotiContestatiNA_liste",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti voti contestati e non assegnati (Liste):","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Voti contenenti voti validi solo per il presidente
        if(isset($risultati['voti_solo_presidente']))$value=$risultati['voti_solo_presidente'];
        else $value=0;
        $voti_solo_presidente=new AA_JSON_Template_Template($id."_VotiSoloPresidente",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede valide solo per i candidati Presidente:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede nulle
        if(isset($risultati['schede_nulle']))$value=$risultati['schede_nulle'];
        else $value=0;
        $schede_nulle=new AA_JSON_Template_Template($id."_SchedeNulle",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede nulle:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede bianche
        if(isset($risultati['schede_bianche']))$value=$risultati['schede_bianche'];
        else $value=0;
        $schede_bianche=new AA_JSON_Template_Template($id."_SchedeBianche",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede bianche:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede contenenti esclusivamente voti nulli
        if(isset($risultati['schede_voti_nulli']))$value=$risultati['schede_voti_nulli'];
        else $value=0;
        $schede_voti_nulli=new AA_JSON_Template_Template($id."_SchedeVotiNulli",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti esclusivamente voti nulli:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //$riga=new AA_JSON_Template_Layout($id."_SecondRow",array("height"=>$rows_fixed_height,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddRow($schede_bianche);
        $riga->AddRow($schede_nulle);
        $riga->AddRow($schede_voti_nulli);
        $riga->AddRow($voti_solo_presidente);
        $riga->AddRow($voti_contestati_pre);
        $riga->AddRow($voti_contestati_liste);

        $generaleLayout->AddRow($riga);
        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0"))));

        //$generaleLayout->AddRow(new AA_JSON_Template_Generic());
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //----------------------------- Risultati voti coalizioni -----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiCoalizioniBox",array("type"=>"clean"));

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
        {
            $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiCoalizioni",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
            $toolbar->AddElement(new AA_JSON_Template_Generic($id."_WarningCoalizioni",array("view"=>"label","label"=>$warning,"align"=>"center")));
    
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiCoalizioni_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica dati delle coalizioni",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyRisultatiCoalizioniDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
            $generaleLayout->addRow($toolbar);
        }

        $platform=AA_Platform::GetInstance($this->oUser);
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:1%;'><div class='AA_DataView_Sier_item' style='display: flex; align-items: center; max-height:80px'><div style='display: flex; align-items: center; justify-content: center; height: 60px; width: 60px; border-radius: 50%; overflow: clip; margin-right: 1em;'><img src='#image#' height='100%'/></div><div style='font-weight:700;width: 350px;'>#title#</div><div style='width: 150px; text-align: right; padding-right: 50px'>#value#</div></div></div>";
        $coalizioni=$object->GetCoalizioni();
        if(sizeof($coalizioni)>0)
        {
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                if($curCoalizione->GetProp('image') != "")
                {
                    $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');
                }

                //voti coalizione
                if(isset($risultati['voti_presidente']) && isset($risultati['voti_presidente'][$idCoalizione])) $value=$risultati['voti_presidente'][$idCoalizione];
                else $value=0;
                $row=new AA_JSON_Template_Template($id."_VotiCoalizione_".$idCoalizione,array(
                    "template"=>$template,
                    "gravity"=>1,
                    "type"=>"clean",
                    "data"=>array("title"=>$curCoalizione->GetProp("nome_candidato").":","value"=>$value,"image"=>$curImagePath),
                    "css"=>array("border-right"=>"1px solid #dadee0")
                ));
                $generaleLayout->AddRow($row);
            }    
        }
        else
        {
            $generaleLayout->AddRow(new AA_JSON_Template_Generic());
        }

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));

        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------- Risultati voti liste --------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiListeBox",array("type"=>"clean"));

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
        {
            $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiListe",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
            $toolbar->AddElement(new AA_JSON_Template_Generic($id."_WarningListe",array("view"=>"label","label"=>$warning,"align"=>"center")));

            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiListe_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica voti Liste circoscrizionali",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCModifyRisultatiListeDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
            $generaleLayout->addRow($toolbar);
        }

        $platform=AA_Platform::GetInstance($this->oUser);
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
        $template="<div style='display: flex; align-items:center;justify-content: space-between; width:99%;height:100%;padding-left:1%;'><div style='display: flex; align-items: center; justify-content: center; height: 60px; width: 60px; border-radius: 50%; overflow: clip; margin-right: 1em;'><img src='#image#' height='100%'/></div><div style='font-weight:700; width: 250px'>#title#</div><div style='width: 80px; text-align:center'>#value#</div></div>";
        
        $liste=$object->GetListe(null,$comune->GetProp('id_circoscrizione'));
        //AA_Log::Log(__METHOD__." - liste: ".print_r($liste,true),100);
        if(sizeof($liste)>0)
        {
            $liste_data=array();
            foreach($liste as $idLista=>$curLista)
            {
                $candidati=$object->GetCandidati(null,$curLista,$comune->GetProp('id_circoscrizione'));
                if(sizeof($candidati)>0)
                {
                    if($curLista->GetProp('image') != "")
                    {
                        $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');
                    }
                    else
                    {
                        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                    }
    
                    $value=0;
                    if(isset($risultati['voti_lista']) && isset($risultati['voti_lista'][$idLista]) && $risultati['voti_lista'][$idLista]>0) $value=intVal($risultati['voti_lista'][$idLista]);
                    $liste_data[]=array("id"=>$idLista,"title"=>$curLista->GetProp("denominazione"),"value"=>$value,"image"=>$curImagePath);
                }
            }
            
            //AA_Log::Log(__METHOD__." - liste: ".print_r($liste_data,true),100);

            $dataview_liste=new AA_JSON_Template_Generic($id."_ListeDataView",array(
                "view"=>"dataview",
                "xCount"=>3,
                "module_id"=>$this->id,
                "type"=>array(
                    "type"=>"tiles",
                    "height"=>80,
                    "width"=>"auto",
                    "css"=>"AA_DataView_Sier_item",
                ),
                //"on" => array("onItemDblClick" => "AA_MainApp.utils.getEventHandler('ListaDblClick','".$this->GetId()."')"),
                "template"=>$template,
                "data"=>$liste_data
            ));
            $generaleLayout->AddRow($dataview_liste);
        }
        else
        {
            $generaleLayout->AddRow(new AA_JSON_Template_Template($id."_FakeListe",array("template"=>"non ci sono liste definite.")));
        }

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------ Risultati preferenze ---------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiPreferenzeBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiPreferenze",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_WarningRisultati",array("view"=>"label","label"=>$warning,"align"=>"center")));

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
        {   
            $modify_btn=new AA_JSON_Template_Generic($id."_OCCsvImportRisultatiPreferenze_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-archive-edit",
                 "label"=>"da CSV",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Importa da csv",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierOCRisultatiPreferenzeCsvImportDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->addElement($modify_btn);

            $modify_btn=new AA_JSON_Template_Generic($id."_OCModifyRisultatiPreferenze_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica preferenze",
                 "click"=>"AA_MainApp.utils.callHandler('RisultatiPreferenzeModifyAll', {task:\"GetSierOCModifyRisultatiPreferenzeMultiDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->addElement($modify_btn);
        }
        $generaleLayout->addRow($toolbar);

        $columns=array(
            array("id"=>"cognome","header"=>array("<div style='text-align: center'>Cognome</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"left")),
            array("id"=>"nome","header"=>array("<div style='text-align: center'>Nome</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"lista","header"=>array("<div style='text-align: center'>Lista</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"coalizione","header"=>array("<div style='text-align: center'>Coalizione</div>",array("content"=>"selectFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"voti","header"=>array("<div style='text-align: center'>Voti</div>",array("content"=>"textFilter")),"width"=>90, "css"=>array("text-align"=>"right"),"sort"=>"int")
        );

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
        {
            $columns[]=array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>100, "css"=>array("text-align"=>"center"));
        }

        $data=array();
        //$circoscrizioni=AA_Sier_Const::GetCircoscrizioni();

        $candidati=$object->GetCandidati(null,null,$comune->GetProp('id_circoscrizione'));
        foreach($candidati as $curCandidato)
        {
            $data[]=$curCandidato->GetProps();

            $index=sizeof($data)-1;
            $data[$index]['voti']=0;
            if(isset($risultati['voti_candidato'][$curCandidato->GetProp('id')])) $data[$index]['voti']=$risultati['voti_candidato'][$curCandidato->GetProp('id')]['voti'];
            //AA_Log::Log(__METHOD__." - candidato: ".print_r($curCandidato,true),100);

            if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
            {
                //$trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCandidatoDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$comune->GetProp('id').'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierOCModifyRisultatiPreferenzeDlg", postParams: {id: "'.$object->GetId().'",id_comune:"'.$comune->GetProp('id').'",id_candidato:"'.$curCandidato->GetProp("id").'",refresh: 1,refresh_obj_id:"'.$id.'"},module: "' . $this->id . '"},"'.$this->id.'")';
                $data[$index]['ops']="<div class='AA_DataTable_Ops' style='justify-content:center'><a class='AA_DataTable_Ops_Button' title='Modifica i voti del candidato' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a></div>";
            }
        }

        //AA_Log::Log(__METHOD__." - candidati: ".print_r($data,true),100);

        if(sizeof($candidati) > 0)
        {
            $table=new AA_JSON_Template_Generic($id."_PreferenzeCandidati", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
    
            $generaleLayout->addRow($table);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti candidati.</span></div>")));
        }

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        return $layout;
    }

    //Template OC affuenza
    public function Template_OC_Affluenza($id,$object=null,$comune=null,$modify=false)
    {
        $id.=$id."_Affluenza_Content";
        $operatore=AA_SierOperatoreComunale::GetInstance();
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));
        
        
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $id.="_".static::AA_UI_LAYOUT_AFFLUENZA_COMUNALE;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        
        $columns=array(
            array("id"=>"giornata","header"=>"<div style='text-align: center'>Giornata</div>","width"=>150, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"ore_12","header"=>"<div style='text-align: center'>Votanti ore 12</div>","fillspace"=>true, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ore_19","header"=>"<div style='text-align: center'>Votanti ore 19</div>","fillspace"=>true, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ore_22","header"=>"<div style='text-align: center'>Votanti ore 22</div>","fillspace"=>true, "css"=>array("text-align"=>"center"),"sort"=>"text")
            //array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>120, "css"=>array("text-align"=>"center"))
        );

        $data=array();
        $affluenza=$comune->GetAffluenza(true);
        if(sizeof($affluenza) > 0)
        {
            foreach($affluenza as $giornata=>$curAffluenza)
            {
                //AA_Log::Log(__METHOD__." - ".print_r($curAffluenza,true),100);
                {
                    $modify_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierOCAffluenzaModifyDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', giornata: "'.strtolower($giornata).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    $trash_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierOCAffluenzaTrashDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', giornata: "'.strtolower($giornata).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_AFFLUENZA)>0) $ops="<div class='AA_DataTable_Ops'><span>&nbsp;</span><a class='AA_DataTable_Ops_Button' title='Modifica dato' onClick='".$modify_op."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina dato' onClick='".$trash_op."'><span class='mdi mdi-trash-can'></span></a><span>&nbsp;</span></div>";
                    else $ops="&nbsp;";
                }
                $data[]=array("id"=>$giornata,"ops"=>$ops, "giornata"=>$giornata,"ore_12"=>$curAffluenza['ore_12'],"ore_19"=>$curAffluenza['ore_19'],"ore_22"=>$curAffluenza['ore_22']);
            }
            $table=new AA_JSON_Template_Generic($id."_View", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
        }
        else
        {
            $table=new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti dati.</span></div>"));
        }

        $layout->AddRow($table);
        return $layout;
    }

    //Template section detail, tab generale
    public function TemplateSierDettaglio_Allegati_Tab($object=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_ALLEGATI_BOX;

        if(!($object instanceof AA_Sier)) return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));
        
        $rows_fixed_height=50;
        $canModify=false;
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0) $canModify=true;

        #documenti----------------------------------
        $curId=$id;
        $layout=new AA_JSON_Template_Layout($curId,array("type"=>"clean","gravity"=>4));

        $toolbar=new AA_JSON_Template_Toolbar($curId."_Toolbar_allegati",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));

        $toolbar->AddElement(new AA_JSON_Template_Generic($curId."_Toolbar_Allegati_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Documenti</span>", "align"=>"center")));

        if($canModify)
        {
            //Pulsante di aggiunta documento
            $add_documento_btn=new AA_JSON_Template_Generic($curId."_AddAllegato_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-file-plus",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi allegato o link",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewAllegatoDlg\", params: [{id: ".$object->GetId()."}]},'$this->id')"
            ));

            $toolbar->AddElement($add_documento_btn);
        }
        else 
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }

        $layout->AddRow($toolbar);

        $options_documenti=array();

        if($canModify)
        {
            $options_documenti[]=array("id"=>"ordine","header"=>array("<div style='text-align: center'>n.</div>",array("content"=>"textFilter")),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int");
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Categorie</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"destinatariDescr","header"=>array("<div style='text-align: center'>Destinatari</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>120,"css"=>array("text-align"=>"center"));
        }
        else
        {
            $options_documenti[]=array("id"=>"ordine","header"=>array("<div style='text-align: center'>n.</div>",array("content"=>"textFilter")),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int");
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Categorie</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"destinatariDescr","header"=>array("<div style='text-align: center'>Destinatari</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>100,"css"=>array("text-align"=>"center"));
        }

        $documenti=new AA_JSON_Template_Generic($curId."_Allegati_Table",array("view"=>"datatable", "select"=>true,"scrollX"=>false,"css"=>"AA_Header_DataTable","hover"=>"AA_DataTable_Row_Hover","columns"=>$options_documenti));

        $storage=AA_Storage::GetInstance();

        $documenti_data=array();
        foreach($object->GetAllegati() as $id_doc=>$curDoc)
        {
            if($curDoc->GetUrl() == "")
            {
                $view='AA_MainApp.utils.callHandler("wndOpen", {url: "storage.php?object='.$curDoc->GetFileHash().'"},"'.$this->id.'")';
                $view_icon="mdi-floppy";
                $tip="Scarica";

                if($storage->IsValid())
                {
                    $file=$storage->GetFileByHash($curDoc->GetFileHash());
                    if($file->IsValid())
                    {
                        if(strpos($file->GetmimeType(),"pdf",0) !==false)
                        {
                            $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curDoc->GetFileHash().'"},"'.$this->id.'")';
                            $view_icon="mdi-eye";
                            $tip="Consulta";
                        }
                    }
                }
            }
            else 
            {
                $view='AA_MainApp.utils.callHandler("wndOpen", {url: "'.$curDoc->GetUrl().'"},"'.$this->id.'")';
                $view_icon="mdi-eye";
                $tip="Naviga (in un'altra finestra)";
            }
            
            
            $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            $copy='AA_MainApp.utils.callHandler("dlg", {task:"GetSierCopyAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            if($canModify) $ops="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='".$tip."' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a><a class='AA_DataTable_Ops_Button' title='Copia' onClick='".$copy."'><span class='mdi mdi-content-copy'></span></a><a class='AA_DataTable_Ops_Button' title='Modifica' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
            else $ops="<div class='AA_DataTable_Ops' style='justify-content: center'><a class='AA_DataTable_Ops_Button' title='".$tip."' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a></div>";
            $docDestinatari=array();
            foreach($curDoc->GetDestinatariDescr(true) as $curDestinatario)
            {
                $docDestinatari[]="<span class='AA_Label AA_Label_LightGreen'>".$curDestinatario."</span>";
            }
            $docTipo=array();
            foreach($curDoc->GetTipoDescr(true) as $curTipo)
            {
                $docTipo[]="<span class='AA_Label AA_Label_LightGreen'>".$curTipo."</span>";
            }
            
            $documenti_data[]=array("id"=>$id_doc,"ordine"=>$curDoc->GetOrdine(),"destinatariDescr"=>implode("&nbsp;",$docDestinatari),"estremi"=>$curDoc->GetEstremi(),"tipoDescr"=>implode("&nbsp;",$docTipo),"tipo"=>$curDoc->GetTipo(),"aggiornamento"=>$curDoc->GetAggiornamento(),"ops"=>$ops);
        }
        $documenti->SetProp("data",$documenti_data);
        if(sizeof($documenti_data) > 0) $layout->AddRow($documenti);
        else $layout->AddRow(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        #--------------------------------------
        
        return $layout;
    }

    //Template dettaglio riepilogo nomine
    public function TemplateDettaglio_Coalizioni_Riepilogo_Tab($object=null,$id="",$riepilogo_data=array())
    {
        //permessi
        $perms = $object->GetUserCaps($this->oUser);
        $canModify=false;
        if(($perms & AA_Const::AA_PERMS_WRITE) > 0) $canModify=true;
        
        $riepilogo_layout=new AA_JSON_Template_Layout($id."_Riepilogo_Layout",array("type"=>"clean"));

        if(is_array($riepilogo_data) && sizeof($riepilogo_data) > 0)
        {
            $riepilogo_template="<div style='display: flex; justify-content: space-between; align-items: center; height: 100%'><div style='display: flex; align-items: center; height: 98%; width: auto%; margin-left: 1em;'>"
            ."<img src='#image#' width='100px'/><div style='height: 100%; display: flex; flex-direction: column; align-items: flex-start; justify-content: space-evenly; margin-left: 1em;'><span class='AA_DataView_ItemTitle'>#denominazione#</span><span>Presidente: <b>#presidente#</b></span></div></div>"
            ."<div style='display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%; width: 120px; padding: 5px'><a title='Visualizza i dettagli' onclick='#onclick#' class='AA_Button_Link'><span class='mdi mdi-card-account-details'></span>&nbsp;<span>Dettagli</span></a></div></div>";
            $riepilogo_tab=new AA_JSON_Template_Generic($id."_Riepilogo_Tab",array(
                "view"=>"dataview",
                "filtered"=>true,
                "xCount"=>1,
                "module_id"=>$this->id,
                "tabbar"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_LISTE_BOX."_TabBar",
                "type"=>array(
                    "type"=>"tiles",
                    "height"=>150,
                    "width"=>"auto",
                    "css"=>"AA_DataView_Nomine_item",
                ),
                "template"=>$riepilogo_template,
                "data"=>$riepilogo_data,
                "eventHandlers"=>array("onItemDblClick"=>array("handler"=>"CoalizioneDblClick","module_id"=>$this->GetId()))
            ));
        }
        else
        {
            if($canModify) $riepilogo_tab=new AA_JSON_Template_Template($id."_Riepilogo_Tab",array("template"=>"<div style='display: flex; justify-content: center; align-items: center; width: 100%;height:100%'><div>Non sono presenti elementi, fai click sul pulsante 'Aggiungi' per aggiungerne.</div></div>"));
            else $riepilogo_tab=new AA_JSON_Template_Template($id."_Riepilogo_Tab",array("template"=>"<div style='display: flex; justify-content: center; align-items: center; width: 100%;height:100%'><div>Non sono presenti elementi.</div></div>"));
        }
        
        $toolbar_riepilogo=new AA_JSON_Template_Toolbar($id."_Toolbar_Riepilogo",array("height"=>38,"borderless"=>true));
        
        //Flag filtri
        $filter_id=$id."_".$object->GetId();
        $filter= AA_SessionVar::Get($filter_id);
        if($filter->isValid())
        {
            $label="<div style='display: flex; height: 100%; justify-content: flex-start; align-items: center;'>Mostra:";
            
            $values=(array)$filter->GetValue();
            
            //tutte
            $label.="&nbsp;<span class='AA_Label AA_Label_LightBlue'>tutte</span>";
            
            $label.="</div>";
        }
        else
        {
            $label="<div style='display: flex; height: 100%; justify-content: flex-start; align-items: center;'>Mostra:&nbsp;<span class='AA_Label AA_Label_LightBlue'>tutte</span></div>";
        }

        $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic($id."_Filter_Label",array("view"=>"label","label"=>$label, "width"=>400, "align"=>"left")));
        
        $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","gravity"=>1)));
        $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_Riepilogo_Intestazione",array("view"=>"label","label"=>"<span style='color:#003380'>Riepilogo Coalizioni e Liste</span>", "align"=>"center","gravity"=>10)));
        $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","gravity"=>1)));
        if($canModify)
        {            
            //Pulsante di Aggiunta nomina
            $addnew_btn=new AA_JSON_Template_Generic($id."_AddNewUp_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil-plus",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi coalizione",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewCoalizioneDlg\", params: [{id: ".$object->GetId()."}]},'$this->id')"
            ));
            
            //pulsante di filtraggio
            if($filter_id=="") $filter_id=$id;
            
            $filterDlgTask="GetSierCoalizioniFilterDlg";
            $filterClickAction="AA_MainApp.utils.callHandler('dlg',{task: '".$filterDlgTask."', params:[{filter_id: '".$filter_id."'}]},'".$this->id."')";

            $filter_btn = new AA_JSON_Template_Generic($id."_FilterUp_btn",array(
                "view"=>"button",
                "align"=>"right",
                "type"=>"icon",
                "icon"=>"mdi mdi-filter",
                "label"=>"Filtra",
                "width"=>80,
                "tooltip"=>"Imposta un filtro di ricerca",
                "click"=>$filterClickAction
            ));
            
            $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>200)));
            $toolbar_riepilogo->AddElement($filter_btn);
            $toolbar_riepilogo->AddElement($addnew_btn);
        }
        else
        {
            $toolbar_riepilogo->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>400)));
        }
        
        $riepilogo_layout->AddRow($toolbar_riepilogo);
        $riepilogo_layout->AddRow($riepilogo_tab);
        
        return $riepilogo_layout;
    }

    //Template section detail, tab liste
    public function TemplateSierDettaglio_Coalizioni_Tab($object=null,$filterData="")
    {
       $id=static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_LISTE_BOX;

        if(!($object instanceof AA_Sier)) return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));

        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));

        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_Coalizioni_Title",array("view"=>"label","label"=>"<span style='color:#003380'></span>", "align"=>"center")));
        
        $tabbar=new AA_JSON_Template_Generic($id."_TabBar",array(
            "view"=>"tabbar",
            "borderless"=>true,
            "css"=>"AA_Bottom_TabBar",
            "multiview"=>true,
            "optionWidth"=>200,
            "view_id"=>$id."_Multiview",
            "type"=>"bottom"
        ));

        //permessi
        $perms = $object->GetUserCaps($this->oUser);
        $canModify=false;
        if(($perms & AA_Const::AA_PERMS_WRITE) > 0) $canModify=true;

        if($canModify)
        {            
            //Pulsante di Aggiunta coalizione
            $addnew_btn=new AA_JSON_Template_Generic($id."_AddNewCoalizione_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil-plus",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi coalizione",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewCoalizioneDlg\", params: [{id: ".$object->GetId()."}]},'$this->id')"
            ));
            
            $toolbar->AddElement(new AA_JSON_Template_Generic());
            $toolbar->AddElement($addnew_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic());
        }
        
        $footer=new AA_JSON_Template_Layout($id."_Footer",array("type"=>"clean", "height"=>38, "css"=>"AA_SectionContentHeader"));
        
        $footer->AddCol($tabbar);
        $footer->AddCol($toolbar);
        
        $multiview=new AA_JSON_Template_Multiview($id."_Multiview",array(
            "type"=>"clean",
            "css"=>"AA_Detail_Content"
         ));

        $layout->AddRow($multiview);
        $layout->addRow($footer);
        
        //Array dati riepilogo e opzioni tab
        $riepilogo_data=array();
        $options_tabbar=array();

        //Recupero coalizioni
        $params=array();
        $filter= AA_SessionVar::Get($id."_".$object->GetId());
        if($filter->isValid())
        {
            $params=(array)$filter->GetValue();
            //AA_Log::Log(__METHOD__." - ".print_r($params,true),100);
        }

        //immagine
        $platform=AA_Platform::GetInstance();
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $minWidthListeItem=400;
        $ListeItemsForRow=intval($_REQUEST['vw']/$minWidthListeItem);
        foreach($object->GetCoalizioni($params) as $id_coalizione=>$curCoalizione)
        {
            $id_detail_coalizione=$id."_CoalizioneDetail_".$id_coalizione;
            $layout_dettaglio_coalizione=new AA_JSON_Template_Layout($id_detail_coalizione,array("type"=>"clean"));

            $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            if($curCoalizione->GetProp('image') != "")
            {
                $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');
            }
            //-------------- Dati di riepilogo --------------------
            $riepilogo_data[]=array(
                "id"=>$id_coalizione,
                "denominazione"=>$curCoalizione->GetProp("denominazione"),
                "presidente"=>$curCoalizione->GetProp("nome_candidato"),
                "image"=>$curImagePath,
                "onclick"=>'$$("'.$tabbar->GetId().'").setValue("'.$id_detail_coalizione.'")',
                "id_view"=>$id_detail_coalizione
            );
            $tab_label=$curCoalizione->GetProp("denominazione");
            if($canModify) $tab_label="<div style='display: flex; justify-content: space-between; align-items: center; padding-left: 5px; padding-right: 5px; font-size: smaller'><span>".$tab_label."</span><a style='margin-left: 1em;' class='AA_DataTable_Ops_Button_Red' title='Elimina organigramma' onClick='".'AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCoalizioneDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione: "'.$id_coalizione.'"}]},"'.$this->id.'")'."'><span class='mdi mdi-trash-can'></span></a></div>";
            else $tab_label="<div style='display: flex; justify-content: center; align-items: center; padding-left: 5px; padding-right: 5px; font-size: smaller'><span>".$tab_label."</span></div>";
           
            //Tab label
            $options_tabbar[]=array("id"=>$id_detail_coalizione, "value"=>$tab_label);
            //------------------------------------------------------
           
            //-----------header--------------------
            $toolbar = new AA_JSON_Template_Toolbar($id_detail_coalizione."_Toolbar", array("height" => 38, "css" => array("border-bottom" => "1px solid #dadee0 !important")));
            
            //torna al riepilogo
            $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Riepilogo_".$id_coalizione."_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-keyboard-backspace",
                "label"=>"Riepilogo",
                "align"=>"left",
                "width"=>120,
                "tooltip"=>"Torna al riepilogo",
                "click"=>"$$('".$tabbar->GetId()."').setValue('".$id."_Riepilogo_Layout')"
            )));

            //$toolbar->addElement(new AA_JSON_Template_Generic("", array("view" => "spacer", "width" => 120)));
            $toolbar->addElement(new AA_JSON_Template_Generic("", array("view" => "spacer")));
            
            $toolbar->addElement(new AA_JSON_Template_Generic($id_detail_coalizione."_header_content",array("view"=>"label","align"=>"center","label"=>$curCoalizione->GetProp('denominazione'))));
    
            $toolbar->addElement(new AA_JSON_Template_Generic("", array("view" => "spacer")));
    
            //Pulsante di modifica
            $canModify = false;
            if (($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0) $canModify = true;
            if ($canModify) {
                $modify_btn = new AA_JSON_Template_Generic($id_detail_coalizione."_Modify_btn", array(
                    "view" => "button",
                    "type" => "icon",
                    "icon" => "mdi mdi-pencil",
                    "label" => "Modifica",
                    "align" => "right",
                    "width" => 120,
                    "tooltip" => "Modifica Coalizione",
                    "click" => "AA_MainApp.utils.callHandler('dlg', {task:\"GetSierModifyCoalizioneDlg\", params: [{id: " . $object->GetId() . "},{id_coalizione:\"".$id_coalizione."\"}]},'$this->id')"
                ));
                $toolbar->AddElement($modify_btn);
            }
            $layout_dettaglio_coalizione->addRow($toolbar);
            //-----------------------
            
            //------------ Contenuto Coalizione ---------------------
            //AA_Log::Log(__METHOD__." - coalizione: ".print_r($curCoalizione,true),100);
            $coalizione_content_box=new AA_JSON_Template_Layout($id_detail_coalizione."_ContentBox",array("type"=>"clean"));
            $coalizione_ops=array();
            //Curriculum
            if($curCoalizione->GetProp('cv') !=""){
                //AA_Log::Log(__METHOD__." - coalizione 2: ".print_r($curCoalizione,true),100);
                if(strpos($curCoalizione->GetProp('cv'),"http") === false) $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curCoalizione->GetProp('cv').'"},"'.$this->id.'")';
                else $view='window.open("'.$curCoalizione->GetProp('cv').'")';
                $coalizione_ops['cv']="<div class='AA_DataTable_Ops' style='justify-content: space-between'><span style='font-weight: 700'>cv:</span> <a class='AA_DataTable_Ops_Button' title='Consulta il curriculum' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
                if($canModify)
                {
                    $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyPresidenteCVDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashPresidenteCVDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $coalizione_ops['cv'].="<a class='AA_DataTable_Ops_Button' title='Modifica il curriculum' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il curriculum' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a>";
                }
                $coalizione_ops['cv'].="</div>";
            }else{
                //AA_Log::Log(__METHOD__." - coalizione 3: ".print_r($curCoalizione,true),100);
                if($canModify)
                {
                    $add='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyPresidenteCVDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $coalizione_ops['cv']="<div class='AA_DataTable_Ops' style='justify-content: space-between'><span style='font-weight: 700'>cv:</span><a class='AA_DataTable_Ops_Button' title='Carica il curriculum' onClick='".$add."'><span class='mdi mdi-file-upload'></span></a></div>";
                }
                else $coalizione_ops['cv']="&nbsp;";
            }

            //Casellario giudiziale
            if($curCoalizione->GetProp('cg') !="")
            {
                if(strpos($curCoalizione->GetProp('cg'),"http") === false) $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curCoalizione->GetProp('cg').'"},"'.$this->id.'")';
                else $view='window.open("'.$curCoalizione->GetProp('cg').'")';
                $coalizione_ops['cg']="<div class='AA_DataTable_Ops' style='justify-content: space-between'><span style='font-weight: 700'>cg:</span> <a class='AA_DataTable_Ops_Button' title='Consulta il casellario' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
                if($canModify)
                {
                    $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyPresidenteCGDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashPresidenteCGDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $coalizione_ops['cg'].="<a class='AA_DataTable_Ops_Button' title='Modifica il casellario' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il casellario' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a>";
                }
                $coalizione_ops['cg'].="</div>";
            }
            else
            {
                if($canModify)
                {
                    $add='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyPresidenteCGDlg", params: [{id: "'.$object->GetId().'"},{id_coalizione:"'.$curCoalizione->GetProp("id").'"}]},"'.$this->id.'")';
                    $coalizione_ops['cg']="<div class='AA_DataTable_Ops' style='justify-content: space-between'><span style='font-weight: 700'>cg:</span> <a class='AA_DataTable_Ops_Button' title='Carica il casellario' onClick='".$add."'><span class='mdi mdi-file-upload'></span></a></div>";
                }
                else $coalizione_ops['cg']="&nbsp;";
            }

            $coalizione_content_box->AddCol(new AA_JSON_Template_Template($id_detail_coalizione."_CoalizioneImage",array(
                "type"=>"clean",
                "width"=>120,
                "height"=>120,
                "template"=>"<div style='width: 100%;height:100%; display:flex; flex-direction:column; justify-content: center; align-items: center'><img src='".$curImagePath."' width='100px' /></div>"
            )));

            $coalizione_ops['presidente']=$curCoalizione->GetProp('nome_candidato');

            //Candidato Presidente
            $coalizione_content_box->AddCol(new AA_JSON_Template_Template($id_detail_coalizione."_CoalizionePresidente",array(
                "type"=>"clean",
                "template"=>"<div style='width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; margin-left: 1em'><span style='font-weight: 900'>Presidente:</span><div>#presidente#</div><div style='width: 90px'>#cv#</div><div style='width: 90px'>#cg#</div></div>",
                "data"=>$coalizione_ops
            )));

            $layout_dettaglio_coalizione->AddRow($coalizione_content_box);
            //-------------------------------------------------------

            //------------------- Liste -----------------------------
            $curId=$id_detail_coalizione."_ListeBox";
            $coalizione_liste_box=new AA_JSON_Template_Layout($curId,array("type"=>"clean"));           

            $toolbar=new AA_JSON_Template_Toolbar($curId."_Toolbar_allegati",array("height"=>38, "css"=>array("background"=>"#dadee0 !important;")));
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));

            $toolbar->AddElement(new AA_JSON_Template_Generic($curId."_Toolbar_Liste_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Liste</span>", "align"=>"center")));

            if($canModify)
            {
                //Pulsante di aggiunta nuova lista
                $add_lista_btn=new AA_JSON_Template_Generic($curId."_AddLista_btn",array(
                "view"=>"button",
                    "type"=>"icon",
                    "icon"=>"mdi mdi-file-plus",
                    "label"=>"Aggiungi",
                    "align"=>"right",
                    "width"=>120,
                    "tooltip"=>"Aggiungi Lista",
                    "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewListaDlg\", params: [{id: ".$object->GetId()."},{id_coalizione:".$curCoalizione->GetProp('id')."}]},'$this->id')"
                ));

                $toolbar->AddElement($add_lista_btn);
            }
            else 
            {
                $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
            }
            $coalizione_liste_box->AddRow($toolbar);

            $liste=$curCoalizione->GetListe();
            
            //AA_Log::Log(__METHOD__." - liste: ".print_r($liste,true),100);

            if(sizeof($liste)>0)
            {
                $dataview_liste_data=array();
                foreach($liste as $id_lista=>$curLista)
                {
                    $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                    if($curLista->GetProp('image') != "")
                    {
                        $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');
                    }

                    if($canModify)
                    {
                        $addnew="<a title='Aggiungi candidato' class='AA_Button_Link' onclick='AA_MainApp.utils.callHandler(\"dlg\", {task:\"GetSierAddNewCandidatoDlg\", params: [{id: ".$object->GetId()."},{id_coalizione:".$curCoalizione->GetProp('id')."},{id_lista:".$curLista->GetProp('id')."}]},\"$this->id\")'><span class='mdi mdi-account-plus'></span></a>";
                        $modify="<a title='Modifica' class='AA_Button_Link' onclick='AA_MainApp.utils.callHandler(\"dlg\", {task:\"GetSierModifyListaDlg\", params: [{id: ".$object->GetId()."},{id_coalizione:".$curCoalizione->GetProp('id')."},{id_lista:".$curLista->GetProp('id')."}]},\"$this->id\")'><span class='mdi mdi-pencil'></span></a>";
                        $trash="<a title='Elimina' class='AA_Button_Link AA_DataTable_Ops_Button_Red' style='color: red' onclick='AA_MainApp.utils.callHandler(\"dlg\", {task:\"GetSierTrashListaDlg\", params: [{id: ".$object->GetId()."},{id_coalizione:".$curCoalizione->GetProp('id')."},{id_lista:".$curLista->GetProp('id')."}]},\"$this->id\")'><span class='mdi mdi-trash-can'></span></a>";    
                    }
                    else
                    {
                        $addnew="&nbsp;";
                        $modify="&nbsp;";
                        $trash="&nbsp;";
                    }
                    
                    $dataview_liste_data[]=array("id"=>$id_lista,"id_coalizione"=>$curLista->GetProp('id_coalizione'),"denominazione"=>$curLista->GetProp('denominazione'),"n"=>$curLista->GetProp('ordine'),'image'=>$curImagePath,'modify'=>$modify,'trash'=>$trash,'addnew'=>$addnew);
                }

                $liste_template="<div style='display: flex; align-items: center; height: 100%; justify-content: space-between;' id_view='".$curId."_Liste"."'><div style='display: flex; align-items: center; width: 270px; padding: 5px;'>"
                . "<img src='#image#' width='50px'/><div style='height: 100%;display:flex; align-items: left; justify-content: space-evenly; flex-direction:column'><span style='margin-left: 1em; font-weight: 400;'>Lista</span><span style='margin-left: 1em; font-weight: 700;'>#denominazione#</span></div></div>"
                . "<div style='display: flex;  align-items: center; justify-content: space-between; height: 100%; padding: 5px; width: 100px'>#addnew#&nbsp;#modify#&nbsp;#trash#</div></div>";
                
                $dataview_liste=new AA_JSON_Template_Generic($curId."_Liste",array(
                    "view"=>"dataview",
                    "xCount"=>$ListeItemsForRow,
                    "module_id"=>$this->id,
                    "tabbar"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_TabBar_".$object->GetId(),
                    "type"=>array(
                        "type"=>"tiles",
                        "height"=>120,
                        "width"=>"auto",
                        "css"=>"AA_DataView_Nomine_item",
                    ),
                    "on" => array("onItemDblClick" => "AA_MainApp.utils.getEventHandler('ListaDblClick','".$this->GetId()."')"),
                    "template"=>$liste_template,
                    "data"=>$dataview_liste_data
                ));

                $coalizione_liste_box->AddRow($dataview_liste);
            }
            else
            {
                $coalizione_liste_box->AddRow(new AA_JSON_Template_Template($curId."_Liste",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti elementi.</span></div>")));
            }
            $layout_dettaglio_coalizione->AddRow($coalizione_liste_box);
            //-------------------------------------------------------
            
            $multiview->addCell($layout_dettaglio_coalizione);
        }
        //------------------

        //Riepilogo tab
        $riepilogo_layout=$this->TemplateDettaglio_Coalizioni_Riepilogo_Tab($object,$id, $riepilogo_data);
    
        array_unshift($options_tabbar,array("id"=>$riepilogo_layout->GetId(), "value"=>"Riepilogo"));
        
        $multiview->AddCell($riepilogo_layout,true);
        
        $tabbar->SetProp("options",$options_tabbar);
        return $layout;
    }

    //Template section detail, tab candidati
    public function TemplateSierDettaglio_Candidati_Tab($object=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_CANDIDATI_BOX;

        if(!($object instanceof AA_Sier)) return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));

        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean"));
        
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));

        $toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));

        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Toolbar_Candidati_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Candidati</span>", "align"=>"center")));
        
        //Pulsante di modifica
        $canModify=false;
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0) $canModify=true;
        
        //Exporta candidati
        $btn=new AA_JSON_Template_Generic($id."_ExportCandidati_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Esporta",
            "align"=>"right",
            "width"=>120,
            "tooltip"=>"Esporta la lista dei candidati in formato csv",
            "click"=>"AA_MainApp.utils.callHandler('ExportCandidatiCSV', {task:\"ExportCandidatiCSV\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $toolbar->AddElement($btn);

        if($canModify)
        {            
            $modify_btn=new AA_JSON_Template_Generic($id."_AddNewCandidato_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-account-plus",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi un nuovo candidato",
                //"click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewCandidatoDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
                "click"=>"AA_MainApp.utils.callHandler('AddNewCandidato', {task:\"GetSierAddNewCandidatoDlg\", params: [{id: ".$object->GetId()."},{table_id:\"".$id."_Candidati\"}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        
        $layout->addRow($toolbar);        
        $columns=array(
            array("id"=>"ordine","header"=>array("<div style='text-align: center'>n.</div>",array("content"=>"selectFilter")),"width"=>50, "sort"=>"int","css"=>array("text-align"=>"center")),
            array("id"=>"cognome","header"=>array("<div style='text-align: center'>Cognome</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>array("text-align"=>"left")),
            array("id"=>"nome","header"=>array("<div style='text-align: center'>Nome</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"cf","header"=>array("<div style='text-align: center'>CF</div>",array("content"=>"textFilter")),"width"=>220, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"cv","header"=>array("<div style='text-align: center'>Curriculum</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
            array("id"=>"cg","header"=>array("<div style='text-align: center'>Casellario</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
            array("id"=>"circoscrizione_desc","header"=>array("<div style='text-align: center'>Circoscrizione</div>",array("content"=>"selectFilter")),"width"=>180, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"lista","header"=>array("<div style='text-align: center'>Lista</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"coalizione","header"=>array("<div style='text-align: center'>Coalizione</div>",array("content"=>"selectFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text")
        );

        if($canModify)
        {
            $columns[]=array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>100, "css"=>array("text-align"=>"center"));
        }

        $data=array();
        //$circoscrizioni=AA_Sier_Const::GetCircoscrizioni();

        $candidati=$object->GetCandidati();
        foreach($candidati as $curCandidato)
        {
            $data[]=$curCandidato->GetProps();
            $index=sizeof($data)-1;

            //AA_Log::Log(__METHOD__." - candidato: ".print_r($curCandidato,true),100);

            //Circoscrizione
            $data[$index]['circoscrizione_desc']=$curCandidato->GetProp("circoscrizione");

            //Curriculum
            if($curCandidato->GetProp('cv') !="")
            {
                if(strpos($curCandidato->GetProp('cv'),"http") === false) $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curCandidato->GetProp('cv').'"},"'.$this->id.'")';
                else $view='window.open("'.$curCandidato->GetProp('cv').'")';
                $data[$index]['cv']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Consulta il curriculum' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
                if($canModify)
                {
                    $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyCandidatoCVDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCandidatoCVDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $data[$index]['cv'].="<a class='AA_DataTable_Ops_Button' title='Modifica il curriculum' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il curriculum' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a>";
                }
                $data[$index]['cv'].="</div>";
            }
            else
            {
                if($canModify)
                {
                    $add='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyCandidatoCVDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $data[$index]['cv'].="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Carica il curriculum' onClick='".$add."'><span class='mdi mdi-file-upload'></span></a></div>";
                }
            }

            //Casellario giudiziale
            if($curCandidato->GetProp('cg') !="")
            {
                if(strpos($curCandidato->GetProp('cg'),"http") === false) $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curCandidato->GetProp('cg').'"},"'.$this->id.'")';
                else $view='window.open("'.$curCandidato->GetProp('cg').'")';
                $data[$index]['cg']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Consulta il casellario' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
                if($canModify)
                {
                    $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyCandidatoCGDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCandidatoCGDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $data[$index]['cg'].="<a class='AA_DataTable_Ops_Button' title='Modifica il casellario' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il casellario' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a>";
                }
                $data[$index]['cg'].="</div>";
            }
            else
            {
                if($canModify)
                {
                    $add='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyCandidatoCGDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                    $data[$index]['cg'].="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Carica il casellario' onClick='".$add."'><span class='mdi mdi-file-upload'></span></a></div>";
                }
            }

            if($canModify)
            {
                $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCandidatoDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyCandidatoDlg", params: [{id: "'.$object->GetId().'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                $data[$index]['ops']="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='Modifica i dati generali del candidato' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il candidato' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
            }
        }

        //AA_Log::Log(__METHOD__." - candidati: ".print_r($data,true),100);

        if(sizeof($candidati) > 0)
        {
            $table=new AA_JSON_Template_Generic($id."_Candidati", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
    
            $layout->addRow($table);
        }
        else
        {
            $layout->addRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti candidati.</span></div>")));
        }

        return $layout;
    }

    //Template section detail, tab liste
    public function TemplateSierDettaglio_Comuni_Tab($object=null)
    {
       $id=static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_COMUNI_BOX;

        if(!($object instanceof AA_Sier))
        {
            if(isset($_REQUEST['id']))
            {
                $object=new AA_Sier($_REQUEST['id'],$this->oUser);
                if(!$object->IsValid())
                {
                    return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));
                }
            }
            else return new AA_JSON_Template_Template($id,array("template"=>"Dati non validi"));
        }

        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean","filtered"=>true,"filter_id"=>$id));
        
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));

        //$toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        
        //pulsante di filtro
        $filter="";

        $session_params=AA_SessionVar::Get($id);
        if($session_params->IsValid())
        {
            $params=(array)$session_params->GetValue();
            //AA_Log::Log(__METHOD__." - session var: ".$id." - value: ".print_r($params,true),100);
        }
        foreach($params as $key=>$curParam)
        {
            if(isset($_REQUEST[$key])) $params[$key]=$_REQUEST[$key];
        }

        if(isset($params['senza_operatori']) && $params['senza_operatori'])
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con operatori non caricati</span>&nbsp;";
        }

        if(isset($params['senza_affluenza']) && $params['senza_affluenza'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con affluenza non caricata</span>&nbsp;";
        }

        if(isset($params['senza_risultati']) && $params['senza_risultati'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con risultati non caricati</span>&nbsp;";
        }

        if(isset($params['senza_voti_lista']) && $params['senza_voti_lista'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni senza voti di lista</span>&nbsp;";
        }

        if(isset($params['scrutinio_parziale']) && $params['scrutinio_parziale'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con scrutinio parziale</span>&nbsp;";
        }

        if(isset($params['senza_rendiconti']) && $params['senza_rendiconti'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con rendiconti non caricati</span>&nbsp;";
        }
        
        if(isset($params['con_rendiconti']) && $params['con_rendiconti'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con rendiconti caricati</span>&nbsp;";
        }

        if(isset($params['con_criticita']) && $params['con_criticita'] > 0)
        {
            $filter.="<span class='AA_Label AA_Label_LightOrange'>solo comuni con criticità</span>&nbsp;";
        }

        $cp=$object->GetControlPannel();
        if(isset($cp['abilita_cert_corpo_elettorale']) && $cp['abilita_cert_corpo_elettorale']>0)
        {
            if(isset($params['senza_certificazione_45']) && $params['senza_certificazione_45'] > 0)
            {
                $filter.="<span class='AA_Label AA_Label_LightOrange'>comuni senza certificazione al 45° giorno</span>&nbsp;";
            }
    
            if(isset($params['senza_certificazione_15']) && $params['senza_certificazione_15'] > 0)
            {
                $filter.="<span class='AA_Label AA_Label_LightOrange'>comuni senza certificazione al 15° giorno</span>&nbsp;";
            }    
        }
        else
        {
            unset($params['senza_certificazione_45']);
            unset($params['senza_certificazione_15']);
        }

        if($filter=="") $filter="<span class='AA_Label AA_Label_LightOrange'>tutti</span>";
        
        $toolbar->addElement(new AA_JSON_Template_Generic($id."_FilterLabel",array("view"=>"label","align"=>"left","label"=>"<div>Visualizza: ".$filter."</div>")));
        
        //Exporta corpo elettorale
        $btn=new AA_JSON_Template_Generic($id."_ExportCorpoElettoraleComuni_btn",array(
            "view"=>"button",
            "type"=>"icon",
            "icon"=>"mdi mdi-file-table",
            "label"=>"Esporta corpo elettorale",
            "align"=>"right",
            "width"=>240,
            "tooltip"=>"Esporta i dati del corpo elettorale di tutti i Comuni in formato csv",
            "click"=>"AA_MainApp.utils.callHandler('ExportCorpoElettoraleCSV', {task:\"ExportCorpoElettoraleComuniCSV\",params: {id: ".$object->GetId()."}, module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $toolbar->AddElement($btn);

        //filtro
        $modify_btn=new AA_JSON_Template_Generic($id."_FilterComuni_btn",array(
            "view"=>"button",
             "type"=>"icon",
             "icon"=>"mdi mdi-filter-cog",
             "label"=>"Filtra",
             "align"=>"right",
             "width"=>120,
             "tooltip"=>"Opzioni di filtraggio",
             "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneFilterDlg\",params: {id: ".$object->GetId()."},postParams: module.getRuntimeValue('" . $id . "','filter_data'), module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        $toolbar->AddElement($modify_btn);

        //-------- Importazione da csv (solo super user) ------------------
        if($this->oUser->IsSuperUser())
        {
            $addnewMultiClickAction = "try{module=AA_MainApp.getModule('" . $this->id . "'); if(module.isValid()){module.dlg({task:'" . static::AA_UI_TASK_ADDNEWMULTI_DLG . "',params: {id: ".$object->GetId()."},module:'" . $this->id . "'})}}catch(msg){console.error(msg)}";

            $addnewmulti_btn = new AA_JSON_Template_Generic($this->id . "_AddNewMulti_btn", array(
                "view" => "button",
                "align" => "right",
                "type" => "icon",
                "icon" => "mdi mdi-plus-box-multiple",
                "label" => "da CSV",
                "width" => 110,
                "tooltip" => "Caricamento multiplo da file CSV",
                "click" => $addnewMultiClickAction
            ));
    
            $toolbar->AddElement($addnewmulti_btn);    
        }
        //---------------------------------------------------------------

        //Pulsante di modifica
        $canModify=false;
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0) $canModify=true;
        if($canModify)
        {            
            $modify_btn=new AA_JSON_Template_Generic($id."_AddNew_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-account-plus",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi un nuovo comune",
                //"click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewCandidatoDlg\", params: [{id: ".$object->GetId()."}]},'".$this->id."')"
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewComuneDlg\", params: [{id: ".$object->GetId()."},{table_id:\"".$id."_Comuni\"}]},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);
        }
        
        $layout->addRow($toolbar);        
        if($canModify)
        {
            $columns=array(
                array("id"=>"denominazione","header"=>array("<div style='text-align: center'>Comune</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"left")),
                array("id"=>"circoscrizione","header"=>array("<div style='text-align: center'>Circoscrizione</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"center")),
                array("id"=>"lastupdate","header"=>array("<div style='text-align: center'>Data e ora di aggiornamento</div>",array("content"=>"textFilter")),"width"=>250, "sort"=>"text","css"=>array("text-align"=>"center")),
                array("id"=>"dati_generali","header"=>array("<div style='text-align: center'>Dati Generali</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"corpo_elettorale","header"=>array("<div style='text-align: center'>Corpo elett.</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"comunicazioni","header"=>array("<div style='text-align: center'>comunicazioni</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"affluenza","header"=>array("<div style='text-align: center'>Affluenza</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"completamento_a","header"=>array("<div style='text-align: center'>%</div>"),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int"),
                array("id"=>"risultati","header"=>array("<div style='text-align: center'>Risultati</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"completamento","header"=>array("<div style='text-align: center'>%</div>"),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int"),
                array("id"=>"rendiconti","header"=>array("<div style='text-align: center'>Rendiconti</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"operatori","header"=>array("<div style='text-align: center'>Operatori</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
            );
            $columns[]=array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>100, "css"=>array("text-align"=>"center"));
        }
        else
        {
            $columns=array(
                array("id"=>"denominazione","header"=>array("<div style='text-align: center'>Comune</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"left")),
                array("id"=>"circoscrizione","header"=>array("<div style='text-align: center'>Circoscrizione</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"center")),
                array("id"=>"lastupdate","header"=>array("<div style='text-align: center'>Data e ora di aggiornamento</div>",array("content"=>"textFilter")),"width"=>250, "sort"=>"text","css"=>array("text-align"=>"center")),
                array("id"=>"corpo_elettorale","header"=>array("<div style='text-align: center'>Corpo elett.</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"comunicazioni","header"=>array("<div style='text-align: center'>comunicazioni</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"affluenza","header"=>array("<div style='text-align: center'>Affluenza</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"completamento_a","header"=>array("<div style='text-align: center'>%</div>"),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int"),
                array("id"=>"risultati","header"=>array("<div style='text-align: center'>Risultati</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                array("id"=>"completamento","header"=>array("<div style='text-align: center'>%</div>"),"width"=>60, "css"=>array("text-align"=>"center"),"sort"=>"int"),
            );
        }

        $data=array();
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $comuni=$object->GetComuni(null,$params);
        $now=date("Y-m-d");
        $_45daysago=date('Y-m-d', strtotime($giornateKeys[0].' -45 days'));
        $_15daysago=date('Y-m-d', strtotime($giornateKeys[0].' -15 days'));
        foreach($comuni as $curComune)
        {
            $data[]=array("id"=>$curComune->GetProp("id"),"denominazione"=>$curComune->GetProp("denominazione"),"circoscrizione"=>$curComune->GetProp("circoscrizione"),"lastupdate"=>$curComune->GetProp("lastupdate"));
            $index=sizeof($data)-1;

            //--------- Dati generali ---------
            $view='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneDatiGeneraliViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $data[$index]['dati_generali']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Vedi e gestisci i dati generali' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
            $data[$index]['dati_generali'].="</div>";
            //------------------------------

            //--------- Corpo Elettorale ---------
            $color="green";
            $comunicazioni=$curComune->GetComunicazioni(true);
            $analisi=array(false,array(),false);
            //alert comunicazioni corpo elettorale
            if($now > $_45daysago && (!isset($comunicazioni['corpoelettorale_45']) || $comunicazioni['corpoelettorale_45']==0) && isset($cp['abilita_cert_corpo_elettorale']) && $cp['abilita_cert_corpo_elettorale']>0)
            {
                $color="red";
                $analisi[0]=true;
                $analisi[1][]="Manca la certificazione al 45° giorno";
                $analisi[2]=true;
            }

            if($now > $_15daysago && (!isset($comunicazioni['corpoelettorale_15']) || $comunicazioni['corpoelettorale_15']==0) && isset($cp['abilita_cert_corpo_elettorale']) && $cp['abilita_cert_corpo_elettorale']>0)
            {
                $color="red";
                $analisi[0]=true;
                $analisi[1][]="Manca la certificazione al 15° giorno";
                $analisi[2]=true;
            }
            //----
            $class="AA_DataTable_Ops_Button";
            $view_analisi_corpo='AA_MainApp.utils.callHandler("dlg", {task:"GetSierAnalisiCorpoElettoraleDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $view='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneCorpoElettoraleViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            if($analisi[0]==false) $data[$index]['corpo_elettorale']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Vedi e gestisci i dati del corpo elettorale' onClick='".$view."'><span class='mdi mdi-eye'></span></a>";
            else 
            {
                $data[$index]['corpo_elettorale']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='AA_DataTable_Ops_Button' title='Vedi e gestisci i dati del corpo elettorale' onClick='".$view."'><span class='mdi mdi-eye'></span></a><a class='".$class."' title='Visualizza le criticità riscontrate sul corpo elettorale' onClick='".$view_analisi_corpo."'><span class='mdi mdi-alert' style='color:".$color."'></span><sup style='font-size: 70%'>".sizeof($analisi[1])."</sup></a>";
            }
            $data[$index]['corpo_elettorale'].="</div>";
            //------------------------------

            //--------- Comunicazioni ---------
            $class="AA_DataTable_Ops_Button";
            $icon="mdi mdi-eye";
            $text="Vedi e gestisci i dati sulle comunicazioni";
            $color="red";
            $analisi=$object->AnalizeComunicazioni($comunicazioni);
            //AA_Log::Log(__METHOD__." - analisi Comunicazioni: ".print_r($analisi,true),100);
            $id_layout_op=static::AA_UI_PREFIX."_".static::AA_UI_WND_COMUNICAZIONI_COMUNALE."_".static::AA_UI_LAYOUT_COMUNICAZIONI_COMUNALE;
            $view_analisi_comunicazioni='AA_MainApp.utils.callHandler("dlg", {task:"GetSierAnalisiComunicazioniDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $view='AA_MainApp.curModule.setRuntimeValue("'.$id_layout_op.'","filter_data",{id:'.$object->GetId().',id_comune: '.$curComune->GetProp('id').'});AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneComunicazioniViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            if($analisi[0]==false) 
            {
                if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF) && !$this->oUser->IsSuperUser()) $data[$index]['comunicazioni']=$data[$index]['comunicazioni']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><span style='color:green' class='mdi mdi-checkbox-marked-circle'></span>";
                else $data[$index]['comunicazioni']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'></span></a>";
            }
            else 
            {
                if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF) && !$this->oUser->IsSuperUser()) $data[$index]['comunicazioni']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='Visualizza le criticità riscontrate sulle comunicazioni' onClick='".$view_analisi_comunicazioni."'><span class='mdi mdi-alert' style='color:".$color."'>&nbsp;</span></a>";
                else $data[$index]['comunicazioni']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'>&nbsp;</span></a><a class='".$class."' title='Visualizza le criticità riscontrate sulle comunicazioni' onClick='".$view_analisi_comunicazioni."'><span class='mdi mdi-alert' style='color:".$color."'>&nbsp;</span></a>";
            }
            $data[$index]['comunicazioni'].="</div>";
            //------------------------------

            //--------- Affluenza ---------
            $class="AA_DataTable_Ops_Button";
            $icon="mdi mdi-eye";
            $text="Vedi e gestisci i dati sull&apos;affluenza alle urne";
            if($curComune->GetProp("affluenza") == "") 
            {
                $class="AA_DataTable_Ops_Button";
                $icon="mdi mdi-eye";
                $text="Visualizza i dati sull&apos;affluenza alle urne";
                if($canModify) 
                {
                    $icon="mdi mdi-upload";
                    $text="Gestione i dati sull&apos;affluenza alle urne";
                }
                $completamento_a=0;
            }
            else
            {
                $affluenza=$curComune->GetAffluenza(true);
                if(current($affluenza)['ore_12'] > 0) $completamento_a=33;
                if(current($affluenza)['ore_19'] > 0) $completamento_a=66;
                if(current($affluenza)['ore_22'] > 0) $completamento_a=100;
            }
            
            $data[$index]['completamento_a']=$completamento_a;
            $id_layout_op=static::AA_UI_PREFIX."_".static::AA_UI_WND_AFFLUENZA_COMUNALE."_".static::AA_UI_LAYOUT_AFFLUENZA_COMUNALE;
            $view='AA_MainApp.curModule.setRuntimeValue("'.$id_layout_op.'","filter_data",{id:'.$object->GetId().',id_comune: '.$curComune->GetProp('id').'});AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneAffluenzaViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $data[$index]['affluenza']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'></span></a>";
            $data[$index]['affluenza'].="</div>";
            //------------------------------

            //--------- risultati ---------
            $class="AA_DataTable_Ops_Button";
            $icon="mdi mdi-eye";
            $text="Vedi e gestisci i risultati delle consultazioni";
            $color="green";

            $analisi=$curComune->GetAnalisiRisultati(true);
            if(sizeof($analisi)==0)
            {
                AA_Log::Log(__METHOD__." - analisi vuota",100);
                $risultati=$curComune->GetRisultati(true);
                if(sizeof($risultati)==0)
                {
                    $class="AA_DataTable_Ops_Button";
                    $icon="mdi mdi-upload";
                    $text="Gestisci i risultati delle consultazioni";
                    $completamento=0;
                    $analisi=array(true,array("Risultati non presenti."),false);
                }
                else
                {
                    $analisi=$object->AnalizeRisultati($risultati,$curComune->GetProp("id_circoscrizione"));
                }
            }
            
            if($analisi[0] == true)
            {
                $color="orange";
                if($analisi[2] == true) $color="red";
            }

            //AA_Log::Log(__METHOD__." - analisi: ".print_r($analisi,true),100);
            $completamento=0;
            if($analisi[3]['risultati_scrutinio_parziale_check'] == 0 && ((isset($analisi[1][0]) && strpos($analisi[1][0],"Risultati non presenti") !== false) || (isset($analisi[1]) && sizeof($analisi[1])==0)))
            {
                $completamento=100;
            }
            else
            {   
                if(isset($analisi[1][0]) && strpos($analisi[1][0],"Risultati non presenti") === false)
                {
                    //AA_Log::Log(__METHOD__." - ".print_r($analisi,true),100);
                    if($analisi[3]['risultati_scrutinio_parziale_check']>0)
                    {
                        $completamento=round($analisi[3]['risultati_scrutinio_parziale_check']*100/intVal($curComune->GetProp('sezioni')));
                    }
                    else
                    {
                        $completamento=100;
                    }
                }
                else
                {
                    $completamento=0;
                }
            }

            $id_layout_op=static::AA_UI_PREFIX."_".static::AA_UI_WND_RISULTATI_COMUNALI."_".static::AA_UI_LAYOUT_RISULTATI_COMUNALI;
            $view_analisi_risultati='AA_MainApp.utils.callHandler("dlg", {task:"GetSierAnalisiRisultatiDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $data[$index]['completamento']=$completamento;
            $view='AA_MainApp.curModule.setRuntimeValue("'.$id_layout_op.'","filter_data",{id:'.$object->GetId().',id_comune: '.$curComune->GetProp('id').'});AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneRisultatiViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            if($analisi[0]==false) $data[$index]['risultati']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'>&nbsp;</span></a></div>";
            else 
            {
                $data[$index]['risultati']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'>&nbsp;</span></a><a class='".$class."' title='Visualizza i risultati delle analisi dei risultati' onClick='".$view_analisi_risultati."'><span class='mdi mdi-alert' style='color:".$color."'></span><sup style='font-size: 70%'>".sizeof($analisi[1])."</sup></a></div>";
            }
            //if($canModify)
            //{
            //    $view_analisi_risultati='AA_MainApp.utils.callHandler("dlg", {task:"GetSierRisultatiModifyDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            //    $data[$index]['risultati'].="<a class='AA_DataTable_Ops_Button' title='Modifica i risultati delle consultazioni' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a>";
            //}
            $data[$index]['risultati'].="</div>";
            //------------------------------

            //--------- rendiconti ---------
            $class="AA_DataTable_Ops_Button";
            $icon="mdi mdi-eye";
            $text="Vedi e gestisci i rendiconti";
            $rendiconti=$curComune->GetRendiconti();
            if($rendiconti == "") 
            {
                $class="AA_DataTable_Ops_Button";
                $icon="mdi mdi-upload";
                $text="Gestisci i rendiconti";
            }
            else
            {
                $class="AA_DataTable_Ops_Button";
                $icon="mdi mdi-eye";
                $text="Gestisci i rendiconti";
            }
            $id_layout_op=static::AA_UI_PREFIX."_".static::AA_UI_WND_RENDICONTI_COMUNALI."_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI;
            $view='AA_MainApp.curModule.setRuntimeValue("'.$id_layout_op.'","filter_data",{id:'.$object->GetId().',id_comune: '.$curComune->GetProp('id').'});AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneRendicontiViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $data[$index]['rendiconti']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'></span></a>";
            $data[$index]['rendiconti'].="</div>";
            //------------------------------

            //--------- operatori ---------
            $class="AA_DataTable_Ops_Button";
            $icon="mdi mdi-eye";
            $text="Vedi e gestisci gli operatori comunali abilitati";
            if($curComune->GetProp("operatori") == "") 
            {
                $class="AA_DataTable_Ops_Button";
                $icon="mdi mdi-upload";
                $text="Gestisci gli operatori comunali abilitati";
            }
            $id_layout_op=static::AA_UI_PREFIX."_".static::AA_UI_WND_OPERATORI_COMUNALI."_".static::AA_UI_LAYOUT_OPERATORI_COMUNALI;
            $view='AA_MainApp.curModule.setRuntimeValue("'.$id_layout_op.'","filter_data",{id:'.$object->GetId().',id_comune: '.$curComune->GetProp('id').'});AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneOperatoriViewDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
            $data[$index]['operatori']="<div class='AA_DataTable_Ops' style='justify-content: space-evenly'><a class='".$class."' title='$text' onClick='".$view."'><span class='mdi $icon'></span></a>";
            $data[$index]['operatori'].="</div>";
            //------------------------------
            
            if($canModify)
            {
                $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashComuneDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
                $logs='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneLogsDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
                $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyComuneDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$curComune->GetProp("id").'"}]},"'.$this->id.'")';
                //$data[$index]['ops']="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='Modifica i dati generali del Comune' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
                $data[$index]['ops']="<div class='AA_DataTable_Ops'>&nbsp;<a class='AA_DataTable_Ops_Button' title='Visualizza i logs' onClick='".$logs."'><span class='mdi mdi-timetable'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
            }
        }

        //AA_Log::Log(__METHOD__." - candidati: ".print_r($data,true),100);

        if(sizeof($comuni) > 0)
        {
            $table=new AA_JSON_Template_Generic($id."_Comuni", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
    
            $layout->addRow($table);
        }
        else
        {
            $layout->addRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti comuni.</span></div>")));
        }

        return $layout;
    }

    public function Template_GetSierComuneLogsDlg($object = null, $comune = null)
    {

        $id=static::AA_UI_PREFIX."_GetSierComuneLogsDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);
        
        $wnd=new AA_GenericWindowTemplate($id, "Logs comune di ".$comune->GetProp("denominazione"), $this->id);
        $wnd->SetWidth("720");
        $wnd->SetHeight("576");

        $logs = $comune->GetLogs(true);
        //AA_Log::Log(__METHOD__." - logs: ".print_r($logs,true),100);
        $table = new AA_JSON_Template_Generic($id . "_Table", array(
            "view" => "datatable",
            "scrollX" => false,
            "select" => false,
            "columns" => array(
                array("id" => "data", "header" => array("Data", array("content" => "textFilter")), "width" => 150, "css" => array("text-align" => "left")),
                array("id" => "user", "header" => array("<div style='text-align: center'>Utente</div>", array("content" => "selectFilter")), "width" => 120, "css" => array("text-align" => "center")),
                array("id" => "msg", "header" => array("Operazione", array("content" => "textFilter")), "fillspace" => true, "css" => array("text-align" => "left"))
            ),
            "data" => array_values($logs)
        ));

        //riquadro di visualizzazione preview pdf
        $wnd->AddView($table);
        $wnd->AddView(new AA_JSON_Template_Generic("", array("view" => "spacer", "height" => 38)));

        return $wnd;
    }

    //Template filtro di ricerca comuni
    public function Template_GetSierComuneFilterDlg($object=null,$params=null)
    {
        $session_params=AA_SessionVar::Get(static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_COMUNI_BOX);
        if($session_params->IsValid())
        {
            $formData=(array)$session_params->GetValue();
            //AA_Log::Log(__METHOD__." - session var: ".$id." - value: ".print_r($params,true),100);
            foreach($formData as $key=>$curParam)
            {
                $formData[$key]=$curParam;
            }

            if(isset($params['id']) && $params['id'] > 0) $formData['id']=$params['id'];
        }
        else
        {
            //Valori runtime
            $formData=array("id"=>$params['id'],"senza_certificazione_45"=>$params['senza_certificazione_45'],"senza_certificazione_15"=>$params['senza_certificazione_15'],"scrutinio_parziale"=>$params['scrutinio_parziale'],"senza_operatori"=>$params['senza_operatori'],"senza_affluenza"=>$params['senza_affluenza'],"senza_risultati"=>$params['senza_risultati'],"senza_rendiconti"=>$params['senza_rendiconti']);
        }
                
        //Valori reset
        $resetData=array("senza_operatori"=>0,"senza_affluenza"=>0,"senza_risultati"=>0,"senza_rendiconti"=>0);
        
        //Azioni da eseguire dopo l'applicazione del filtro
        $applyActions="AA_MainApp.curModule.refreshUiObject('".static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_COMUNI_BOX."',true)";
        
        $dlg = new AA_GenericFilterDlg(static::AA_UI_PREFIX."_Comune_Filter", "Parametri di filtraggio",$this->GetId(),$formData,$resetData,$applyActions,static::AA_UI_PREFIX."_".static::AA_ID_SECTION_DETAIL."_".static::AA_UI_DETAIL_COMUNI_BOX);
        
        $dlg->SetHeight(740);
        $dlg->SetWidth(980);
        $dlg->SetLabelWidth(350);
        
        //Senza operatori
        $dlg->AddSwitchBoxField("senza_operatori","Comuni senza operatori",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni senza operatori."));

        $cp=$object->GetControlPannel();
        if($cp['abilita_cert_corpo_elettorale']>0)
        {
            //Senza certificazione al 45°
            $dlg->AddSwitchBoxField("senza_certificazione_45","Comuni senza corpo elettorale certficato al 45°",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni senza la certificazione del corpo elettorale al 45° giorno."));

            //Senza certificazione al 15°
            $dlg->AddSwitchBoxField("senza_certificazione_15","Comuni senza corpo elettorale certificato al 15°",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni senza la certificazione del corpo elettorale al 15° giorno."));
        }

        //Senza affluenza
        $dlg->AddSwitchBoxField("senza_affluenza","Comuni senza affluenza",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilta per mostrare ESCLUSIVAMENTE i comuni senza affluenza."));

        //Senza risultati
        $dlg->AddSwitchBoxField("senza_risultati","Comuni senza risultati",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilta per mostrare ESCLUSIVAMENTE i comuni senza risultati."));

        //Senza voti di lista
        $dlg->AddSwitchBoxField("senza_voti_lista","Comuni senza voti di lista",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilta per mostrare ESCLUSIVAMENTE i comuni senza risultati."));

        //con scrutinio parziale
        $dlg->AddSwitchBoxField("scrutinio_parziale","Comuni con scrutinio parziale",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni con scrutinio parziale."));
        
        //Senza rendiconti
        $dlg->AddSwitchBoxField("senza_rendiconti","Comuni senza rendiconti",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni senza rendiconti."));

        //con rendiconti
        $dlg->AddSwitchBoxField("con_rendiconti","Comuni con rendiconti",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni con rendiconti."));

        //comuni con criticità
        $dlg->AddSwitchBoxField("con_criticita","Comuni con criticità",array("onLabel"=>"mostra esclusivamente","offLabel"=>"mostra tutti","bottomLabel"=>"*Abilita per mostrare ESCLUSIVAMENTE i comuni con criticità."));

        //Enable session save
        $dlg->EnableSessionSave();

        $dlg->SetApplyButtonName("Filtra");
        $dlg->EnableApplyHotkey();

        return $dlg->GetObject();
    }
    
    //Task Update Sier
    public function Task_UpdateSier($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $task->SetError("L'utente corrente non ha i permessi di modifica dell'elemento");
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente non ha i permessi di modifica dell'elemento</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        $flags=array_keys(AA_Sier_Const::GetFlags());
        
        $abilitazioni=0;
        foreach($_REQUEST as $key=>$value)
        {
            if($value==1 && in_array($key,$flags))
            {
                $abilitazioni+=$key;
            } 
        }

        //AA_Log::Log(__METHOD__." - Flags: ".$abilitazioni,100);

        $_REQUEST['Flags']=$abilitazioni;
        
        return $this->Task_GenericUpdateObject($task,$_REQUEST,true);   
    }
    
    //Task trash Sier
    public function Task_TrashSier($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $task->SetError("L'utente corrente non ha i permessi per cestinare l'elemento");
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente non ha i permessi per cestinare l'elemento</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        return $this->Task_GenericTrashObject($task,$_REQUEST);
    }
    
    //Task resume Sier
    public function Task_ResumeSier($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        return $this->Task_GenericResumeObject($task,$_REQUEST);
    }
    
    //Task publish Sier
    public function Task_PublishSier($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        return $this->Task_GenericPublishObject($task,$_REQUEST);
    }
    
    //Task reassign Sier
    public function Task_ReassignSier($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        return $this->Task_GenericReassignObject($task,$_REQUEST);
    }
    
    //Task delete Sier
    public function Task_DeleteSier($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
         
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $task->SetError("L'utente corrente non ha i permessi per eliminare l'elemento");
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente non ha i permessi per eliminare l'elemento</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        return $this->Task_GenericDeleteObject($task,$_REQUEST);
    }

    //Task aggiunta comuni da csv, passo 2 di 3
    public function Task_GetSierComuneAddNewMultiPreviewCalc($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);

            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);        
            return false;
        }

        $csvFile=AA_SessionFileUpload::Get("SierComuneMultiCSV");
        if(!$csvFile->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido",false);        
            return false;
        }

        $csv=$csvFile->GetValue();
        if(!is_file($csv["tmp_name"]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido (1)",false);
            return false;
        }

        $csvRows=explode("\n",str_replace("\r","",file_get_contents($csv["tmp_name"])));
        //Elimina il file temporaneo
        if(is_file($csv["tmp_name"]))
        {
            unlink($csv["tmp_name"]);
        }

        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        
        //Parsing della posizione dei campi
        //denominazione,indirizzo,contatti,risultati,affluenza,operatori,sezioni,elettori_m,elettori_f,id_circoscrizione,rendiconti,pec,lastupdate
        $fieldPos=array(
            "denominazione"=>-1,
            "indirizzo"=>-1,
            "contatti"=>-1,
            "risultati"=>-1,
            "affluenza"=>-1,
            "operatori"=>-1,
            "sezioni"=>-1,
            "sezioni_ordinarie"=>-1,
            "sezioni_ospedaliere"=>-1,
            "luoghi_cura_sub100"=>-1,
            "luoghi_cura_over100"=>-1,
            "luoghi_detenzione"=>-1,
            "elettori_esteri_m"=>-1,
            "elettori_esteri_f"=>-1,
            "elettori_m"=>-1,
            "elettori_f"=>-1,
            "id_circoscrizione"=>-1,
            "rendiconti"=>-1,
            "pec"=>-1,
            "lastupdate"=>-1
        );
        
        $recognizedFields=0;
        foreach(explode("|",$csvRows[0]) as $pos=>$curFieldName)
        {
            if($fieldPos[trim(strtolower($curFieldName))] == -1)
            {
                $fieldPos[trim(strtolower($curFieldName))] = $pos;
                $recognizedFields++;
            }
        }
        //----------------------------------------

        if($fieldPos['denominazione']==-1 || $fieldPos['id_circoscrizione'] ==-1)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono stati trovati tutti i campi relativi a: denominazione,id_circoscrizione. Verificare che il file csv sia strutturato correttamente e riprovare",false);
            return false;
        }

        //parsing dei dati
        $data=array();
        $curRowNum=0;
        foreach($csvRows as $curCsvRow)
        {
            //salta la prima riga
            if($curRowNum > 0 && $curCsvRow !="")
            {
                $csvValues=explode("|",$curCsvRow);
                if(sizeof($csvValues) >= $recognizedFields)
                {
                    $curDataValues=array();
                    foreach($fieldPos as $fieldName=>$pos)
                    {
                        if($pos>=0)
                        {
                            $curDataValues[$fieldName]=trim($csvValues[$pos]);
                            if($fieldName=="id_circoscrizione")
                            {
                                $curDataValues['circoscrizione']=$circoscrizioni[intVal($csvValues[$pos])];
                            }
                            
                            if($fieldName=="indirizzo")
                            {
                                $curDataValues['indirizzo']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="contatti")
                            {
                                $curDataValues['contatti']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="affluenza")
                            {
                                $curDataValues['affluenza']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="risultati")
                            {
                                $curDataValues['risultati']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="operatori")
                            {
                                $curDataValues['operatori']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="rendiconti")
                            {
                                $curDataValues['rendiconti']=base64_decode($csvValues[$pos]);
                            }

                            if($fieldName=="comunicazioni")
                            {
                                $curDataValues['comunicazioni']=base64_decode($csvValues[$pos]);
                            }
                        }
                    }
                    $data[]=$curDataValues;
                }
            }
            $curRowNum++;
        }

        AA_SessionVar::Set("SierComuneMultiFromCSV_ParsedData",$data,false);
        
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction('dlg',array("task"=>"GetSierComuneAddNewMultiPreviewDlg","params"=>array("id"=>$object->GetId())),true);
        $task->SetContent("Csv elaborato.",false);
                
        return true;
    }

    //Task aggiunta comuni da csv, passo 3 di 3
    public function Task_SierComuneAddNewMulti($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);

            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);        
            return false;
        }

        $data=AA_SessionVar::Get("SierComuneMultiFromCSV_ParsedData")->GetValue();

        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $data=array();
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono stati trovati dati da inserire.",false);        
            return false;
        }

        //AA_Log::Log(__METHOD__." - dati csv: ".print_r($data,TRUE),100);

        $count=$object->AddNewComuneMulti($data,$this->oUser);

        if($count===false)
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $data=array();
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("dati csv non validi.",false);
            return false;
        }

        //elimina le variabili di sessione
        AA_SessionVar::UnsetVar("SierComuneMultiFromCSV_ParsedData");

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction('dlg',array("task"=>"GetSierComuneAddNewMultiResultDlg","params"=>array("id"=>$object->GetId(),"count"=>json_encode($count))),true);
        $task->SetContent("Csv elaborato.",false);
                
        return true;
    }
    
    //Task Aggiungi provvedimenti
    public function Task_AddNewSier($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $task->SetError("L'utente corrente non ha i permessi per aggiungere nuovi elementi");
            $sTaskLog="<status id='status'>-1</status><error id='error'>L'utente corrente non ha i permessi per aggiungere nuovi elementi</error>";
            $task->SetLog($sTaskLog);

            return false;
        }
        
        return $this->Task_GenericAddNew($task,$_REQUEST);
    }

    //Task Aggiungi provvedimenti
    public function Task_GetSierWebApp($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierReportViewDlg(),true);
        
        return true;
    }

    //Task aggiunta organismo
    public function Task_GetSierListaCandidati($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
       
        $filter=$_REQUEST["filter"];

        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            die("[]");
        }
        
        if($object->IsReadOnly())
        {
            die("[]");    
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if($comune instanceof AA_SierComune)
        {
           $circoscrizione=$comune->GetProp("id_circoscrizione");
        }

        $candidati=$object->GetCandidati(null,null,$circoscrizione);

        $result=array();
        $count=1;
        foreach($candidati as $curCandidato)
        {
            $result[]=array("id"=>$curCandidato->GetProp('id'),"denominazione"=>$curCandidato->GetProp('cognome')." ".$curCandidato->GetProp('nome')." (".$curCandidato->GetProp('lista').")","value"=>$curCandidato->GetProp('cognome')." ".$curCandidato->GetProp('nome')." (".$curCandidato->GetProp('lista').")");
            $count++;
        }

        die(json_encode($result));
    }

    //Task aggiornamento preferenze da csv, passo 2 di 3
    public function Task_GetSierComuneRisultatiPreferenzeCsvImportCalc($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);

            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);        
            return false;
        }

        $comune=$object->GetComune($_REQUEST['id_comune']);
        if(!$comune instanceof AA_SierComune)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo comune non valido. (".$_REQUEST['id_comune'].")",false);
            return false;
        }

        $csvFile=AA_SessionFileUpload::Get("SierComunePreferenzeCSV");
        if(!$csvFile->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido",false);        
            return false;
        }

        $csv=$csvFile->GetValue();
        if(!is_file($csv["tmp_name"]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido (1)",false);
            return false;
        }

        $csvRows=explode("\n",str_replace("\r","",file_get_contents($csv["tmp_name"])));
        //Elimina il file temporaneo
        if(is_file($csv["tmp_name"]))
        {
            unlink($csv["tmp_name"]);
        }

        $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
        
        //Parsing della posizione dei campi
        //denominazione,indirizzo,contatti,risultati,affluenza,operatori,sezioni,elettori_m,elettori_f,id_circoscrizione,rendiconti,pec,lastupdate
        $fieldPos=array(
            "id_candidato"=>-1,
            "voti"=>-1
        );
        
        $recognizedFields=0;
        foreach(explode(",",$csvRows[0]) as $pos=>$curFieldName)
        {
            if($fieldPos[trim(strtolower($curFieldName))] == -1)
            {
                $fieldPos[trim(strtolower($curFieldName))] = $pos;
                $recognizedFields++;
            }
        }
        //----------------------------------------

        if($fieldPos['id_candidato']==-1 || $fieldPos['voti'] ==-1)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono stati trovati tutti i campi relativi a: id_candidato,voti. Verificare che il file csv sia strutturato correttamente e riprovare",false);
            return false;
        }

        //parsing dei dati
        $voti_candidato_csv=array();
        $curRowNum=0;
        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        $reset=false;
        $incrementale=false;

        $risultati=$comune->GetRisultati(true);

        if(isset($_REQUEST['csv_reset']) && $_REQUEST['csv_reset'] > 0) $reset=true;
        if(isset($_REQUEST['csv_incrementale']) && $_REQUEST['csv_incrementale']>0) $incrementale=true;

        foreach($csvRows as $curCsvRow)
        {
            //salta la prima riga
            if($curRowNum > 0 && $curCsvRow !="")
            {
                $csvValues=explode(",",$curCsvRow);
                if(sizeof($csvValues) >= $recognizedFields && isset($candidati[$csvValues[$fieldPos['id_candidato']]]))
                {
                    $voti_candidato_csv[$csvValues[$fieldPos['id_candidato']]]=array("voti"=>intVal(str_replace(".","",$csvValues[$fieldPos['voti']])));
                }
            }
            $curRowNum++;
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if(isset($voti_candidato_csv[$idCandidato]))
            {
                if($incrementale && isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$idCandidato]))
                {
                    $voti_candidato_csv[$idCandidato]['voti']+=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                }
                $voti_candidato_csv[$idCandidato]['candidato']=$curCandidato->GetProp("nome")." ".$curCandidato->GetProp("cognome");
            }
            else
            {
                if($reset) $voti_candidato_csv[$idCandidato]=array("voti"=>0,"candidato"=>$curCandidato->GetProp("nome")." ".$curCandidato->GetProp("cognome"));
            }
        }

        $risultati['voti_candidato']=$voti_candidato_csv;

        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);

        if($analisi[0] && ($analisi[3]['risultati_voti_presidente_check'] > 0 || $analisi[3]['risultati_voti_lista_check']>0 || $analisi[3]['risultati_voti_candidato_check'] > 0))
        {
            $id=$this->id."_GetSierResultCSVAnalisiRisultatiDlg";
            
            $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità risultati comune di ".$comune->GetProp("denominazione"), $this->id);
            
            $wnd->SetWidth(580);
            $wnd->SetHeight(280);

            if($analisi[0]==true)
            {
                $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
                foreach($analisi[1] as $curError)
                {
                    $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
                }
                $content.="</ul></div>";
            }
            else
            {
                $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%;height: 100%'><p>I dati sono coerenti.</p></div>";
            }
            
            $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));
           
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($wnd,true);
            return false;
        }

        AA_SessionVar::Set("SierComuneRisultatiPreferenzeCSV_ParsedData",$voti_candidato_csv,false);
        
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $params=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp('id'));
        if(isset($_REQUEST['refresh_obj_id'])) $params["refresh_obj_id"]=$_REQUEST['refresh_obj_id'];
        if(isset($_REQUEST['refresh'])) $params["refresh"]=$_REQUEST['refresh'];
        $task->SetStatusAction('dlg',array("task"=>"GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg","params"=>$params),true);
        $task->SetContent("Csv elaborato.",false);
                
        return true;
    }

    //Task aggiornamento preferenze da csv, passo 2 di 3
    public function Task_GetSierOCRisultatiPreferenzeCsvImportCalc($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $csvFile=AA_SessionFileUpload::Get("SierComunePreferenzeCSV");
        if(!$csvFile->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido",false);        
            return false;
        }

        $csv=$csvFile->GetValue();
        if(!is_file($csv["tmp_name"]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("File non valido (1)",false);
            return false;
        }

        $csvRows=explode("\n",str_replace("\r","",file_get_contents($csv["tmp_name"])));
        //Elimina il file temporaneo
        if(is_file($csv["tmp_name"]))
        {
            unlink($csv["tmp_name"]);
        }
        
        //Parsing della posizione dei campi
        $fieldPos=array(
            "id_candidato"=>-1,
            "voti"=>-1
        );
        
        $recognizedFields=0;
        foreach(explode(",",$csvRows[0]) as $pos=>$curFieldName)
        {
            if($fieldPos[trim(strtolower($curFieldName))] == -1)
            {
                $fieldPos[trim(strtolower($curFieldName))] = $pos;
                $recognizedFields++;
            }
        }
        //----------------------------------------

        if($fieldPos['id_candidato']==-1 || $fieldPos['voti'] ==-1)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono stati trovati tutti i campi relativi a: id_candidato,voti. Verificare che il file csv sia strutturato correttamente e riprovare",false);
            return false;
        }

        //parsing dei dati
        $voti_candidato_csv=array();
        $curRowNum=0;
        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        $reset=false;
        $incrementale=false;

        $risultati=$comune->GetRisultati(true);

        if(isset($_REQUEST['csv_reset']) && $_REQUEST['csv_reset'] > 0) $reset=true;
        if(isset($_REQUEST['csv_incrementale']) && $_REQUEST['csv_incrementale']>0) $incrementale=true;

        foreach($csvRows as $curCsvRow)
        {
            //salta la prima riga
            if($curRowNum > 0 && $curCsvRow !="")
            {
                $csvValues=explode(",",$curCsvRow);
                if(sizeof($csvValues) >= $recognizedFields && isset($candidati[$csvValues[$fieldPos['id_candidato']]]))
                {
                    $voti_candidato_csv[$csvValues[$fieldPos['id_candidato']]]=array("voti"=>trim(intVal($csvValues[$fieldPos['voti']])));
                }
            }
            $curRowNum++;
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if(isset($voti_candidato_csv[$idCandidato]))
            {
                if($incrementale && isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$idCandidato]))
                {
                    $voti_candidato_csv[$idCandidato]['voti']+=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                }
                $voti_candidato_csv[$idCandidato]['candidato']=$curCandidato->GetProp("nome")." ".$curCandidato->GetProp("cognome");
            }
            else
            {
                if($reset) $voti_candidato_csv[$idCandidato]=array("voti"=>0,"candidato"=>$curCandidato->GetProp("nome")." ".$curCandidato->GetProp("cognome"));
            }
        }

        $risultati['voti_candidato']=$voti_candidato_csv;

        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);

        if($analisi[0] && ($analisi[3]['risultati_voti_presidente_check'] > 0 || $analisi[3]['risultati_voti_lista_check']>0 || $analisi[3]['risultati_voti_candidato_check'] > 0))
        {
            $id=$this->id."_GetSierResultCSVAnalisiRisultatiDlg";
            
            $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità risultati comune di ".$comune->GetProp("denominazione"), $this->id);
            
            $wnd->SetWidth(580);
            $wnd->SetHeight(280);

            if($analisi[0]==true)
            {
                $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
                foreach($analisi[1] as $curError)
                {
                    $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
                }
                $content.="</ul></div>";
            }
            else
            {
                $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%;height: 100%'><p>I dati sono coerenti.</p></div>";
            }
            
            $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));
           
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($wnd,true);
            return false;
        }

        AA_SessionVar::Set("SierComuneRisultatiPreferenzeCSV_ParsedData",$voti_candidato_csv,false);
        
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $params=array("id"=>$object->GetId(),"id_comune"=>$comune->GetProp('id'));
        if(isset($_REQUEST['refresh_obj_id'])) $params["refresh_obj_id"]=$_REQUEST['refresh_obj_id'];
        if(isset($_REQUEST['refresh'])) $params["refresh"]=$_REQUEST['refresh'];
        $task->SetStatusAction('dlg',array("task"=>"GetSierOCRisultatiPreferenzeCsvImportPreviewDlg","params"=>$params),true);
        $task->SetContent("Csv elaborato.",false);
                
        return true;
    }

    //Task aggiornamento preferenze da csv, passo 3 di 3
    public function Task_SierComuneRisultatiPreferenzeCsvImport($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object=new AA_Sier($_REQUEST['id'], $this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);

            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo elemento non valido o permessi insufficienti. (".$_REQUEST['id'].")",false);        
            return false;
        }

        $comune=$object->GetComune($_REQUEST['id_comune']);
        if(!$comune instanceof AA_SierComune)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo comune non valido. (".$_REQUEST['id_comune'].")",false);
            return false;
        }

        $voti_candidato_csv=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();

        if(!is_array($voti_candidato_csv))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($voti_candidato_csv,TRUE),100);
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("- dati non validi",false);
            return false;
        }

        $voti_candidato=array();
        foreach($voti_candidato_csv as $idCandidato=>$curCandidato)
        {
            $voti_candidato[$idCandidato]=array("voti"=>$curCandidato['voti']);
        }

        $risultati=$comune->GetRisultati(true);
        $risultati['voti_candidato']=$voti_candidato;

        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);

        if($analisi[0] && ($analisi[3]['risultati_voti_presidente_check'] > 0 || $analisi[3]['risultati_voti_lista_check']>0 || $analisi[3]['risultati_voti_candidato_check'] > 0))
        {
            $id=$this->id."_GetSierResultCSVAnalisiRisultatiDlg";
            
            $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità risultati comune di ".$comune->GetProp("denominazione"), $this->id);
            
            $wnd->SetWidth(580);
            $wnd->SetHeight(280);

            if($analisi[0]==true)
            {
                $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
                foreach($analisi[1] as $curError)
                {
                    $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
                }
                $content.="</ul></div>";
            }
            else
            {
                $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%;height: 100%'><p>I dati sono coerenti.</p></div>";
            }
            
            $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));
           
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($wnd,true);
            return false;
        }

        AA_SessionVar::UnsetVar("SierComuneRisultatiPreferenzeCSV_ParsedData");
        $comune->SetAnalisiRisultati($analisi);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti candidato (da csv)."))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidato.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento preferenze da csv, passo 3 di 3
    public function Task_Update_OC_RisultatiPreferenzeCsvImport($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        $voti_candidato_csv=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();

        if(!is_array($voti_candidato_csv))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($voti_candidato_csv,TRUE),100);
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("- dati non validi",false);
            return false;
        }

        $voti_candidato=array();
        foreach($voti_candidato_csv as $idCandidato=>$curCandidato)
        {
            $voti_candidato[$idCandidato]=array("voti"=>$curCandidato['voti']);
        }

        $risultati=$comune->GetRisultati(true);
        $risultati['voti_candidato']=$voti_candidato;

        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);

        if($analisi[0] && ($analisi[3]['risultati_voti_presidente_check'] > 0 || $analisi[3]['risultati_voti_lista_check']>0 || $analisi[3]['risultati_voti_candidato_check'] > 0))
        {
            $id=$this->id."_GetSierResultCSVAnalisiRisultatiDlg";
            
            $wnd=new AA_GenericWindowTemplate($id, "Analisi criticità risultati comune di ".$comune->GetProp("denominazione"), $this->id);
            
            $wnd->SetWidth(580);
            $wnd->SetHeight(280);

            if($analisi[0]==true)
            {
                $content="<div style='display: flex; justify-content: flex-start; align-items: center; padding-right: 1em; width: 90%'><ul>Sono state riscontrate le seguenti criticità:";
                foreach($analisi[1] as $curError)
                {
                    $content.="<li style='font-weight:bold; margin-top: 1em;'>".$curError."</li>";
                }
                $content.="</ul></div>";
            }
            else
            {
                $content="<div style='display: flex; justify-content: center; align-items: center; width: 100%;height: 100%'><p>I dati sono coerenti.</p></div>";
            }
            
            $wnd->AddView(new AA_JSON_Template_Template($id."_Content",array("type"=>"clean","template"=>$content)));
           
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($wnd,true);
            return false;
        }

        AA_SessionVar::UnsetVar("SierComuneRisultatiPreferenzeCSV_ParsedData");
        $comune->SetAnalisiRisultati($analisi);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti preferenze (da csv) - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidato.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }
    //Task login operatore comunale 
    public function Task_OCLogin($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SiER non valido.",false);
            return false;
        }

        $cf=$_REQUEST['cf'];
        if($cf == "")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Codice fiscale errato",false);
            return false;
        }

        $comune=$object->GetComune("",$cf);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non abilitato.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->ChallengeLogin($cf,$object->GetId()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("dlg",array("task"=>"GetOCLoginVerifyDlg","postParams"=>array("id"=>$object->GetId())),true);

        $task->SetContent("Token di autenticazione inviato alla email dell'operatore.",false);
        return true;
    }

    //Task login operatore comunale 
    public function Task_OCVerifyLogin($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->VerifyLogin($_REQUEST['codice']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Autenticazione avvenuta con successo.",false);
        return true;
    }

    //Task aggiungi affluenza operatore comunale 
    public function Task_GetSierOCAffluenzaAddNewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCAffluenzaAddNewDlg($object,$comune),true);
        return true;
    }

    //Task modifica dati generali operatore comunale 
    public function Task_GetSierOCModifyDatiGeneraliDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_OC_DatiGeneraliModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica dati generali operatore comunale 
    public function Task_GetSierOCModifyCorpoElettoraleDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_OC_CorpoElettoraleModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica comunicazioni operatore comunale 
    public function Task_GetSierOCModifyComunicazioniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyComunicazioniDlg($object,$comune),true);
        return true;
    }

    //Task conferma certificazione corpo elettorale operatore comunale 
    public function Task_GetSierOCConfirmCertCorpoElettoraleDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_OC_ConfirmCertCorpoElettoraleDlg($object,$comune),true);
        return true;
    }

    //Task login operatore comunale 
    public function Task_Update_OC_ComuneDatiGenerali($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $comune->SetProp("pec",$_REQUEST['pec']);
        $comune->SetProp("contatti",$_REQUEST['contatti']);
        $comune->SetProp("indirizzo",$_REQUEST['indirizzo']);

        if(!$object->UpdateComune($comune,$this->oUser," - aggiornamento dati generali - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati generali aggiornati con successo.",false);
        return true;
    }

    //Task login operatore comunale 
    public function Task_Update_OC_ComuneCorpoElettorale($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if($_REQUEST['sezioni']!=$_REQUEST['sezioni_ordinarie']+$_REQUEST['sezioni_ospedaliere'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni totali devono corrispondere alla somma delle sezioni ospedaliere più quelle ordinarie",false);
            return false;
        }

        if($_REQUEST['elettori_m']<=0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Gli elettori maschi non possono essere assenti.",false);
            return false;
        }

        if($_REQUEST['elettori_f']<=0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le elettrici femmine non possono essere assenti.",false);
            return false;
        }

        if(isset($_REQUEST['sezioni']) && $_REQUEST['sezioni']>0) $comune->SetProp("sezioni",$_REQUEST['sezioni']);
        if(isset($_REQUEST['sezioni_ordinarie']) && $_REQUEST['sezioni_ordinarie']>0) $comune->SetProp("sezioni_ordinarie",$_REQUEST['sezioni_ordinarie']);
        if(isset($_REQUEST['sezioni_ospedaliere']) && $_REQUEST['sezioni_ospedaliere']>=0) $comune->SetProp("sezioni_ospedaliere",$_REQUEST['sezioni_ospedaliere']);
        if(isset($_REQUEST['elettori_m']) && $_REQUEST['elettori_m']>0) $comune->SetProp("elettori_m",$_REQUEST['elettori_m']);
        if(isset($_REQUEST['elettori_f']) && $_REQUEST['elettori_f']>0) $comune->SetProp("elettori_f",$_REQUEST['elettori_f']);
        if(isset($_REQUEST['elettori_esteri_m']) && $_REQUEST['elettori_esteri_m']>=0) $comune->SetProp("elettori_esteri_m",$_REQUEST['elettori_esteri_m']);
        if(isset($_REQUEST['elettori_esteri_f']) && $_REQUEST['elettori_esteri_f']>=0) $comune->SetProp("elettori_esteri_f",$_REQUEST['elettori_esteri_f']);
        if(isset($_REQUEST['luoghi_detenzione']) && $_REQUEST['luoghi_detenzione']>=0) $comune->SetProp("luoghi_detenzione",$_REQUEST['luoghi_detenzione']);
        if(isset($_REQUEST['luoghi_cura_sub100']) && $_REQUEST['luoghi_cura_sub100']>=0) $comune->SetProp("luoghi_cura_sub100",$_REQUEST['luoghi_cura_sub100']);
        if(isset($_REQUEST['luoghi_cura_over100']) && $_REQUEST['luoghi_cura_over100']>=0) $comune->SetProp("luoghi_cura_over100",$_REQUEST['luoghi_cura_over100']);

        if(!$object->UpdateComune($comune,$this->oUser," - modifica corpo elettorale - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task modifica elemento
    public function Task_GetSierModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non può modifcare l'elemento.</error>";
            $task->SetLog($sTaskLog);

            return false;
        }

        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        else
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyDlg($object)->toBase64();
            $sTaskLog.="</content>";
        }
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task pannello di controllo dlg
    public function Task_GetSierControlPannelDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        else
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierControlPannelDlg($object)->toBase64();
            $sTaskLog.="</content>";
        }
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    public function Task_GetSierConfirmDeleteSorteggioDocDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi sufficienti per completare l'operazione richiesta.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmDeleteSorteggioDocDlg($object),true);

        return true;
    }

    //Task sorteggio comuni
    public function Task_DoSorteggioComuniRendicontazione($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi sufficienti per completare l'operazione richiesta.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }


        $cp=$object->GetControlPannel();
        if(isset($cp['estrazione_comuni']))
        {
            $task->SetStatus(AA_GenericModuleTask::AA_STATUS_SUCCESS);
            $task->SetContent("Estrazione gia' presente.",false);
            $task->SetStatusAction("pdfPreview",json_encode(array("url"=>AA_Const::AA_WWW_ROOT."/storage.php?object=".$cp['estrazione_comuni'])));
        }
        else
        {
            $file=$this->Template_BuildSorteggioComuniRendicontazione($object);
            if($file===false)
            {
                $task->SetStatus(AA_GenericModuleTask::AA_STATUS_FAILED);
                $task->SetError("Errore nella generazione del report di estrazione.",false);
                return false;
            }
            //aggiornamento pannello dio controllo
            if(isset($cp['estrazione_comuni']))
            {
                $storage=AA_Storage::GetInstance($this->oUser);
                if($storage->IsValid())
                {
                    if(!$storage->DelFile($cp['estrazione_comuni']))
                    {
                        AA_Log::Log(__METHOD__." - eliminazione vecchio report non riuscita.",100);
                    }
                }
            }

            $cp['estrazione_comuni']=$file->GetFileHash();
            $object->SetControlPannel($cp);
            if(!$object->Update($this->oUser,true," - Aggiornamento documento risultati sorteggio comuni per la rendicontaszione"))
            {
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("Errore nell'aggiornamento dell'oggetto",false);
                return false;
            }

            $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
            //$task->SetStatusAction("pdfPreview",json_encode(array("url"=>AA_Const::AA_WWW_ROOT."/storage.php?object=".$cp['estrazione_comuni'])));
            $task->SetStatusAction("RefreshControlPannel",json_encode(array("id"=>$object->GetId())));
            $task->SetContent("Documento generato.",false);
        }
        
        return true;
    }

    //Task sorteggio comuni
    public function Task_DeleteSorteggioComuniRendicontazione($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());

        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi sufficienti per completare l'operazione richiesta.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }


        $cp=$object->GetControlPannel();
       
        if(isset($cp['estrazione_comuni']))
        {
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                if(!$storage->DelFile($cp['estrazione_comuni']))
                {
                    AA_Log::Log(__METHOD__." - eliminazione vecchio report non riuscita.",100);
                    $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                    $task->SetError("Eliminazione vecchio report non riuscita.",false);
                    return false;
                }
            }
        }

        unset($cp['estrazione_comuni']);
        $object->SetControlPannel($cp);
        if(!$object->Update($this->oUser,true," - Eliminazione documento risultati sorteggio comuni per la rendicontaszione"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dell'oggetto",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Report rimosso correttamente.",false);
        $task->SetStatusAction("RefreshControlPannel",json_encode(array("id"=>$object->GetId())));

        return true;
    }
    
    //Task resume organismo
    public function Task_GetSierResumeDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per ripristinare elementi.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if($_REQUEST['ids']!="")
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetGenericResumeObjectDlg($_REQUEST,"ResumeSier")->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }    
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Identificativi non presenti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        return true;
    }
    
    //Task publish organismo
    public function Task_GetSierPublishDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per pubblicare elementi.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if($_REQUEST['ids']!="")
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetGenericPublishObjectDlg($_REQUEST,"PublishSier")->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }    
        else
        {
            // to do lista da recuperare con filtro
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Identificativi non presenti.</error>";
            
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        return true;
    }
    
    //Task Riassegna provvedimenti
    public function Task_GetSierReassignDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
         if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per riassegnare elementi.</error>";
            
            $task->SetLog($sTaskLog);
        
            return false;
        }
        if($_REQUEST['ids']!="")
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetGenericReassignObjectDlg($_REQUEST,"ReassignSier")->toBase64();
            $sTaskLog.="</content>";
            
            $task->SetLog($sTaskLog);
        
            return true;
        }    
        else
        {
            // to do lista da recuperare con filtro
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Identificativi non presenti.</error>";
            
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        return true;
    }
    
    //Task elimina organismo
    public function Task_GetSierTrashDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per cestinare/eliminare elementi di questo tipo.</error>";
            
            $task->SetLog($sTaskLog);
        
            return false;
        }
        if($_REQUEST['ids']!="")
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetGenericObjectTrashDlg($_REQUEST,"TrashSier")->toBase64();
            $sTaskLog.="</content>";
            
            $task->SetLog($sTaskLog);
        
            return true;
        }    
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Identificativi non presenti.</error>";
            
            $task->SetLog($sTaskLog);
        
            return false;
        }

        return true;
    }
       
    //Task dialogo elimina provvedimenti
    public function Task_GetSierDeleteDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Const::AA_USER_FLAG_ART22) && !$this->oUser->HasFlag(AA_Const::AA_USER_FLAG_ART22_ADMIN))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per cestinare/eliminare organismi.</error>";
        }
        if($_REQUEST['ids']!="")
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierDeleteDlg($_REQUEST)->toBase64();
            $sTaskLog.="</content>";
        }    
        else
        {
            // to do lista da recuperare con filtro
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Identificativi non presenti.</error>";
        }
        
        $task->SetLog($sTaskLog);
        
        return true;
    }
    
    //Task aggiunta provvedimenti
    public function Task_GetSierAddNewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
       
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per istanziare nuovi elementi.</error>";
        }
        else
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewDlg()->toBase64();
            $sTaskLog.="</content>";
        }
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

    //Task aggiungi giornata
    public function Task_GetSierAddNewGiornataDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Oggetto non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewGiornataDlg($object)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'oggetto (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi dato contabile
    public function Task_GetSierModifyGiornataDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Oggetto non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'oggetto (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $giornata=$_REQUEST['data'];
        if($giornata==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Data non valida (".$_REQUEST['data'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierModifyGiornataDlg($object,$giornata)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task aggiungi dato contabile
    public function Task_GetSierTrashGiornataDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Oggetto non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'oggetto (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $giornata=$_REQUEST['data'];
        if($giornata==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Data non valida (".$_REQUEST['data'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierTrashGiornataDlg($object,$giornata)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task aggiungi cv candidato
    public function Task_GetSierAddNewCandidatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $liste=$object->GetListe();
        if(sizeof($liste)==0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Non sono presenti Liste da associare al candidato, occorre inserire almeno una Lista per procedere.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $lista=null;
        if($_REQUEST['id_lista'] !="" && isset($liste[$_REQUEST['id_lista']]))
        {
            $lista=$liste[$_REQUEST['id_lista']];
        }

        //AA_Log::Log(__METHOD__." - lista_desc: ".$_REQUEST['lista_desc']." - ".print_r(array_keys($liste,[$_REQUEST['lista_desc']]),true),100);
        if($_REQUEST['lista_desc'] !="")
        {
            foreach($liste as $curlista)
            {
                if($curlista->GetProp("denominazione")==$_REQUEST['lista_desc']) $lista=$curlista;
            }
        }

        $id_circoscrizione=0;
        if($_REQUEST['circoscrizione_desc'] !="")
        {
            foreach(AA_Sier_Const::GetCircoscrizioni() as $id=>$curCircoscrizione)
            {
                if($curCircoscrizione==$_REQUEST['circoscrizione_desc']) $id_circoscrizione=$id;
            }
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewCandidatoDlg($object,$lista,$id_circoscrizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi cv candidato
    public function Task_GetSierModifyCandidatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $liste=$object->GetListe();
        if(sizeof($liste)==0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Non sono presenti Liste da associare al candidato, occorre inserire almeno una Lista per procedere.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSiermodifyCandidatoDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }


    //Task aggiungi cv candidato
    public function Task_GetSierAddNewCandidatoCVDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewCandidatoCVDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi cg candidato
    public function Task_GetSierAddNewCandidatoCGDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewCandidatoCGDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task modifica cg candidato
    public function Task_GetSierModifyCandidatoCGDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyCandidatoCGDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task elimina cg candidato
    public function Task_GetSierTrashCandidatoCGDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierTrashCandidatoCGDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task elimina cg candidato Presidente
    public function Task_GetSierTrashPresidenteCGDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierTrashPresidenteCGDlg($object,$coalizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task elimina cv candidato Presidente
    public function Task_GetSierTrashPresidenteCVDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierTrashPresidenteCVDlg($object,$coalizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task elimina cg candidato
    public function Task_GetSierTrashCandidatoCVDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierTrashCandidatoCVDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task elimina candidato
    public function Task_GetSierTrashCandidatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierTrashCandidatoDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task modifica cv candidato
    public function Task_GetSierModifyCandidatoCVDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Candidato non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyCandidatoCVDlg($object,$candidato)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task modifica cv candidato
    public function Task_GetSierModifyPresidenteCVDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Coalizione non valido.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyPresidenteCVDlg($object,$coalizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task modifica cg candidato Presidente
    public function Task_GetSierModifyPresidenteCGDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyPresidenteCGDlg($object,$coalizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi allegato
    public function Task_GetSierAddNewAllegatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewAllegatoDlg($object)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task email export
    public function Task_GetSierOCEmailsCSV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            header('Content-Type: text/csv');
            die($object->GetOCEmailCSV());
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task export csv corpo elettorale allegato
    public function Task_ExportCorpoElettoraleComuniCSV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0 || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF))
        {
            header('Content-Type: text/csv');
            die($object->ExportCorpoElettoraleComuniCSV());
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task export csv comuni
    public function Task_ExportDatiComuniCSV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0 || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF))
        {
            header('Content-Type: text/csv');
            die($object->ExportDatiComuniCSV());
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task export csv corpo elettorale allegato
    public function Task_ExportCandidatiCSV($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0 || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF))
        {
            header('Content-Type: text/csv');
            die($object->ExportCandidatiCSV());
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi Lista
    public function Task_GetSierAddNewListaDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Coalizione non valido (".$_REQUEST['id_coalizione'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewListaDlg($object,$coalizione)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi Lista
    public function Task_GetSierModifyListaDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if(!($coalizione instanceof AA_SierCoalizioni))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Coalizione non valido (".$_REQUEST['id_coalizione'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $liste=$coalizione->GetListe();
        //AA_Log::Log(__METHOD__." - liste: ".print_r($liste,true),100);

        if(!isset($liste[$_REQUEST['id_lista']]))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Lista non valido (".$_REQUEST['id_lista'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        $lista=$liste[$_REQUEST['id_lista']];
        //AA_Log::Log(__METHOD__." - lista: ".print_r($lista,true),100);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyListaDlg($object,$coalizione,$lista)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiungi Coalizione
    public function Task_GetSierAddNewCoalizioneDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierAddNewCoalizioneDlg($object)->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task modifica Comune
    public function Task_GetSierComuneDatiGeneraliViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneDatiGeneraliViewDlg($object,$comune),true);
        return true;
    }

    //Template_GetSierExportDatiServizioElettoraleDlg
    public function Task_GetSierExportDatiServizioElettoraleDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierExportDatiServizioElettoraleDlg($object),true);
        return true;
    }

    //Task corpo elettorale
    public function Task_GetSierComuneCorpoElettoraleViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneCorpoElettoraleViewDlg($object,$comune),true);
        return true;
    }


    //Task comunicazioni Comune
    public function Task_GetSierComuneComunicazioniViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneComunicazioniViewDlg($object,$comune),true);
        return true;
    }

    //Task affluenza view Comune
    public function Task_GetSierComuneAffluenzaViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAffluenzaViewDlg($object,$comune),true);
        return true;
    }

    //Task add new Comune
    public function Task_GetSierComuneAddNewMultiDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAddNewMultiDlg($object),true);
        return true;
    }

    //Task add new Comune multi dlg preview
    public function Task_GetSierComuneAddNewMultiPreviewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAddNewMultiPreviewDlg($object),true);
        return true;
    }

    //Task affluenza add new Comune
    public function Task_GetSierComuneAffluenzaAddNewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAffluenzaAddNewDlg($object,$comune),true);
        return true;
    }

    //Task affluenza add new Comune
    public function Task_GetSierComuneRendicontiExportRasPdf($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        die($this->Template_GetSierComuneRendicontiExportRasPdf($object,$comune));

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiExportRasPdf($object,$comune),true);
        return true;
    }

    //Task affluenza add new Comune
    public function Task_GetSierOCRendicontiExportPdf($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $object->Update($this->oUser,true,' - Generazione report rendicontazione - operatore: '.$operatore->GetOperatoreComunaleCf());

        die($this->Template_GetSierComuneRendicontiExportRasPdf($object,$comune));

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiExportRasPdf($object,$comune),true);
        return true;
    }

     //Task affluenza modify affluenza
     public function Task_GetSierComuneAffluenzaModifyDlg($task)
     {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(!isset($_REQUEST['giornata']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Giornata non valida",false);
            return false;
        }
        $giornate=$comune->GetAffluenza(true);
        if(!isset($giornate[$_REQUEST['giornata']]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Giornata non valida",false);
            return false;
        }
        $giornata = $_REQUEST['giornata'];
     
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAffluenzaModifyDlg($object,$comune,$giornata),true);
        return true;
     }

     //Task affluenza trash affluenza
     public function Task_GetSierComuneAffluenzaTrashDlg($task)
     {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(!isset($_REQUEST['giornata']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Giornata non valida",false);
            return false;
        }
        $giornate=$comune->GetAffluenza(true);
        if(!isset($giornate[$_REQUEST['giornata']]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Giornata non valida",false);
            return false;
        }
        $giornata = $_REQUEST['giornata'];
     
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneAffluenzaTrashDlg($object,$comune,$giornata),true);
        return true;
     }

    //Task aggiungi operatore comunale
    public function Task_GetSierComuneOperatoriAddNewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneOperatoriAddNewDlg($object,$comune),true);
        return true;
    }

    //Task modal msg
    public function Task_GetSierAnalisiRisultatiDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierAnalisiRisultatiDlg($object,$comune),true);
        return true;
    }

    //Task modal msg
    public function Task_GetSierAnalisiComunicazioniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierAnalisiComunicazioniDlg($object,$comune),true);
        return true;
    }

    //Task modal msg
    public function Task_GetSierAnalisiCorpoElettoraleDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierAnalisiCorpoElettoraleDlg($object,$comune),true);
        return true;
    }

    //Task modifica operatore comunale
    public function Task_GetSierComuneOperatoriModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $operatori=$comune->GetOperatori(true);
        $operatore=$operatori[strtolower(trim($_REQUEST['cf']))];
        if(!isset($operatori[strtolower(trim($_REQUEST['cf']))]))
        {
            $operatore=$operatori[strtoupper(trim($_REQUEST['cf']))];
            if(!isset($operatori[strtoupper(trim($_REQUEST['cf']))]))
            {
                AA_Log::Log(__METHOD__." - operatore non valido: ".print_r($operatori,true)." - ".print_r($_REQUEST,true),100);
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("Operatore non valido",false);
                return false;    
            }
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneOperatoriModifyDlg($object,$comune,$operatore),true);
        return true;
    }

    //Task modifica dati generali comunale
    public function Task_GetSierComuneRisultatiGeneraliModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiGeneraliModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti seggi
    public function Task_GetSierComuneRendicontiSeggiModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiSeggiModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti buoni
    public function Task_GetSierComuneRendicontiBuoniModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiBuoniModifyDlg($object,$comune),true);
        return true;
    }
    
    //Task modifica rendiconti importo ammesso
    public function Task_GetSierComuneRendicontiImportoAmmessoModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiImportoAmmessoModifyDlg($object,$comune),true);
        return true;
    }
    
    //Task modifica rendiconti buoni
    public function Task_GetSierComuneRendicontiRasModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiRasModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti buoni
    public function Task_GetSierComuneRendicontiRasLiquidazioniModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiRasLiquidazioniModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti servizi
    public function Task_GetSierComuneRendicontiServiziModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiServiziModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti servizi
    public function Task_GetSierOCRendicontiServiziModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiServiziModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti personale det
    public function Task_GetSierComuneRendicontiPersonaleDeterminatoModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiPersonaleDeterminatoModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti personale det
    public function Task_GetSierOCRendicontiPersonaleDeterminatoModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiPersonaleDeterminatoModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti buoni 
    public function Task_GetSierOCRendicontiBuoniModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiBuoniModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica rendiconti buoni 
    public function Task_GetSierOCRendicontiAllegatiModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $allegato=null;
        if(isset($_REQUEST['file']))
        {
            $rendiconti=$comune->GetRendiconti(true);
            if(isset($rendiconti['ras']['allegati'][$_REQUEST['file']]))
            {
                $allegato=$rendiconti['ras']['allegati'][$_REQUEST['file']];
            }
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiModifyAllegatoDlg($object,$allegato),true);
        return true;
    }

    //Task modifica rendiconti servizi
    public function Task_GetSierComuneRendicontiConfirmTrashServiziDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        if(!isset($_REQUEST['id_servizio']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo servizio non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiConfirmTrashServiziDlg($object,$comune,$_REQUEST['id_servizio']),true);
        return true;
    }

    //Task modifica rendiconti servizi
    public function Task_GetSierOCRendicontiConfirmTrashServiziDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(!isset($_REQUEST['id_servizio']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo servizio non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiConfirmTrashServiziDlg($object,$comune,$_REQUEST['id_servizio']),true);
        return true;
    }

    //Task modifica rendiconti personale determinato
    public function Task_GetSierComuneRendicontiConfirmTrashPersonaleDeterminatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        if(!isset($_REQUEST['id_personale_det']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiConfirmTrashPersonaleDeterminatoDlg($object,$comune,$_REQUEST['id_personale_det']),true);
        return true;
    }

    //Task conferma eliminazione rendiconti personale determinato
    public function Task_GetSierOCRendicontiConfirmTrashPersonaleDeterminatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        } 
    
        if(!isset($_REQUEST['id_personale_det']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiConfirmTrashPersonaleDeterminatoDlg($object,$comune,$_REQUEST['id_personale_det']),true);
        return true;
    }

    //Task conferma eliminazione allegato rendicontazione
    public function Task_GetSierOCRendicontiConfirmTrashAllegatiDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
    
        if(!isset($rendiconti['ras']['allegati'][$_REQUEST['file']]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Identificativo allegato non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiConfirmTrashAllegatiDlg($object,$comune,$_REQUEST['file']),true);
        return true;
    }

    //Task modifica rendiconti personale tempo indeterminato
    public function Task_GetSierComuneRendicontiPersonaleIndeterminatoModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiPersonaleIndeterminatoModifyDlg($object,$comune),true);
        return true;
    }
    //Task modifica risultati coalizioni comunale
    public function Task_GetSierComuneRisultatiCoalizioniModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
        
        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiCoalizioniModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati preferenze comunale
    public function Task_GetSierComuneRisultatiPreferenzeModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Candidato non valido",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i risultati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiPreferenzeModifyDlg($object,$comune,$candidato),true);
        return true;
    }

    //Task modifica risultati preferenze csv
    public function Task_GetSierComuneRisultatiPreferenzeCsvImportDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiPreferenzeCsvImportDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati preferenze preview csv
    public function Task_GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $data=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();

        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("- dati csv non validi",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiPreferenzeCsvImportPreviewDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati preferenze preview csv
    public function Task_GetSierOCRisultatiPreferenzeCsvImportPreviewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $data=AA_SessionVar::Get("SierComuneRisultatiPreferenzeCSV_ParsedData")->GetValue();

        if(!is_array($data))
        {
            AA_Log::Log(__METHOD__." - dati csv non validi: ".print_r($data,TRUE),100);
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("- dati csv non validi",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRisultatiPreferenzeCsvImportPreviewDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati preferenze comunale multi
    public function Task_GetSierComuneRisultatiPreferenzeModifyMultiDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if($_REQUEST['lista_desc']=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre selezionare una Lista",false);
            return false;
        }

        $liste=$object->GetListe();
        $lista=null;
        foreach($liste as $curLista)
        {
            if($curLista->GetProp("denominazione")==$_REQUEST['lista_desc'])
            {
                $lista=$curLista;
            }
        }

        if(!($lista instanceof AA_SierLista))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Lista non valida",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i risultati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiPreferenzeModifyMultiDlg($object,$comune,$lista),true);
        return true;
    }

    //Task trash risultati preferenze comunale
    public function Task_GetSierComuneRisultatiPreferenzeTrashDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if($candidato == null)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Candidato non valido",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiPreferenzeTrashDlg($object,$comune,$candidato),true);
        return true;
    }

    //Task modifica risultati coalizioni comunale
    public function Task_GetSierComuneRisultatiListeModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
        
        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i risultati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiListeModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica dati generali comunale (OC)
    public function Task_GetSierOCModifyRisultatiGeneraliDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyRisultatiGeneraliDlg($object,$comune),true);
        return true;
    }

    //Task modifica dati generali comunale (OC)
    public function Task_GetSierOCRendicontiSeggiModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiSeggiModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica dati generali comunale (OC)
    public function Task_GetSierOCRendicontiPersonaleIndeterminatoModifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRendicontiPersonaleIndeterminatoModifyDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati coalizioni (OC)
    public function Task_GetSierOCModifyRisultatiCoalizioniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyRisultatiCoalizioniDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati liste (OC)
    public function Task_GetSierOCModifyRisultatiListeDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }
        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyRisultatiListeDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati liste (OC)
    public function Task_GetSierOCModifyRisultatiPreferenzeDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        $candidato=$object->GetCandidato($_REQUEST['id_candidato']);
        if(!($candidato instanceof AA_SierCandidato))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Candidato non valido",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyRisultatiPreferenzeDlg($object,$comune,$candidato),true);
        return true;
    }

    //Task modifica risultati liste (OC)
    public function Task_GetSierOCRisultatiPreferenzeCsvImportDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCRisultatiPreferenzeCsvImportDlg($object,$comune),true);
        return true;
    }

    //Task modifica risultati preferenze multi (OC)
    public function Task_GetSierOCModifyRisultatiPreferenzeMultiDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if($_REQUEST['lista_desc']=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre selezionare una Lista",false);
            return false;
        }

        $liste=$object->GetListe();
        $lista=null;
        foreach($liste as $curLista)
        {
            if($curLista->GetProp("denominazione")==$_REQUEST['lista_desc'])
            {
                $lista=$curLista;
            }
        }

        if(!($lista instanceof AA_SierLista))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Lista non valida",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti, caricare prima i dati generali.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierOCModifyRisultatiPreferenzeMultiDlg($object,$comune,$lista),true);
        return true;
    }

    //Task modifica operatore comunale
    public function Task_GetSierComuneOperatoriTrashDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $operatori=$comune->GetOperatori(true);
        $operatore=$operatori[strtolower(trim($_REQUEST['cf']))];
        if(!isset($operatori[strtolower(trim($_REQUEST['cf']))]))
        {
            $operatore=$operatori[strtoupper(trim($_REQUEST['cf']))];
            if(!isset($operatori[strtoupper(trim($_REQUEST['cf']))]))
            {
                AA_Log::Log(__METHOD__." - operatore non valido: ".print_r($operatori,true)." - ".print_r($_REQUEST,true),100);
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("Operatore non valido",false);
                return false;    
            }
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneOperatoriTrashDlg($object,$comune,$operatore),true);
        return true;
    }

    //Task operatore comunale auth token verify dlg operatore comunale
    public function Task_GetOCLoginVerifyDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        if(isset($_SESSION['oc_sier_object'])) $object=new AA_Sier($_SESSION['oc_sier_object'],$this->oUser);
        else $object= new AA_Sier($_REQUEST['id'],$this->oUser);

        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetOCVerifyLoginDlg($object),true);
        return true;
    }

    //Task operatori view
    public function Task_GetSierComuneOperatoriViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneOperatoriViewDlg($object,$comune),true);
        return true;
    }
    //Task logs view
    public function Task_GetSierComuneLogsDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneLogsDlg($object,$comune),true);
        return true;
    }
    public function Task_GetSierSerialize($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        header('Content-Type: application/json');
        die($object->serialize());
    }

    //Task feed risultati
    public function Task_GetSierFeedRisultatiAffluenza($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        header('Content-Type: application/json');
        die(json_encode($object->BuildRisultatiAffluenzaFeed()));
    }

    //Task feed candidati
    public function Task_GetSierFeedCandidati($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }
    
        header('Content-Type: application/json');
        die(json_encode($object->BuildCandidatiFeed()));
    }

    //Task risultati Comune view
    public function Task_GetSierComuneRisultatiViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRisultatiViewDlg($object,$comune),true);
        return true;
    }

    //Task rendiconti Comune view
    public function Task_GetSierComuneRendicontiViewDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }
    
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierComuneRendicontiViewDlg($object,$comune),true);
        return true;
    }

    //Task aggiunta operatore Comune
    public function Task_AddNewSierComuneAffluenza($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        if(!isset($_REQUEST['giornata']) || trim($_REQUEST['giornata'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare la giornata.",false);
            return false;
        }

        if(!isset($_REQUEST['ore_12']) || $_REQUEST['ore_12'] == "") $_REQUEST['ore_12']=0;
        if(!isset($_REQUEST['ore_19']) || $_REQUEST['ore_19'] == "") $_REQUEST['ore_19']=0;
        if(!isset($_REQUEST['ore_22']) || $_REQUEST['ore_22'] == "") $_REQUEST['ore_22']=0;

        $elettori=intVal($comune->GetProp('elettori_m'))+intVal($comune->GetProp('elettori_f'));
        if($_REQUEST['ore_12'] > $elettori || $_REQUEST['ore_19'] > $elettori || $_REQUEST['ore_22'] > $elettori)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti non possono superare gli elettori.",false);
            return false;
        }

        if(($_REQUEST['ore_19'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22'] > 0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22']>0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_19'] && $_REQUEST['ore_19']>0))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("il dato dell'affluenza deve essere progressivo, ove maggiore di 0, (votanti ore 12 <= votanti ore 19 <= votanti ore 22).",false);
            return false;
        }

        $affluenza=$comune->GetAffluenza(true);
        if(!is_array($affluenza)) $affluenza=array();

        $affluenza[$_REQUEST['giornata']]=array("aggiornamento"=>date("Y-m-d H:i:s"),"ore_12"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_12'])))),"ore_19"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_19'])))),"ore_22"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_22'])))));
        $comune->SetAffluenza($affluenza);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiunta affluenza per la giornata: ".$_REQUEST['giornata']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dell'affluenza.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento affluenza
    public function Task_UpdateSierComuneAffluenza($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        if(!isset($_REQUEST['giornata']) || trim($_REQUEST['giornata'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare la giornata.",false);
            return false;
        }

        if(!isset($_REQUEST['ore_12']) || $_REQUEST['ore_12'] == "") $_REQUEST['ore_12']=0;
        if(!isset($_REQUEST['ore_19']) || $_REQUEST['ore_19'] == "") $_REQUEST['ore_19']=0;
        if(!isset($_REQUEST['ore_22']) || $_REQUEST['ore_22'] == "") $_REQUEST['ore_22']=0;

        $elettori=intVal($comune->GetProp('elettori_m'))+intVal($comune->GetProp('elettori_f'));
        if($_REQUEST['ore_12'] > $elettori || $_REQUEST['ore_19'] > $elettori || $_REQUEST['ore_22'] > $elettori)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti non possono superare gli elettori.",false);
            return false;
        }

        if(($_REQUEST['ore_19'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22'] > 0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22']>0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_19'] && $_REQUEST['ore_19']>0))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("il dato dell'affluenza deve essere progressivo, ove maggiore di 0, (votanti ore 12 <= votanti ore 19 <= votanti ore 22).",false);
            return false;
        }

        $affluenza=$comune->GetAffluenza(true);
        if(!is_array($affluenza)) $affluenza=array();
        $affluenza[$_REQUEST['giornata']]=array("aggiornamento"=>date("Y-m-d H:i:s"),"ore_12"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_12'])))),"ore_19"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_19'])))),"ore_22"=>intVal(strtolower(trim(str_replace(".","",$_REQUEST['ore_22'])))));
        $comune->SetAffluenza($affluenza);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento affluenza per la giornata: ".$_REQUEST['giornata']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dell'affluenza.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento affluenza
    public function Task_DeleteSierWebAppQrCode($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        $cp=$object->GetControlPannel();
        //Verifica
        if(!isset($cp['sierwebappqrcode']) || trim($cp['sierwebappqrcode'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("QR code non presente",false);
            return false;
        }

        $storage=AA_Storage::GetInstance();
        if($storage->IsValid())
        {
            if(!$storage->DelFile($cp['sierwebappqrcode']))
            {
                AA_Log::Log(__METHOD__." - ".AA_Log::$lastErrorLog,100);
            }
        }

        $cp['sierwebappqrcode']="";

        $object->SetControlPannel($cp);
        if(!$object->Update($this->oUser,true,"Modifica pannello di controllo - eliminazione qr code"))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento del pannello di controllo. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("RefreshControlPannel",json_encode(array("id"=>$object->GetId())));
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    public function Task_TrashSierComuneAffluenza($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        if(!isset($_REQUEST['giornata']) || trim($_REQUEST['giornata'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare la giornata.",false);
            return false;
        }

        $affluenza=$comune->GetAffluenza(true);
        if(!is_array($affluenza)) $affluenza=array();
        if(isset($affluenza[$_REQUEST['giornata']])) unset($affluenza[$_REQUEST['giornata']]);
        $comune->SetAffluenza($affluenza);
        if(!$object->UpdateComune($comune,$this->oUser,"rimozione affluenza per la giornata: ".$_REQUEST['giornata']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dell'affluenza.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati generali
    public function Task_FixComuneLogs($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        $comuni=$object->GetComuni();
        $ids=array();
        $db=new AA_Database();
        foreach($comuni as $idComune=>$curComune)
        {
            //if($curComune->GetProp('denominazione') == 'CAGLIARI')
            {
                $logs=$curComune->GetLogs(true);
                foreach($logs as $idLog=>$curLog)
                {
                    if($curLog['data'] > "2024-02-26 09:00")
                    {
                        //AA_Log::Log(__METHOD__." - log: ".print_r($curLog,true),100);
                        if(strpos($curLog['msg'],"Aggiornamento comunicazioni") !== false)
                        {
                            //AA_Log::Log(__METHOD__." - correggo il log del: ".$curLog['data'],100);
                            $ids[]=$idLog;
                        }
                    }
                }
    
                array_pop($ids);
    
                if(sizeof($ids) > 0)
                {
                    AA_Log::Log(__METHOD__." - Correggo il log del comune di ".$curComune->GetProp("denominazione"),100);
                    foreach($ids as $idLog)
                    {
                        $logs[$idLog]['msg']=str_replace("comunicazioni",'voti Presidente',$logs[$idLog]['msg']);
                    }
    
                    if(!$db->Query("UPDATE ".AA_Sier::AA_COMUNI_DB_TABLE." set logs='".addslashes(json_encode($logs))."' WHERE id='".$curComune->GetProp('id')."' LIMIT 1"))
                    {
                        AA_Log::Log(__METHOD__." - errore: ".$db->GetErrorMessage(),100);
                    }
                }
            }
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    public function Task_UpdateSierComuneRisultatiGenerali($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        if(!isset($_REQUEST['sezioni_scrutinate']) || $_REQUEST['sezioni_scrutinate']<=0 || $_REQUEST['sezioni_scrutinate'] =="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni scrutinate devono essere un numero maggiore di zero.",false);
            return false;
        }

        if(isset($_REQUEST['sezioni_scrutinate']) && $_REQUEST['sezioni_scrutinate']>$comune->GetProp('sezioni'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni scrutinate non possono superare il numero di sezioni del comune.",false);
            return false;
        }
        
        if(!isset($_REQUEST['votanti_m']) || !isset($_REQUEST['votanti_f']) || !isset($_REQUEST['votanti_tot']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre specificare il numero di votanti maschi, femmine e il totale.",false);
            return false;
        }

        if(intVal($_REQUEST['votanti_m'])+intVal($_REQUEST['votanti_f']) != intVal($_REQUEST['votanti_tot']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La somma dei votanti maschi e femmine non corrisponde al totale votanti indicato.",false);
            return false;
        }
        
        $elettori=intVal($comune->GetProp('elettori_m'))+intVal($comune->GetProp('elettori_f'));

        $votanti=0;
        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>0) $votanti+=intVal(str_replace(".","",$_REQUEST['votanti_m']));        
        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>0) $votanti+=intVal(str_replace(".","",$_REQUEST['votanti_f']));
        
        if($votanti>$elettori)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti non possono superare il numero di elettori.",false);
            return false;
        }

        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>$comune->GetProp('elettori_m'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti maschi non possono superare il numero di elettori maschi.",false);
            return false;
        }

        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>$comune->GetProp('elettori_f'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le votanti femmine non possono superare il numero di elettrici femmine.",false);
            return false;
        }

        $voti_non_validi=0;
        if(isset($_REQUEST['schede_bianche']) && $_REQUEST['schede_bianche']>0) $voti_non_validi+=$_REQUEST['schede_bianche'];
        if(isset($_REQUEST['schede_nulle']) && $_REQUEST['schede_nulle']>0) $voti_non_validi+=$_REQUEST['schede_nulle'];
        if(isset($_REQUEST['schede_voti_nulli']) && $_REQUEST['schede_voti_nulli']>0) $voti_non_validi+=$_REQUEST['schede_voti_nulli'];
    
        if($voti_non_validi>$votanti)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il numero di voti non validi (schede bianche+schede nulle+schede contestate+voti nulli) non può superare il numero dei votanti.",false);
            return false;
        }

        $risultati=$comune->GetRisultati(true);
        if(!is_array($risultati)) $risultati=array();
        if(isset($_REQUEST['sezioni_scrutinate']) && $_REQUEST['sezioni_scrutinate']>=0) $risultati['sezioni_scrutinate']=intVal($_REQUEST['sezioni_scrutinate']);
        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>=0) $risultati['votanti_m']=intVal(str_replace(".","",$_REQUEST['votanti_m']));
        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>=0) $risultati['votanti_f']=intVal(str_replace(".","",$_REQUEST['votanti_f']));
        if(isset($_REQUEST['schede_bianche']) && $_REQUEST['schede_bianche']>=0) $risultati['schede_bianche']=intVal($_REQUEST['schede_bianche']);
        if(isset($_REQUEST['schede_nulle']) && $_REQUEST['schede_nulle']>=0) $risultati['schede_nulle']=intVal($_REQUEST['schede_nulle']);
        if(isset($_REQUEST['voti_contestati_na_pre']) && $_REQUEST['voti_contestati_na_pre']>=0) $risultati['voti_contestati_na_pre']=intVal($_REQUEST['voti_contestati_na_pre']);
        if(isset($_REQUEST['voti_contestati_na_liste']) && $_REQUEST['voti_contestati_na_liste']>=0) $risultati['voti_contestati_na_liste']=intVal($_REQUEST['voti_contestati_na_liste']);
        if(isset($_REQUEST['voti_solo_presidente']) && $_REQUEST['voti_solo_presidente']>=0) $risultati['voti_solo_presidente']=intVal($_REQUEST['voti_solo_presidente']);
        if(isset($_REQUEST['schede_voti_nulli']) && $_REQUEST['schede_voti_nulli']>=0) $risultati['schede_voti_nulli']=intVal($_REQUEST['schede_voti_nulli']);
      
        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati generali"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei risultati generali.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati coalizioni
    public function Task_UpdateSierComuneRisultatiCoalizioni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['voti_contestati_na_pre']) && $risultati['voti_contestati_na_pre']>0) $voti_non_validi+=$risultati['voti_contestati_na_pre'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        AA_Log::Log(__METHOD__." - votanti: ".$votanti." - voti non validi: ".$voti_non_validi,100);

        $coalizioni=$object->GetCoalizioni();
        if(sizeof($coalizioni)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti coalizioni.",false);
            return false;
        }

        $voti_presidente=array();
        $voti_totali=0;
        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {
            $voti_presidente[$idCoalizione]=0;
            if(isset($_REQUEST[$idCoalizione]) && $_REQUEST[$idCoalizione]>0)
            {
                $voti_presidente[$idCoalizione]=$_REQUEST[$idCoalizione];
                $voti_totali+=$_REQUEST[$idCoalizione];
            }
        }

        if($voti_totali!=($votanti-$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti per i candidati Presidente (".$voti_totali.") devono essere uguali al numero numero dei voti validi (".$votanti-$voti_non_validi.").",false);
            return false;
        }
        
        $risultati['voti_presidente']=$voti_presidente;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti presidente"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei risultati coalizioni.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati coalizioni
    public function Task_UpdateSierComuneRisultatiListe($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        $liste=$object->GetListe();
        if(sizeof($liste)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti liste.",false);
            return false;
        }

        $voti_liste=array();
        $voti_totali=0;
        foreach($liste as $idLista=>$curCoalizione)
        {
            $voti_liste[$idLista]=0;
            if(isset($_REQUEST["lista_".$idLista]) && $_REQUEST["lista_".$idLista]>0)
            {
                $voti_liste[$idLista]=$_REQUEST["lista_".$idLista];
                $voti_totali+=$_REQUEST["lista_".$idLista];
            }
        }

        if($voti_totali!=($votanti-$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti di lista (".$voti_totali.") devono corrispondere al numero di voti validi (".$votanti-$voti_non_validi.").",false);
            return false;
        }
        
        $risultati['voti_lista']=$voti_liste;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti lista"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei risultati lista.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati preferenze
    public function Task_UpdateSierComuneRisultatiPreferenze($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        //if(isset($risultati['voti_contestati_na_pre']) && $risultati['voti_contestati_na_pre']>0) $voti_non_validi+=$risultati['voti_contestati_na_pre'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti.",false);
            return false;
        }

        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        if(sizeof($candidati)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti candidati.",false);
            return false;
        }

        $voti_candidato=$risultati['voti_candidato'];
        if(!is_array($voti_candidato)) $voti_candidato=array();

        $candidato=null;
        
        if($_REQUEST['voti'] > $risultati['voti_lista'][$candidati[$_REQUEST['id_candidato']]->GetProp('id_lista')])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I voti (".$_REQUEST['voti'].") del candidato ".$candidati[$_REQUEST['id_candidato']]->GetProp('nome')." ".$candidati[$_REQUEST['id_candidato']]->GetProp('cognome')." sono superiori ai voti (".intVal($risultati['voti_lista'][$candidati[$_REQUEST['id_candidato']]->GetProp('id_lista')]).") della lista (".$candidati[$_REQUEST['id_candidato']]->GetProp('lista').") di appartenenza.",false);
            return false;
        }

        $updateCandidato=$candidati[$_REQUEST['id_candidato']];
        $id_lista=$updateCandidato->GetProp("id_lista");
        $tot_voti_candidati=intVal($_REQUEST['voti']);
        foreach($voti_candidato as $idCandidato=>$curCandidato)
        {
            if($candidati[$idCandidato]->GetProp("id_lista")==$id_lista)
            {
                if($idCandidato != $_REQUEST['id_candidato']) $tot_voti_candidati+=intVal($curCandidato['voti']);
            }
        }

        if($id_lista > 0 && $tot_voti_candidati > (2*$risultati['voti_lista'][$id_lista]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti ai candidati (".$tot_voti_candidati.") sono superiori al doppio dei voti (".intVal($risultati['voti_lista'][$id_lista]).") della lista di appartenenza.",false);
            return false;
        }

        if($tot_voti_candidati > 2*($votanti -$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le preferenze totali non possono superare il doppio dei voti validi.",false);
            return false;
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            
            if(isset($candidati[$_REQUEST['id_candidato']]) && $_REQUEST['voti']>=0)
            {
                //$candidato=$candidati[$_REQUEST['id_candidato']]->GetProps();
                $candidato=array();
    
                if(is_array($candidato))
                {
                    $candidato['voti']=intVal($_REQUEST['voti']);
                    $voti_candidato[$_REQUEST['id_candidato']]=$candidato;
                }
            }
        }

        $risultati['voti_candidato']=$voti_candidato;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti candidato."))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidato.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati preferenze
    public function Task_UpdateSierComuneRisultatiPreferenzeMulti($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        //if(isset($risultati['voti_contestati_na_pre']) && $risultati['voti_contestati_na_pre']>0) $voti_non_validi+=$risultati['voti_contestati_na_pre'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti.",false);
            return false;
        }

        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        if(sizeof($candidati)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti candidati.",false);
            return false;
        }

        $voti_candidato=$risultati['voti_candidato'];
        if(!is_array($voti_candidato)) $voti_candidato=array();
        $tot_voti_candidato=0;
        $id_lista=0;
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if(isset($_REQUEST['candidato_'.$idCandidato]))
            {
                //$dati_candidato=$curCandidato->GetProps();
                $dati_candidato=array();
                $dati_candidato['voti']=intVal($_REQUEST['candidato_'.$idCandidato]);
                $voti_candidato[$idCandidato]=$dati_candidato;
                $tot_voti_candidato+=intVal($_REQUEST['candidato_'.$idCandidato]);
                if($id_lista==0) $id_lista=$curCandidato->GetProp('id_lista');
                if(intVal($_REQUEST['candidato_'.$idCandidato]) > $risultati['voti_lista'][$curCandidato->GetProp('id_lista')])
                {
                    $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                    $task->SetError("I voti (".$_REQUEST['candidato_'.$idCandidato].") del candidato ".$candidati[$idCandidato]->GetProp('nome')." ".$candidati[$idCandidato]->GetProp('cognome')." sono superiori ai voti (".intVal($risultati['voti_lista'][$candidati[$idCandidato]->GetProp('id_lista')]).") della lista (".$candidati[$idCandidato]->GetProp('lista').") di appartenenza.",false);
                    return false;
                }
            }
        }

        if($id_lista > 0 && $tot_voti_candidato > (2*$risultati['voti_lista'][$id_lista]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti ai candidati (".$tot_voti_candidato.") sono superiori al doppio dei voti (".intVal($risultati['voti_lista'][$id_lista]).") della lista di appartenenza.",false);
            return false;
        }

        if($tot_voti_candidato > 2*($votanti -$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le preferenze totali non possono superare il doppio dei voti validi.",false);
            return false;
        }

        $risultati['voti_candidato']=$voti_candidato;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti candidato."))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidato.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati preferenze
    public function Task_TrashSierComuneRisultatiPreferenze($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $voti_candidato=$risultati['voti_candidato'];
        if(is_array($voti_candidato)) $voti_candidato=array();


        if(isset($candidati[$_REQUEST['id_candidato']]) && isset($voti_candidato[$_REQUEST['id_candidato']]))
        {
            unset($voti_candidato[$_REQUEST['id_candidato']]);
        }

        $risultati['voti_candidato']=$voti_candidato;

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Rimozione voti candidato."))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidato.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati coalizioni
    public function Task_Update_OC_ComuneRisultatiListe($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        $liste=$object->GetListe(null,$comune->GetProp("id_circoscrizione"));
        if(sizeof($liste)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti liste.",false);
            return false;
        }

        $voti_liste=array();
        $voti_totali=0;
        foreach($liste as $idLista=>$curCoalizione)
        {
            $voti_liste[$idLista]=0;
            if(isset($_REQUEST["lista_".$idLista]) && $_REQUEST["lista_".$idLista]>0)
            {
                $voti_liste[$idLista]=intVal(str_replace(".","",$_REQUEST["lista_".$idLista]));
                $voti_totali+=intVal(str_replace(".","",$_REQUEST["lista_".$idLista]));
            }
        }

        if($voti_totali!=($votanti-$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti di lista (".$voti_totali.") devono corrispondere al numero di voti validi (".$votanti-$voti_non_validi.").",false);
            return false;
        }
        
        $risultati['voti_lista']=$voti_liste;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti lista - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei risultati lista.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati preferenze
    public function Task_Update_OC_ComuneRisultatiPreferenze($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti.",false);
            return false;
        }

        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        if(sizeof($candidati)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti candidati.",false);
            return false;
        }

        $voti_candidato=$risultati['voti_candidato'];
        if(!is_array($voti_candidato)) $voti_candidato=array();

        $candidato=null;
        $tot_voti_candidati=0;
        
        if($_REQUEST['voti'] > $risultati['voti_lista'][$candidati[$_REQUEST['id_candidato']]->GetProp('id_lista')])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I voti (".$_REQUEST['voti'].") del candidato ".$candidati[$_REQUEST['id_candidato']]->GetProp('nome')." ".$candidati[$_REQUEST['id_candidato']]->GetProp('cognome')." sono superiori ai voti (".intVal($risultati['voti_lista'][$candidati[$_REQUEST['id_candidato']]->GetProp('id_lista')]).") della lista (".$candidati[$_REQUEST['id_candidato']]->GetProp('lista').") di appartenenza.",false);
            return false;
        }

        $updateCandidato=$candidati[$_REQUEST['id_candidato']];
        $id_lista=$updateCandidato->GetProp("id_lista");
        $tot_voti_candidati=intVal($_REQUEST['voti']);
        foreach($voti_candidato as $idCandidato=>$curCandidato)
        {
            if($candidati[$idCandidato]->GetProp("id_lista")==$id_lista)
            {
                if($idCandidato != $_REQUEST['id_candidato']) $tot_voti_candidati+=intVal(str_replace(".","",$curCandidato['voti']));
            }
        }

        if($id_lista > 0 && $tot_voti_candidati > (2*$risultati['voti_lista'][$id_lista]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti ai candidati (".$tot_voti_candidati.") sono superiori al doppio dei voti (".intVal($risultati['voti_lista'][$id_lista]).") della lista di appartenenza.",false);
            return false;
        }

        if($tot_voti_candidati > 2*($votanti -$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le preferenze totali non possono superare il doppio dei voti validi.",false);
            return false;
        }

        foreach($candidati as $idCandidato=>$curCandidato)
        {
            
            if(isset($candidati[$_REQUEST['id_candidato']]) && $_REQUEST['voti']>=0)
            {
                //$candidato=$candidati[$_REQUEST['id_candidato']]->GetProps();
                $candidato=array();
    
                if(is_array($candidato))
                {
                    $candidato['voti']=intVal(str_replace(".","",$_REQUEST['voti']));
                    $voti_candidato[$_REQUEST['id_candidato']]=$candidato;
                }
            }
        }

        $risultati['voti_candidato']=$voti_candidato;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti preferenze - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento delle preferenze.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati preferenze
    public function Task_Update_OC_ComuneRisultatiPreferenzeMulti($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];
        if(isset($risultati['voti_contestati_na_liste']) && $risultati['voti_contestati_na_liste']>0) $voti_non_validi+=$risultati['voti_contestati_na_liste'];
        if(isset($risultati['voti_solo_presidente']) && $risultati['voti_solo_presidente']>0) $voti_non_validi+=$risultati['voti_solo_presidente'];

        if($votanti==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti votanti.",false);
            return false;
        }

        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        if(sizeof($candidati)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti candidati.",false);
            return false;
        }

        $voti_candidato=$risultati['voti_candidato'];
        if(!is_array($voti_candidato)) $voti_candidato=array();

        $tot_voti_candidato=0;
        $id_lista=0;
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            if(isset($_REQUEST['candidato_'.$idCandidato]))
            {
                //$dati_candidato=$curCandidato->GetProps();
                $dati_candidato=array();
                $dati_candidato['voti']=intVal(str_replace(".","",$_REQUEST['candidato_'.$idCandidato]));
                $voti_candidato[$idCandidato]=$dati_candidato;
                $tot_voti_candidato+=intVal(str_replace(".","",$_REQUEST['candidato_'.$idCandidato]));

                if(intVal($_REQUEST['candidato_'.$idCandidato]) > $risultati['voti_lista'][$candidati[$idCandidato]->GetProp('id_lista')])
                {
                    $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                    $task->SetError("I voti (".$_REQUEST['candidato_'.$idCandidato].") del candidato ".$candidati[$idCandidato]->GetProp('nome')." ".$candidati[$idCandidato]->GetProp('cognome')." sono superiori ai voti (".intVal($risultati['voti_lista'][$candidati[$idCandidato]->GetProp('id_lista')]).") della lista (".$candidati[$idCandidato]->GetProp('lista').") di appartenenza.",false);
                    return false;
                }
                if($id_lista==0) $id_lista=$curCandidato->GetProp("id_lista");
            }
        }

        if($id_lista > 0 && $tot_voti_candidato > (2*$risultati['voti_lista'][$id_lista]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti ai candidati (".$tot_voti_candidato.") sono superiori al doppio dei voti (".intVal($risultati['voti_lista'][$id_lista]).") della lista di appartenenza.",false);
            return false;
        }

        if($tot_voti_candidato > 2*($votanti -$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le preferenze totali non possono superare il doppio dei voti validi.",false);
            return false;
        }

        $risultati['voti_candidato']=$voti_candidato;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati voti preferenze multi - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento delle preferenze.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento risultati generali
    public function Task_Update_OC_ComuneRisultatiGenerali($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        //controlli
        if(!isset($_REQUEST['sezioni_scrutinate']) || $_REQUEST['sezioni_scrutinate']<=0 || $_REQUEST['sezioni_scrutinate'] =="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni scrutinate devono essere un numero maggiore di zero.",false);
            return false;
        }

        if(isset($_REQUEST['sezioni_scrutinate']) && $_REQUEST['sezioni_scrutinate']>$comune->GetProp('sezioni'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni scrutinate non possono superare il numero di sezioni del comune.",false);
            return false;
        }
        
        if(!isset($_REQUEST['votanti_m']) || !isset($_REQUEST['votanti_f']) || !isset($_REQUEST['votanti_tot']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre specificare il numero di votanti maschi, femmine e il totale.",false);
            return false;
        }

        if(intVal($_REQUEST['votanti_m'])+intVal($_REQUEST['votanti_f']) != intVal($_REQUEST['votanti_tot']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La somma dei votantio maschi e femmine non corrisponde al totale votanti indicato.",false);
            return false;
        }
        
        $elettori=intVal($comune->GetProp('elettori_m'))+intVal($comune->GetProp('elettori_f'));

        $votanti=0;
        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>0) $votanti+=intVal(str_replace(".","",$_REQUEST['votanti_m']));        
        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>0) $votanti+=intVal(str_replace(".","",$_REQUEST['votanti_f']));
        
        if($votanti>$elettori)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti non possono superare il numero di elettori.",false);
            return false;
        }

        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>$comune->GetProp('elettori_m'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti maschi non possono superare il numero di elettori maschi.",false);
            return false;
        }

        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>$comune->GetProp('elettori_f'))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le votanti femmine non possono superare il numero di elettrici femmine.",false);
            return false;
        }

        $voti_non_validi=0;
        if(isset($_REQUEST['schede_bianche']) && $_REQUEST['schede_bianche']>0) $voti_non_validi+=$_REQUEST['schede_bianche'];
        if(isset($_REQUEST['schede_nulle']) && $_REQUEST['schede_nulle']>0) $voti_non_validi+=$_REQUEST['schede_nulle'];
        if(isset($_REQUEST['schede_voti_nulli']) && $_REQUEST['schede_voti_nulli']>0) $voti_non_validi+=$_REQUEST['schede_voti_nulli'];
    
        if($voti_non_validi>$votanti)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il numero di voti non validi (schede bianche+schede nulle+schede contestate+voti nulli) non può superare il numero dei votanti.",false);
            return false;
        }

        $risultati=$comune->GetRisultati(true);
        if(!is_array($risultati)) $risultati=array();
        if(isset($_REQUEST['sezioni_scrutinate']) && $_REQUEST['sezioni_scrutinate']>=0) $risultati['sezioni_scrutinate']=intVal($_REQUEST['sezioni_scrutinate']);
        if(isset($_REQUEST['votanti_m']) && $_REQUEST['votanti_m']>=0) $risultati['votanti_m']=intVal(str_replace(".","",$_REQUEST['votanti_m']));
        if(isset($_REQUEST['votanti_f']) && $_REQUEST['votanti_f']>=0) $risultati['votanti_f']=intVal(str_replace(".","",$_REQUEST['votanti_f']));
        if(isset($_REQUEST['schede_bianche']) && $_REQUEST['schede_bianche']>=0) $risultati['schede_bianche']=intVal($_REQUEST['schede_bianche']);
        if(isset($_REQUEST['schede_nulle']) && $_REQUEST['schede_nulle']>=0) $risultati['schede_nulle']=intVal($_REQUEST['schede_nulle']);
        if(isset($_REQUEST['voti_contestati_na_pre']) && $_REQUEST['voti_contestati_na_pre']>=0) $risultati['voti_contestati_na_pre']=intVal($_REQUEST['voti_contestati_na_pre']);
        if(isset($_REQUEST['voti_contestati_na_liste']) && $_REQUEST['voti_contestati_na_liste']>=0) $risultati['voti_contestati_na_liste']=intVal($_REQUEST['voti_contestati_na_liste']);
        if(isset($_REQUEST['voti_solo_presidente']) && $_REQUEST['voti_solo_presidente']>=0) $risultati['voti_solo_presidente']=intVal($_REQUEST['voti_solo_presidente']);
        if(isset($_REQUEST['schede_voti_nulli']) && $_REQUEST['schede_voti_nulli']>=0) $risultati['schede_voti_nulli']=intVal($_REQUEST['schede_voti_nulli']);
      
        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento risultati generali - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei risultati generali.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task modifica operatore Comune
    public function Task_Update_OC_ComuneAffluenza($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_AFFLUENZA)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica affluenza non abilitata.",false);
            return false;
        }

        //Verifica
        if(!isset($_REQUEST['giornata']) || trim($_REQUEST['giornata'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare la giornata.",false);
            return false;
        }

        if(!isset($_REQUEST['ore_12']) || $_REQUEST['ore_12'] == "") $_REQUEST['ore_12']=0;
        if(!isset($_REQUEST['ore_19']) || $_REQUEST['ore_19'] == "") $_REQUEST['ore_19']=0;
        if(!isset($_REQUEST['ore_22']) || $_REQUEST['ore_22'] == "") $_REQUEST['ore_22']=0;

        $elettori=intVal($comune->GetProp('elettori_m'))+intVal($comune->GetProp('elettori_f'));
        if($_REQUEST['ore_12'] > $elettori || $_REQUEST['ore_19'] > $elettori || $_REQUEST['ore_22'] > $elettori)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("I votanti non possono superare gli elettori.",false);
            return false;
        }

        if(($_REQUEST['ore_19'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22'] > 0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_22'] && $_REQUEST['ore_22']>0) || ($_REQUEST['ore_12'] > $_REQUEST['ore_19'] && $_REQUEST['ore_19']>0))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("il dato dell'affluenza deve essere progressivo, ove maggiore di 0, (votanti ore 12 <= votanti ore 19 <= votanti ore 22).",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();

        $affluenza=$comune->GetAffluenza(true);
        if(!is_array($affluenza)) $affluenza=array();
        $affluenza[$_REQUEST['giornata']]=array("aggiornamento"=>date("Y-m-d H:i:s"),"ore_12"=>strtolower(trim(str_replace(".","",$_REQUEST['ore_12']))),"ore_19"=>strtolower(trim(str_replace(".","",$_REQUEST['ore_19']))),"ore_22"=>strtolower(trim(str_replace(".","",$_REQUEST['ore_22']))));
        $comune->SetAffluenza($affluenza);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento affluenza per la giornata: ".$_REQUEST['giornata']." - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dell'affluenza.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        //$task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento comunicazioni operatore Comunale
    public function Task_Update_OC_ComuneComunicazioni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica comunicazioni non abilitata.",false);
            return false;
        }       

        $operatore=AA_SierOperatoreComunale::GetInstance();

        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        foreach($giornate as $giornata=>$curValues)
        {
            $comunicazioni[$giornata]=array();
            if(isset($_REQUEST[$giornata."_inizio"]) && $_REQUEST[$giornata."_inizio"]>0) $comunicazioni[$giornata]["inizio"]=1;
            else $comunicazioni[$giornata]["inizio"]=0;

            if(isset($_REQUEST[$giornata."_fine"]) && $_REQUEST[$giornata."_fine"]>0) $comunicazioni[$giornata]["fine"]=1;
            else $comunicazioni[$giornata]["fine"]=0;
        }
        $comune->SetComunicazioni($comunicazioni);

        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento comunicazioni - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento delle comunicazioni.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        //$task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiornamento comunicazioni operatore Comunale
    public function Task_Update_OC_CertificazioneCorpoElettorale($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        } 

        $operatore=AA_SierOperatoreComunale::GetInstance();

        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $comunicazioni=$comune->GetComunicazioni(true);
        $now=date("Y-m-d");
        $_45daysago=date('Y-m-d', strtotime($giornateKeys[0].' '.(-45).' days'));
        $_15daysago=date('Y-m-d', strtotime($giornateKeys[0].' '.(-15).' days'));

        if($now < $_45daysago)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("non è possibile certificare il dato prima delle finestre temporali stabilite.",false);
            return false;
        }

        if($now >= $_15daysago)
        {
            $comunicazioni['corpoelettorale_45']=1;
            $comunicazioni['corpoelettorale_15']=1;
        }

        if($now >= $_45daysago && $now < $_15daysago)
        {
            $comunicazioni['corpoelettorale_45']=1;
            $comunicazioni['corpoelettorale_15']=0;
        }

        $comune->SetComunicazioni($comunicazioni);

        if(!$object->UpdateComune($comune,$this->oUser,"Certificazione corpo elettorale - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento delle informazioni.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("refreshCurSection");
        $task->SetContent("Certificazione notificata con successo.",false);
        return true;
    }

    //Task aggiornamento risultati coalizioni (OC)
    public function Task_Update_OC_ComuneRisultatiCoalizioni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica risultati non abilitata.",false);
            return false;
        }

        //controlli
        $risultati=$comune->GetRisultati(true);

        $votanti=0;
        if(isset($risultati['votanti_m'])) $votanti+=$risultati['votanti_m'];
        if(isset($risultati['votanti_f'])) $votanti+=$risultati['votanti_f'];

        $voti_non_validi=0;
        if(isset($risultati['schede_bianche']) && $risultati['schede_bianche']>0) $voti_non_validi+=$risultati['schede_bianche'];
        if(isset($risultati['schede_nulle']) && $risultati['schede_nulle']>0) $voti_non_validi+=$risultati['schede_nulle'];
        if(isset($risultati['voti_contestati_na_pre']) && $risultati['voti_contestati_na_pre']>0) $voti_non_validi+=$risultati['voti_contestati_na_pre'];
        if(isset($risultati['schede_voti_nulli']) && $risultati['schede_voti_nulli']>0) $voti_non_validi+=$risultati['schede_voti_nulli'];

        $coalizioni=$object->GetCoalizioni();
        if(sizeof($coalizioni)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Non sono presenti candidati Presidente.",false);
            return false;
        }

        $voti_presidente=array();
        $voti_totali=0;
        foreach($coalizioni as $idCoalizione=>$curCoalizione)
        {
            $voti_presidente[$idCoalizione]=0;
            if(isset($_REQUEST[$idCoalizione]) && $_REQUEST[$idCoalizione]>0)
            {
                $voti_presidente[$idCoalizione]=intVal(str_replace(".","",$_REQUEST[$idCoalizione]));
                $voti_totali+=intVal(str_replace(".","",$_REQUEST[$idCoalizione]));
            }
        }

        if($voti_totali!=($votanti-$voti_non_validi))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Il totale dei voti per i candidati Presidente (".$voti_totali.") devono essere uguali al numero numero dei voti validi (".$votanti-$voti_non_validi.").",false);
            return false;
        }
        
        $risultati['voti_presidente']=$voti_presidente;

        $analisi_risultati=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        $comune->SetAnalisiRisultati($analisi_risultati);

        $comune->SetRisultati($risultati);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiornamento voti Presidente - operatore comunale: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento dei voti candidati Presidente.",false);
            return false;
        }

        if(!$object->UpdateComuneFeedRisultati($comune->GetProp('id'),$this->oUser))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento del feed dei risultati.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task aggiunta operatore Comune
    public function Task_AddNewSierComuneOperatore($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        if(!isset($_REQUEST['nome']) || trim($_REQUEST['nome'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il nome dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['cognome']) || trim($_REQUEST['cognome'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il cognome dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['cf']) || trim($_REQUEST['cf'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il cf dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['email']) || trim($_REQUEST['email'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare l'email dell'operatore.",false);
            return false;
        }

        $operatori=$comune->GetOperatori(true);
        if(!is_array($operatori)) $operatori=array();
        $operatori[strtolower(trim($_REQUEST['cf']))]=array("cf"=>strtolower(trim($_REQUEST['cf'])),"email"=>$_REQUEST['email'],"nome"=>$_REQUEST['nome'],"cognome"=>$_REQUEST['cognome'],"lastlogin"=>"","ruolo"=>$_REQUEST['ruolo']);
        $comune->SetOperatori($operatori);
        if(!$object->UpdateComune($comune,$this->oUser,"Aggiunta operatore: ".$_REQUEST['cf']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento degli operatori.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetStatusAction("refreshCurSection");
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task modifica operatore Comune
    public function Task_UpdateSierComuneOperatore($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        if(!isset($_REQUEST['nome']) || trim($_REQUEST['nome'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il nome dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['cognome']) || trim($_REQUEST['cognome'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il cognome dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['cf']) || trim($_REQUEST['cf'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare il cf dell'operatore.",false);
            return false;
        }

        if(!isset($_REQUEST['email']) || trim($_REQUEST['email'])=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre indicare l'email dell'operatore.",false);
            return false;
        }

        $operatori=$comune->GetOperatori(true);
        if(!is_array($operatori)) $operatori=array();
        if(isset($operatori[strtoupper(trim($_REQUEST['cf']))])) unset($operatori[strtoupper(trim($_REQUEST['cf']))]);
        $operatori[strtolower(trim($_REQUEST['cf']))]=array("cf"=>strtolower(trim($_REQUEST['cf'])),"email"=>$_REQUEST['email'],"nome"=>$_REQUEST['nome'],"cognome"=>$_REQUEST['cognome'],"lastlogin"=>$_REQUEST['lastlogin'],"ruolo"=>$_REQUEST['ruolo']);
        
        $comune->SetOperatori($operatori);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica operatore: ".$_REQUEST['cf']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento degli operatori.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task modifica operatore Comune
    public function Task_TrashSierComuneOperatore($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->Getcomune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto: ".$object,false);
            return false;
        }
    
        //Verifica
        $operatori=$comune->GetOperatori(true);
        if(!isset($operatori[strtolower(trim($_REQUEST['cf']))]) && !isset($operatori[strtoupper(trim($_REQUEST['cf']))]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;    
        }

        if(isset($operatori[strtolower(trim($_REQUEST['cf']))])) unset($operatori[strtolower(trim($_REQUEST['cf']))]);
        if(isset($operatori[strtoupper(trim($_REQUEST['cf']))])) unset($operatori[strtoupper(trim($_REQUEST['cf']))]);

        $comune->SetOperatori($operatori);
        if(!$object->UpdateComune($comune,$this->oUser,"Elimina operatore: ".$_REQUEST['cf']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Errore nell'aggiornamento degli operatori.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);
        return true;
    }

    //Task modifica dati generali Comune
    public function Task_UpdateSierComuneDatiGenerali($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(isset($_REQUEST['id_circoscrizione']) && $_REQUEST['id_circoscrizione']>0) $comune->SetProp("id_circoscrizione",$_REQUEST['id_circoscrizione']);
        if(isset($_REQUEST['denominazione']) && $_REQUEST['denominazione'] !="") $comune->SetProp("denominazione",$_REQUEST['denominazione']);
        if(isset($_REQUEST['pec']) && $_REQUEST['pec'] !="") $comune->SetProp("pec",$_REQUEST['pec']);
        if(isset($_REQUEST['indirizzo']) && $_REQUEST['indirizzo'] !="") $comune->SetProp("indirizzo",$_REQUEST['indirizzo']);
        if(isset($_REQUEST['contatti']) && $_REQUEST['contatti'] !="") $comune->SetProp("contatti",$_REQUEST['contatti']);

        if(!$object->UpdateComune($comune,$this->oUser,"Modifica dati generali"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati generali aggiornati con successo.",false);

        return true;
    }

    //Task modifica rendiconti seggi Comune
    public function Task_UpdateSierComuneRendicontiSeggi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(isset($_REQUEST['seggi|competenze|estremi_liquidazione']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $rendiconti['seggi']['competenze']['estremi_liquidazione']=$_REQUEST['seggi|competenze|estremi_liquidazione'];
        }
        if(isset($_REQUEST['seggi|competenze|estremi_pagamento']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $rendiconti['seggi']['competenze']['estremi_pagamento']=$_REQUEST['seggi|competenze|estremi_pagamento'];
        }
        if(isset($_REQUEST['seggi|competenze|importo']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $num=$_REQUEST['seggi|competenze|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['seggi']['competenze']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        if(isset($_REQUEST['seggi|competenze|estremi_liquidazione']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['estremi_liquidazione']=$_REQUEST['seggi|missioni|estremi_liquidazione'];
        }
        if(isset($_REQUEST['seggi|missioni|estremi_pagamento']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['estremi_pagamento']=$_REQUEST['seggi|missioni|estremi_pagamento'];
        }
        if(isset($_REQUEST['seggi|missioni|km']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['km']=intVal($_REQUEST['seggi|missioni|km']);
        }
        if(isset($_REQUEST['seggi|missioni|componenti']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['componenti']=intVal($_REQUEST['seggi|missioni|componenti']);
        }
        if(isset($_REQUEST['seggi|missioni|importo']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $num=$_REQUEST['seggi|missioni|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['seggi']['missioni']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti competenze seggi"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica rendiconti seggi Comune
    public function Task_Update_OC_ComuneRendicontiSeggi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(isset($_REQUEST['seggi|competenze|estremi_liquidazione']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $rendiconti['seggi']['competenze']['estremi_liquidazione']=$_REQUEST['seggi|competenze|estremi_liquidazione'];
        }
        if(isset($_REQUEST['seggi|competenze|estremi_pagamento']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $rendiconti['seggi']['competenze']['estremi_pagamento']=$_REQUEST['seggi|competenze|estremi_pagamento'];
        }
        if(isset($_REQUEST['seggi|competenze|importo']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['competenze'])) $rendiconti['seggi']['competenze']=array();
            $num=$_REQUEST['seggi|competenze|importo'];

                $num=str_replace(".","",trim($num));
                $num=str_replace(",",".",trim($num));
            
            $rendiconti['seggi']['competenze']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        if(isset($_REQUEST['seggi|competenze|estremi_liquidazione']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['estremi_liquidazione']=$_REQUEST['seggi|missioni|estremi_liquidazione'];
        }
        if(isset($_REQUEST['seggi|missioni|estremi_pagamento']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['estremi_pagamento']=$_REQUEST['seggi|missioni|estremi_pagamento'];
        }
        if(isset($_REQUEST['seggi|missioni|km']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['km']=intVal($_REQUEST['seggi|missioni|km']);
        }
        if(isset($_REQUEST['seggi|missioni|componenti']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $rendiconti['seggi']['missioni']['componenti']=intVal($_REQUEST['seggi|missioni|componenti']);
        }
        if(isset($_REQUEST['seggi|missioni|importo']))
        {
            if(!isset($rendiconti['seggi'])) $rendiconti['seggi']=array();
            if(!isset($rendiconti['seggi']['missioni'])) $rendiconti['seggi']['missioni']=array();
            $num=$_REQUEST['seggi|missioni|importo'];

                $num=str_replace(".","",trim($num));
                $num=str_replace(",",".",trim($num));
            
            $rendiconti['seggi']['missioni']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti competenze seggi - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica rendiconti contabile RAS Comune
    public function Task_UpdateSierComuneRendicontiRas($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        if(isset($_REQUEST['ras|periodo_dal']) && $_REQUEST['ras|periodo_dal']>=$_REQUEST['ras|periodo_al'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di inizio deve essere successiva a quella di fine.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        $cp=$object->GetControlPannel();
        if(!isset($rendiconti['ras'])) $rendiconti['ras']=array();
        if(isset($_REQUEST['ras|anticipo']))
        {
            $num=$_REQUEST['ras|anticipo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            
            $rendiconti['ras']['anticipo']=AA_Utils::number_format($num,2,'.','');
        }

        if(isset($_REQUEST['ras|estremi_rendiconto']))
        {   
            $rendiconti['ras']['estremi_rendiconto']=$_REQUEST['ras|estremi_rendiconto'];
        }

        //verifica importo
        $totale=0;
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $totale+=$rendiconti['seggi']['competenze']['importo'];
        }
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $totale+=$rendiconti['seggi']['missioni']['importo'];
        }
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $totale+=$rendiconti['comune']['straordinario']['importo'];
        }
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $totale+=$rendiconti['comune']['missioni']['importo'];
        }
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $totale+=$rendiconti['comune']['oneri']['importo'];
        }
        if(isset($rendiconti['personale_det']))
        {
           foreach($rendiconti['personale_det'] as $key=>$val)
           {
                $totale=$val['importo']+$val['oneri_importo'];
           }
        }
        if(isset($rendiconti['buoni']['importo']))
        {
            $totale+=$rendiconti['buoni']['importo'];
        }
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $key=>$val)
            {
                $totale+=floatVal($val['importo']);
            }
        }

        if(isset($_REQUEST['ras|importo']))
        {
            $num=$_REQUEST['ras|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['ras']['importo']=AA_Utils::number_format($num,2,'.','');
        }

        if(isset($_REQUEST['ras|caricamento_allegati']))
        {
           if($_REQUEST['ras|caricamento_allegati']!=0) $rendiconti['ras']['caricamento_allegati']=1;
           else $rendiconti['ras']['caricamento_allegati']=0;
        }
        else
        {
            $rendiconti['ras']['caricamento_allegati']=0;
        }

        if($rendiconti['ras']['importo'] > $totale)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'importo ammesso a rimborso non puo' essere superiore alle spese presentate.",false);
            return false;
        }

        $update_cp=false;
        if(isset($_REQUEST['ras|periodo_dal']))
        {
            if(!isset($cp['rendiconti'])) $cp['rendiconti']=array();
            $cp['rendiconti']['periodo_dal']=$_REQUEST['ras|periodo_dal'];
            $update_cp=true;
        }
        if(isset($_REQUEST['ras|periodo_al']))
        {
            if(!isset($cp['rendiconti'])) $cp['rendiconti']=array();
            $cp['rendiconti']['periodo_al']=$_REQUEST['ras|periodo_al'];
            $update_cp=true;
        }
        
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti contabile RAS"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        if($update_cp)
        {
            $object->SetControlPannel($cp);
            if(!$object->Update($this->oUser,true,"Modifica periodo utile contabile RAS"))
            {
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError(AA_Log::$lastErrorLog,false);
                return false;            
            }
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica rendiconti contabile RAS Comune
    public function Task_UpdateSierComuneRendicontiRasLiquidazioni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        if($_REQUEST['id_liquidazione']=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo liquidazione non impostato",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['ras']['liquidazioni'])) $rendiconti['ras']['liquidazioni']=array();
        $totale=0;
        foreach($rendiconti['ras']['liquidazioni'] as $key=>$val)
        {
            if($key==$_REQUEST['id_liquidazione'])
            {
                $num=str_replace(",",".",str_replace(".","",$_REQUEST['importo']));
                $totale+=$num;
            }
            else $totale+=floatVal($val['importo']);
        }
        if(!isset($rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]))
        {
            $totale+=str_replace(",",".",str_replace(".","",$_REQUEST['importo']));
        }

        //AA_Log::Log(__METHOD__." - totale:".$totale." - resto:".($rendiconti['ras']['importo']-$rendiconti['ras']['anticipo']),100);
        if($totale > ($rendiconti['ras']['importo']-$rendiconti['ras']['anticipo']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La somma delle liquidazioni + l'anticipo non puo' superare l'importo ammesso a rimborso.",false);
            return false;
        }

        $rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]=array("data_prov"=>$_REQUEST['data_prov'],"estremi"=>$_REQUEST['estremi'],"importo"=>AA_Utils::number_format(str_replace(",",".",str_replace(".","",$_REQUEST['importo'])),2,"."));
        
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti contabile RAS - liquidazione id: ".$_REQUEST['id_liquidazione']." - data: ".$_REQUEST['data']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Template pdf rendicontazione
    protected function Template_GetSierComuneRendicontiExportRasPdf($object=null,$comune=null,$bToBrowser = true, $title = "Rendicontazione spese elettorali", $index=true, $subTitle="")
    {
        include_once "pdf_lib.php";

        if (!($object instanceof AA_Sier)) return "";
        if (!($comune instanceof AA_SierComune)) return "";

        $rendiconti=$comune->GetRendiconti(true);
        $serial=$object->BuildRendicontiSerial($rendiconti);

        $numPagineRendicontiAssunzioni=1;
        if(isset($rendiconti['personale_det']) && sizeof($rendiconti['personale_det'])>2) 
        {
            $numPagineRendicontiAssunzioni=intVal(sizeof($rendiconti['personale_det'])/2);
            if(sizeof($rendiconti['personale_det'])%2>0) $numPagineRendicontiAssunzioni++;
        }
        $numPagineRendicontiServizi=1;
        if(isset($rendiconti['servizi']) && sizeof($rendiconti['servizi'])>3) 
        {
            $numPagineRendicontiServizi=intVal(sizeof($rendiconti['servizi'])/3);
            if(sizeof($rendiconti['servizi'])%3>0) $numPagineRendicontiServizi++;
        }
        $count = 5+$numPagineRendicontiAssunzioni+$numPagineRendicontiServizi;

        $rowsForPage=1;
        $vociIndice=array(
            0=>"Prospetto riassuntivo generale spese elettorali",
            1=>"Competenze corrisposte ai componenti dei seggi (comprensiva di missioni)",
            2=>"Lavoro straordinario e missioni dei dipendenti (compresi oneri)",
            4=>"Assunzione di personale a tempo determinato",
            (4+$numPagineRendicontiAssunzioni)=>"Buoni pasto dei dipendenti addetti al servizio elettorale",
            (4+$numPagineRendicontiAssunzioni+1)=>"Spese per beni e servizi"
        );

        //nome file
        $filename = "rendicontazione";
        $filename .= "-" . date("YmdHis");
        $doc = new AA_PDF_RAS_TEMPLATE_A4_PORTRAIT($filename);

        $doc->SetLogoImage("");
        $doc->SetHeaderHeight("25mm");
        $doc->SetDocumentStyle("font-family: sans-serif; font-size: 3mm;");
        $doc->SetPageCorpoStyle("display: flex; flex-direction: column; justify-content: space-between; padding:0;");
        $curRow = 0;
        $rowForPage = $rowsForPage;
        $lastRow = $rowForPage - 1;
        $curPage = null;
        $curPage_row = "";
        $curNumPage = 0;
        $maxItemHeight=intval(100/$rowsForPage);
        //$columns_width=array("titolare"=>"10%","incarico"=>"8%","atto"=>"10%","struttura"=>"28%","curriculum"=>"10%","art20"=>"12%","altri_incarichi"=>"10%","1-ter"=>"10%","emolumenti"=>"10%");
        //$columns_width=array("dal"=>"10%","al"=>"10%","inconf"=>"10%","incomp"=>"10%","anno"=>"25%","titolare"=>"50%","tipo_incarico"=>"10%","atto_nomina"=>"10%","struttura"=>"40%","curriculum"=>"25%","altri_incarichi"=>"25%","1-ter"=>"25%","emolumenti"=>"10%");
        $rowContentWidth = "width: 99.8%;";

        if ($count > 1) 
        {
            //pagina di intestazione (senza titolo)
            $curPage = $doc->AddPage();
            $curPage->SetCorpoStyle("display: flex; flex-direction: column; justify-content: center; align-items: center; padding:0;");
            $curPage->SetFooterStyle("border-top:.2mm solid black");
            $curPage->ShowPageNumber(false);

            //Intestazione
            $intestazione = "<div style='width: 100%; text-align: center; font-size: 28; font-weight: bold; margin-bottom: 2em;'>Comune di ".$comune->GetProp('denominazione')."</div>";
            $intestazione .= "<div style='width: 100%; text-align: center; font-size: 24; font-weight: bold;  margin-bottom: 2em;'>".$object->GetName()."</div>";

            $intestazione .= "<div style='width: 100%; text-align: center; font-size: 18; font-weight: normal'>$title</div>";
            if($subTitle !="")
            {
                $intestazione .= "<div style='width: 100%; text-align: center; font-weight: normal; margin-top: 1em;'>".$subTitle."</div>";
            }
            $intestazione .= "<div style='width: 100%; text-align: center; font-size: x-small; font-weight: normal;margin-top: 3em;'>documento generato il " . date("Y-m-d")." alle ".date("H:i") . "</div>";
            
            $curPage->EnableFooter(true);
            $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>seriale: ".$serial." </div>");
            $curPage->SetContent($intestazione);
            $curNumPage++;

            $doc->SetTitle("<div style='display:flex;justify-content:space-around;align-items:center;flex-direction:column; height:70%;width:100%;padding-top: 1em'><span style='font-size:18px'>Comune di ".$comune->GetProp("denominazione")."</span><hr style='width:25%'><div><span>".$title."</span><br><span style='font-weight:normal; font-size:smaller'>" . $object->GetName()."</span></div></div>");
            if($index)
            {
                //pagine indice (50 nominativi per pagina)
                $indiceNumVociPerPagina = 20;
                for ($i = 0; $i < $count / $indiceNumVociPerPagina; $i++) 
                {
                    $curPage = $doc->AddPage();
                    $curPage->SetCorpoStyle("display: flex; flex-direction: column; padding:0;");
                    $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>seriale: ".$serial." - documento generato il " . date("Y-m-d")." alle ".date("H:i")."</div>");
                    $curNumPage++;
                }
            }
            $curPage=null;
            #---------------------------------------
        }

        //Imposta il titolo per le pagine successive
        
        //$doc->SetTitle("$subTitle - report generato il " . date("Y-m-d"));

        $indice = array();
        $lastPage = $count / $rowForPage + $curNumPage;

        //Rendering pagine
        for($i=0;$i<(5+$numPagineRendicontiAssunzioni+$numPagineRendicontiServizi);$i++)
        {
            //inizia una nuova pagina (intestazione)
            if ($curRow == $rowForPage) $curRow = 0;
            if ($curRow == 0) {
                $border = "";
                if ($curPage != null) 
                {
                    if($curPage_row !="")
                    {
                        $curPage->SetContent($curPage_row);
                        $curPage = $doc->AddPage();
                        $curNumPage++;
                        $curPage_row="";
                    }
                }
                else 
                {
                    $curPage_row="";
                    $curPage = $doc->AddPage();
                    $curNumPage++;
                }
                
                $curPage->SetCorpoStyle("display: flex; flex-direction: column;  justify-content: flex-start; padding:0;");
                $curPage_row = "";
            }

            if($i<3) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==4) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==(4+$numPagineRendicontiAssunzioni)) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];
            if($i==(4+$numPagineRendicontiAssunzioni+1)) $indice[$i] = $curNumPage . "|" . $vociIndice[$i];

            $curPage_row .= "<div id='".$i."' style='display:flex;  flex-direction: column; width: 99.8%; height:100%; align-items: center; text-align: center; padding: 0mm; margin-top: 2mm; min-height: 9mm; max-height:".$maxItemHeight."%; overflow: hidden;'>";

            //---------------------------------------- Riepilogo ----------------------------------------------
            if($i==0)
            {
                $curPage_row.= "<div style='width: 100%; font-weight:bold; font-size:18px'>Prospetto riassuntivo generale spese elettorali</div>";
                $curPage_row.=$this->Template_RendicontiReportProspettoRiassuntivo($object,$comune,$rendiconti,true);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- seggi ----------------------------------------------
            if($i==1)
            {
                $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Competenze corrisposte ai componenti dei seggi (comprensiva di missioni)</div>";
                $curPage_row.=$this->Template_RendicontiReportSeggi($object,$comune,$rendiconti,false);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- Straordinario ----------------------------------------------
            if($i==2)
            {
                $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Lavoro straordinario e missioni dei dipendenti (compresi oneri)</div>";
                $curPage_row.=$this->Template_RendicontiReportStraordinario($object,$comune,$rendiconti,false);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- Straordinario ----------------------------------------------
            if($i==3)
            {
                $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Lavoro straordinario e missioni dei dipendenti (compresi oneri)</div>";
                $curPage_row.=$this->Template_RendicontiReportStraordinarioAttestazioni($object,$comune,$rendiconti,false);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- Assunzione personale a tempo determinato ----------------------------------------------
            if($i>=4 && $i < (4+$numPagineRendicontiAssunzioni))
            {
            $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Assunzione di personale a tempo determinato</div>";
            $curPage_row.=$this->Template_RendicontiReportAssunzioni($object,$comune,$rendiconti,false, $i-4);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- Buoni ----------------------------------------------
            if($i == (4+$numPagineRendicontiAssunzioni))
            {
            $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Buoni pasto dei dipendenti addetti al servizio elettorale</div>";
            $curPage_row.=$this->Template_RendicontiReportBuoni($object,$comune,$rendiconti,false);
            }
            //-------------------------------------------------------------------------------------------------

            //---------------------------------------- Servizi ----------------------------------------------
            if($i >= (4+$numPagineRendicontiAssunzioni+1))
            {
            $curPage_row .= "<div style='width: 100%; font-weight:bold; font-size:18px'>Spese per beni e servizi</div>";
            $curPage_row.=$this->Template_RendicontiReportServizi($object,$comune,$rendiconti,false,$i-4-$numPagineRendicontiAssunzioni-1);
            }
            //-------------------------------------------------------------------------------------------------

            $curPage_row .= "</div>";
            $curPage->SetFooterContent("<div style='width: 100%; text-align: center; font-weight: normal;font-size:smaller'>seriale: ".$serial." - documento generato il " . date("Y-m-d")." alle ".date("H:i")."</div>");
            $curRow++;
        }
        if ($curPage != null) $curPage->SetContent($curPage_row);
        #-----------------------------------------

        if ($count > 1 && $index) 
        {
            //Aggiornamento indice
            $curNumPage = 1;
            $curPage = $doc->GetPage($curNumPage);
            $vociCount = 0;
            $curRow = 0;
            $bgColor = "";
            $curPage_row = "";

            foreach ($indice as $id => $data) 
            {
                if ($curNumPage != (int)($vociCount / $indiceNumVociPerPagina) + 1) {
                    $curPage->SetContent($curPage_row);
                    $curNumPage = (int)($vociCount / $indiceNumVociPerPagina) + 1;
                    $curPage = $doc->GetPage($curNumPage);
                    $curRow = 0;
                    $bgColor = "";
                }

                //$indexBgColor = "#f5f5f5";
                $indexBgColor = "#fff";
                if ($curPage instanceof AA_PDF_Page) 
                {
                    //Intestazione
                    if ($curRow == 0) $curPage_row = "<div style='width:100%;text-align: center; font-size: larger; font-weight: bold; border-bottom: 1px solid #dedede; margin-bottom: .5em; margin-top: .3em;'>Indice</div>";
                    if ($curRow % 2) $bgColor = "background-color:$indexBgColor;";
                    else $bgColor = "";
                    $curPage_row .= "<div style='display:flex; " . $rowContentWidth . " align-items: center; justify-content: space-between; font-size:larger; padding: .3mm; min-height: 9mm;" . $bgColor . "'>";
                    $dati = explode("|", $data);
                    $curPage_row .= "<div style='width:90%;text-align: left;padding-left: 10mm'><a style='text-decoration: none' href='#" . $id . "'>" . $dati['1'] . "</a></div><div style='width:9%;text-align: right;padding-right: 10mm'><a style='text-decoration: none' href='#" . $id . "'>pag. " . $dati[0] . "</a></div>";
                    $curPage_row .= "</div>";

                    //ultima voce
                    if ($vociCount == (sizeof($indice) - 1)) 
                    {
                        $curPage->SetContent($curPage_row);
                    }
                    $curRow++;
                }

                $vociCount++;
            }
        }

        if ($bToBrowser) $doc->Render();
        else {
            $doc->Render(false);
            return $doc->GetFilePath();
        }
    }

    public function Template_RendicontiReportProspettoRiassuntivo($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");
        $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("70", "30"));
        $template->SetCellPadding("10px");
        $template->SetHeaderLabels(array("Spese presentate a rimborso","Importo totale"));
        $curRow=1;

        $totale=0;
        $value=0;
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $value+=$rendiconti['seggi']['competenze']['importo'];
            $totale+=$rendiconti['seggi']['competenze']['importo'];
        }
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $value+=$rendiconti['seggi']['missioni']['importo'];
            $totale+=$rendiconti['seggi']['missioni']['importo'];
        }
        $template->SetCellText($curRow,0,"Competenze corrisposte ai componenti dei seggi (comprensiva di missioni)", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($value,2,",","."), "right");
        $curRow++;

        $value=0;
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $value+=$rendiconti['comune']['straordinario']['importo'];
            $totale+=$rendiconti['comune']['straordinario']['importo'];
        }
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $value+=$rendiconti['comune']['missioni']['importo'];
            $totale+=$rendiconti['comune']['missioni']['importo'];
        }
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $value+=$rendiconti['comune']['oneri']['importo'];
            $totale+=$rendiconti['comune']['oneri']['importo'];
        }
        $template->SetCellText($curRow,0,"Lavoro straordinario e missioni dei dipendenti (compresi oneri)", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($value,2,",","."), "right");
        $curRow++;

        $value=0;
        if(isset($rendiconti['personale_det']))
        {
            foreach($rendiconti['personale_det'] as $key=>$val)
            {
                    $value+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
                    $totale+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
            }
        }
        $template->SetCellText($curRow,0,"Assunzione di personale a tempo determinato", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($value,2,",","."), "right");
        $curRow++;
        $value=0;
        if(isset($rendiconti['buoni']['importo']))
        {
            $value+=$rendiconti['buoni']['importo'];
            $totale+=$rendiconti['buoni']['importo'];
        }
        $template->SetCellText($curRow,0,"Buoni pasto dei dipendenti addetti al servizio elettorale", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($value,2,",","."), "right");
        $curRow++;

        $software=0;
        $trasporto=0;
        $materiale=0;
        $propaganda=0;
        $collegamenti=0;
        $altro=0;
        $spese_postali=0;
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $key=>$val)
            {
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_PROPAGANDA_ELETTORALE) $propaganda+=floatVal($val['importo']);              
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_COLLEGAMENTI) $collegamenti+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_ALTRO) $altro+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_MATERIALE_ALLESTIMENTO) $materiale+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_SPESE_POSTALI) $spese_postali+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_STAMPATI_SOFTWARE) $software+=floatVal($val['importo']);
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_TRASPORTO_ARREDAMENTO) $trasporto+=floatVal($val['importo']);
                $totale+=floatVal($val['importo']);
            }
        }
        $template->SetCellText($curRow,0,"Stampati o software sostitutivi non forniti direttamente dalla Regione o dallo Stato", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($software,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Trasporto del materiale elettorale e degli arredi dei seggi - Allestimento dei seggi", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($trasporto,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Acquisto di materiale di consumo per l’allestimento dei seggi", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($materiale,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Spese per la propaganda elettorale", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($propaganda,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Collegamenti telefonici straordinari ai fini della raccolta dei dati elettorali", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($collegamenti,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Spese postali e telegrafiche", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($spese_postali,2,",","."), "right");
        $curRow++;
        $template->SetCellText($curRow,0,"Altre spese indispensabili per gli adempimenti elettorali", "left");
        $template->SetCellText($curRow,1,AA_Utils::number_format($altro,2,",","."), "right");
        $curRow++;
      
        $anticipo=0;
        $totale_saldare=0;
        $rimborso_concesso=0;
        $liquidato=0;
        if(isset($rendiconti['ras']['importo']))
        {
            $rimborso_concesso=$rendiconti['ras']['importo'];
        }
        if(isset($rendiconti['ras']['anticipo']))
        {
            $anticipo=$rendiconti['ras']['anticipo'];
        }
        if(isset($rendiconti['ras']['liquidazioni']))
        {
            foreach($rendiconti['ras']['liquidazioni'] as $val)
            {
                $liquidato+=floatVal($val['importo']);
            }
        }
        $totale_saldare=$rimborso_concesso-$anticipo-$liquidato;

        $totale_row=new AA_XML_Div_Element(uniqid(),$layout);
        $totale_row->SetStyle("display:flex; width: 96.8%; font-weight:bold; font-size: larger;text-align:right; border:1px solid gray; padding: 10px; background-color: #ebf5fb");
        $totale_row->SetText("<div style='width:70%; background-color: #ebf5fb'>TOTALE SPESE PRESENTATE A RIMBORSO:</div><div style='width:30%'>".AA_Utils::number_format($totale,2,",",".")."</div>");

        $val=new AA_XML_Div_Element(uniqid(),$layout);
        $val->SetStyle("margin-top: 1em;text-align: justify");
        $val->SetText("<ul>Si attesta che:<li>tutte le spese sono congrue, indispensabili e pertinenti agli adempimenti organizzativi inerenti le ".$object->GetName().";</li><li>tutte le spese sono correttamente annotate nelle scritture contabili del Comune e gli originali sono ivi conservati;</li><li>tutte le spese sono state effettuate nel rispetto della normativa concernente la stipulazione dei contratti;</li><li>tutte le tipologie di spesa sono comprese fra quelle previste nelle leggi e circolari in materia;</li><li>non vi sono altre spese per le quali chiedere rimborso;</li></ul>");

        $val=new AA_XML_Div_Element(uniqid(),$layout);
        $val->SetStyle("margin-top: 5em;text-align: left; font-weight:bold");
        $val->SetText("La presente versione del rendiconto annulla e sostituisce le precedenti.");

        $val=new AA_XML_Div_Element(uniqid(),$layout);
        $val->SetStyle("display:flex; justify-content: space-around; font-weight:bold; align-items: end; width:99.8%; height:15%;");
        $val->SetText("<div>Il Responsabile<br>del Servizio elettorale<br><br><br>_______________________</div><div>Il Responsabile<br>del Servizio finanziario<br><br><br>_______________________</div>");

        return $layout->__toString();
    }

    public function Template_RendicontiReportSeggi($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Competenze componenti dei seggi</span>"));
        $curRow=1;

        $rendiconti=$comune->GetRendiconti(true);

        //estremi liquidazione
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_liquidazione'])) $value=$rendiconti['seggi']['competenze']['estremi_liquidazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di liquidazione:",$value),$row_template));
        $curRow++;
        
        //estremi pagamento
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_pagamento'])) $value=$rendiconti['seggi']['competenze']['estremi_pagamento'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del mandato di pagamento:",$value),$row_template));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['importo'])) $value=AA_Utils::number_format($rendiconti['seggi']['competenze']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        $template = new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Trattamento di missione presidenti di seggio</span>"));
        $curRow=1;

         //estremi liquidazione
         $value="n.d.";
         if(isset($rendiconti['seggi']['missioni']['estremi_liquidazione'])) $value=$rendiconti['seggi']['missioni']['estremi_liquidazione'];
         $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di liquidazione:",$value),$row_template));
         $curRow++;

        //estremi pagamento
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['estremi_pagamento'])) $value=$rendiconti['seggi']['missioni']['estremi_pagamento'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del mandato di pagamento:",$value),$row_template));
        $curRow++;

        //km e componenti
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['seggi']['missioni']['km'])) $value=$rendiconti['seggi']['missioni']['km'];
        if(isset($rendiconti['seggi']['missioni']['componenti'])) $value_2=$rendiconti['seggi']['missioni']['componenti'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("n. missioni:",$value_2,"Km totali percorsi:",$value),$row_template_2col));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['importo'])) $value=AA_Utils::number_format($rendiconti['seggi']['missioni']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        $val="<ul>Si attesta:<li>l'effettiva partecipazione dei componenti dei seggi per tutta la durata delle operazioni elettorali e l'applicazione ad essi degli onorari indicati nella circolare dell'Amministrazione regionale in materia di rendicontazione delle spese sostenute dai Comuni.</li></ul>";
        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $attestazione->SetStyle("text-align:justify;");
        $attestazione->SetText($val);

        return $layout->__toString();
    }

    public function Template_RendicontiReportBuoni($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("10px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Competenze</span>"));
        $curRow=1;

        $rendiconti=$comune->GetRendiconti(true);

        //estremi liquidazione
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_liquidazione'])) $value=$rendiconti['buoni']['estremi_liquidazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di liquidazione:",$value),$row_template));
        $curRow++;
        
        //estremi pagamento
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_pagamento'])) $value=$rendiconti['buoni']['estremi_pagamento'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del mandato di pagamento:",$value),$row_template));
        $curRow++;

        //periodo
        $value="n.d.";
        if(isset($rendiconti['buoni']['periodo']))
        {
            $periodo=explode("|",$rendiconti['buoni']['periodo']);
            $value="dal ".$periodo[0];
            $value.=" al ".$periodo[1];
        } 
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Periodo di utilizzo:",$value),$row_template));
        $curRow++;

        //km e componenti
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['buoni']['erogati'])) $value_2=$rendiconti['buoni']['erogati'];
        if(isset($rendiconti['buoni']['dipendenti'])) $value=$rendiconti['buoni']['dipendenti'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Componenti che hanno usufruito dei buoni:",$value,"n. di buoni erogati:",$value_2),$row_template_2col));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['buoni']['importo'])) $value=AA_Utils::number_format($rendiconti['buoni']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        //note
        $value="";
        if(isset($rendiconti['buoni']['note'])) $value=$rendiconti['buoni']['note'];
        if($value!="")
        {
            $note=new AA_XML_Div_Element(uniqid(),$layout);
            $note->SetStyle("text-align:left");
            $note->SetText(str_replace(array("#label#","#value#"),array("Note:",$value),$row_template));
        }

        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $attestazione->SetStyle("text-align:left;margin-top:5em");
        $val="<ul>Si attesta che:<li>i buoni pasto sono stati erogati ai dipendenti per le sole giornate di lavoro straordinario elettorale effettuate e nel rispetto delle condizioni e limiti previsti nel C.C.N.L. vigente nel periodo considerato;</li><li>l'Amministrazione comunale aveva già attivato il servizio per l'erogazione dei buoni pasto ai propri dipendenti.</li></ul>";
        $attestazione->SetText($val);

        return $layout->__toString();
    }

    public function Template_RendicontiReportStraordinario($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("5px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Lavoro straordinario</span>"));
        $curRow=1;

        $rendiconti=$comune->GetRendiconti(true);

        //estremi autorizzazione
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_autorizzazione'])) $value=$rendiconti['comune']['straordinario']['estremi_autorizzazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di autorizzazione:",$value),$row_template));
        $curRow++;

        //estremi liquidazione
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_liquidazione'])) $value=$rendiconti['comune']['straordinario']['estremi_liquidazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di liquidazione:",$value),$row_template));
        $curRow++;
        
        //estremi pagamento
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_pagamento'])) $value=$rendiconti['comune']['straordinario']['estremi_pagamento'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del mandato di pagamento:",$value),$row_template));
        $curRow++;

        //periodo
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['comune']['straordinario']['periodo_max']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_max']);
            $value="dal ".$periodo[0];
            $value.=" al ".$periodo[1];
        }
        if(isset($rendiconti['comune']['straordinario']['periodo_effettivo']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_effettivo']);
            $value_2="dal ".$periodo[0];
            $value_2.=" al ".$periodo[1];
        }
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Periodo autorizzato:",$value,"Periodo di effettivo svolgimento:",$value_2),$row_template_2col));
        $curRow++;
        
        //ore
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['comune']['straordinario']['ore_max']))
        {
            $value=$rendiconti['comune']['straordinario']['ore_max'];
        }
        if(isset($rendiconti['comune']['straordinario']['ore_effettive']))
        {
            $value_2=$rendiconti['comune']['straordinario']['ore_effettive'];
        }
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Ore autorizzate:",$value,"Ore di effettivo svolgimento:",$value_2),$row_template_2col));
        $curRow++;

        //dipendenti
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['comune']['straordinario']['dipendenti_max']))
        {
            $value=$rendiconti['comune']['straordinario']['dipendenti_max'];
        }
        if(isset($rendiconti['comune']['straordinario']['dipendenti_effettivi']))
        {
            $value_2=$rendiconti['comune']['straordinario']['dipendenti_effettivi'];
        }
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Dipendenti autorizzati:",$value,"Dipendenti che hanno effettivamente svolto straordinario:",$value_2),$row_template_2col));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['importo'])) $value=AA_Utils::number_format($rendiconti['comune']['straordinario']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        $template = new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("5px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Oneri</span>"));
        $curRow=1;

        //estremi autorizzazione
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['estremi_pagamento'])) $value=$rendiconti['comune']['oneri']['estremi_pagamento'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi mandato di pagamento:",$value),$row_template));
        $curRow++;
        
        //oneri
        $value="n.d.";
        $value_2="n.d.";
        $value_3="n.d.";
        $value_4="n.d.";
        if(isset($rendiconti['comune']['oneri']['dettagli']))
        {
            $oneri=explode("|",$rendiconti['comune']['oneri']['dettagli']);
            $value=AA_Utils::number_format($oneri[0],2,",",".");
            $value_2=AA_Utils::number_format($oneri[1],2,",",".");
            $value_3=AA_Utils::number_format($oneri[2],2,",",".");
            $value_4=$oneri[3];
        } 
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Cpdel:",$value,"Irap:",$value_2),$row_template_2col));
        $curRow++;
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Altro:",$value_3,"Altro (descrizione):",$value_4),$row_template_2col));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['importo'])) $value=AA_Utils::number_format($rendiconti['comune']['oneri']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        $template = new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
        $template->SetColSizes(array("100"));
        //$template->SetCellPadding("5px");
        $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Trattamento di missione personale comunale</span>"));
        $curRow=1;

        //estremi autorizzazione
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_autorizzazione'])) $value=$rendiconti['comune']['missioni']['estremi_autorizzazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi provvedimento di autorizzazione:",$value),$row_template));
        $curRow++;
        
        //estremi liquidazione
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_liquidazione'])) $value=$rendiconti['comune']['missioni']['estremi_liquidazione'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi del provvedimento di liquidazione:",$value),$row_template));
        $curRow++;

        //km e componenti
        $value="n.d.";
        $value_2="n.d.";
        if(isset($rendiconti['comune']['missioni']['km'])) $value_2=$rendiconti['comune']['missioni']['km'];
        if(isset($rendiconti['comune']['missioni']['dipendenti'])) $value=$rendiconti['comune']['missioni']['dipendenti'];
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Personale che ha svolto missioni:",$value,"Km totali percorsi:",$value_2),$row_template_2col));
        $curRow++;

        //importo
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['importo'])) $value=AA_Utils::number_format($rendiconti['comune']['missioni']['importo'],2,",",".");
        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
        $curRow++;

        //note
        if(isset($rendiconti['comune']['straordinario']['note']))
        {
            $value=$rendiconti['comune']['straordinario']['note'];
        
            $note=new AA_XML_Div_Element(uniqid(),$layout);
            $note->SetStyle("text-align:left");
            $note->SetText(str_replace(array("#label#","#value#"),array("Note:",$value),$row_template));
        }
       
        /*$val="<ul>Si attesta che:
        <li>sono stati rispettati i limiti per il lavoro straordinario elettorale previsti nell'art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68 e che la retribuzione per il lavoro straordinario di cui si chiede il rimborso è stata corrisposta ai dipendenti che potevano essere retribuiti con il compenso per prestazioni straordinarie in base al C.C.N.L. da applicarsi per il periodo considerato;</li>
        <li>sono state rispettate le disposizioni contrattuali e legislative in materia di trattamento di trasferta dei dipendenti comunali e il rispetto dei limiti per il lavoro straordinario elettorale, previsti nell'art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68, complessivamente per le diverse consultazioni;</li></ul>";
        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $attestazione->SetStyle("text-align:justify;font-size:smaller");
        $attestazione->SetText($val);*/

        return $layout->__toString();
    }

    public function Template_RendicontiReportStraordinarioAttestazioni($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $value="<ul>Si attesta che:<li>sono stati rispettati i limiti per il lavoro straordinario elettorale previsti nell'art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68;</li>";
        $value.="<li>la retribuzione per il lavoro straordinario di cui si chiede il rimborso è stata corrisposta ai dipendenti che potevano essere retribuiti con il compenso per prestazioni straordinarie in base al C.C.N.L. da applicarsi per il periodo considerato;</li>";
        $value.="<li>sono state applicate le tariffe orarie per il lavoro straordinario previste dal C.C.N.L. vigente nel periodo considerato;</li>";
        $value.="<li>sono state rispettate le disposizioni contrattuali e legislative in materia di trattamento di trasferta dei dipendenti comunali.</li>";
        $value.="</ul>";
        $value.="<ul>In caso di più consultazioni si attesta:<li>il rispetto dei limiti per il lavoro straordinario elettorale, previsti nell’art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68, complessivamente per le diverse consultazioni;</li>";
        $value.="<li>il rispetto del riparto delle spese tra gli enti interessati alle consultazioni indicato nelle circolari in materia della Regione e dello Stato:</li>";
        $value.="</ul>";
        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
        $attestazione->SetStyle("text-align:justify;");
        $attestazione->SetText($value);

        return $layout->__toString();
    }

    public function Template_RendicontiReportAssunzioni($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true,$page=0,$lastPage=false)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $rendiconti=$comune->GetRendiconti(true);

        $count=0;
        if(isset($rendiconti['personale_det']))
        {
            $numeroVoci=sizeof($rendiconti['personale_det'])-$page*2;
            if($numeroVoci > 2) $numeroVoci=2;

            foreach($rendiconti['personale_det'] as $curPersonale)
            {
                if($count >= $page*2 && $count < ($page*2+2))
                {
                    $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
                    $template->SetColSizes(array("100"));
                    //$template->SetCellPadding("7px");
                    $template->SetHeaderLabels(array("<span style='line-height:1px;'></span>"));
                    $curRow=1;
        
                    //qualifica
                    $value="n.d.";
                    if(isset($curPersonale['qualifica'])) $value=$curPersonale['qualifica'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Qualifica:",$value),$row_template));
                    $curRow++;

                    //periodo e estremi assunzione
                    $value="n.d.";
                    $value_2="n.d.";
                    if(isset($curPersonale['periodo_dal'])) $value="dal ".substr($curPersonale['periodo_dal'],0,10);
                    if(isset($curPersonale['periodo_al'])) $value.=" al ".substr($curPersonale['periodo_al'],0,10);

                    if(isset($curPersonale['estremi_assunzione'])) $value_2=$curPersonale['estremi_assunzione'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Periodo di assunzione:",$value,"Estremi provvedimenti di assunzione:",$value_2),$row_template_2col));
                    $curRow++;
                  
                    //estremi liquidazione e pagamento
                    $value="n.d.";
                    $value_2="n.d.";
                    if(isset($curPersonale['estremi_pagamento'])) $value_2=$curPersonale['estremi_pagamento'];
                    if(isset($curPersonale['estremi_liquidazione'])) $value=$curPersonale['estremi_liquidazione'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Estremi del provvedimento di liquidazione:",$value,"Estremi del mandato di pagamento:",$value_2),$row_template_2col));
                    $curRow++;
                    
                    //importo
                    $value="n.d.";
                    if(isset($curPersonale['importo'])) $value=AA_Utils::number_format($curPersonale['importo'],2,",",".");
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
                    $curRow++;
        
                    $template->SetCellText($curRow,0,"Oneri","center",null,'bold',null,"#dadee0");
                    $curRow++;
        
                    //estremi pagamento
                    $value="n.d.";
                    if(isset($curPersonale['oneri_pagamento'])) $value=$curPersonale['oneri_pagamento'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Estremi mandato di pagamento:",$value),$row_template));
                    $curRow++;
                    
                    //oneri
                    $value="n.d.";
                    $value_2="n.d.";
                    $value_3="n.d.";
                    $value_4="n.d.";
                    if(isset($curPersonale['oneri_cpdel'])) $value=AA_Utils::number_format($curPersonale['oneri_cpdel'],2,",",".");
                    if(isset($curPersonale['oneri_irap'])) $value_2=AA_Utils::number_format($curPersonale['oneri_irap'],2,",",".");
                    if(isset($curPersonale['oneri_altro'])) $value_3=AA_Utils::number_format($curPersonale['oneri_altro'],2,",",".");
                    if(isset($curPersonale['oneri_altro_desc'])) $value_4=$curPersonale['oneri_altro_desc'];

                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Cpdel:",$value,"Irap:",$value_2),$row_template_2col));
                    $curRow++;
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Altro:",$value_3,"Altro (descrizione):",$value_4),$row_template_2col));
                    $curRow++;
        
                    //importo
                    $value="n.d.";
                    if(isset($curPersonale['oneri_importo'])) $value=AA_Utils::number_format($curPersonale['oneri_importo'],2,",",".");
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
                    $curRow++;
                    $numeroVoci--;

                    if($numeroVoci==0)
                    {
                        $val="<ul>Si attesta che:<li>la spesa di cui si chiede il rimborso per l'assunzione di personale a tempo determinato è relativa al lavoro prestato nel periodo elettorale indicato nella circolare della Regione in materia di rendicontazione;</li>
                        <li>i contratti individuali di lavoro a tempo determinato, stipulati dal Comune, danno luogo alla costituzione di un rapporto di lavoro subordinato con l'Ente;</li>";
                        $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
                        $attestazione->SetStyle("text-align:left;");
                        $attestazione->SetText($val);
                    }
                }
                $count++;
            }
        }
        else
        {
            $layout->SetText("<div style='margin-top: 10em;'>Non sono state presentate spese per l'assunzione di personale con contratto di lavoro subordinato a tempo determinato.</div>");
        }
        return $layout->__toString();
    }

    public function Template_RendicontiReportServizi($object=null,$comune=null,$rendiconti=null,$bDifferenziateRowsColor=true,$page=0)
    {
    
        if(!($object instanceof AA_Sier) || !($comune instanceof AA_SierComune) || !is_array($rendiconti))
        {
            return "";
        }

        $layout=new AA_XML_Div_Element(uniqid());
        $layout->SetStyle("width:99%; height:100%;");

        $row_template="<div style='display:flex; width: 96.8%;flex-direction:column; padding: .5em;'>";
        $row_template.="<div style='width:100%;font-weight: bold; margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template.="</div>";

        $row_template_2col="<div style='display:flex; width: 96.8%;'>";
        $row_template_2col.="<div style='display:flex; width: 50%;min-width:50%; flex-direction:column; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label#</div><div style='width:100%'>#value#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="<div style='display:flex; width: 49%;flex-direction:column; border-left:1px solid #d7dbdd; padding: .5em;'>";
        $row_template_2col.="<div style='width:100%;font-weight: bold;margin-bottom: .2em;'>#label_2#</div><div style='width:100%'>#value_2#</div>";
        $row_template_2col.="</div>";
        $row_template_2col.="</div>";

        $rendiconti=$comune->GetRendiconti(true);
        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        $count=0;
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $curVal)
            {
                if($count >= $page*3 && $count < ($page*3+3))
                {
                    $template= new AA_GenericTableTemplateView(uniqid(),$layout,$object,array("evidentiate-rows"=>$bDifferenziateRowsColor,"title"=>"","default-border-color"=>"#d7dbdd","h_bgcolor"=>"#d7dbdd","border"=>"1px solid #d7dbdd;","width"=>"99.7%","style"=>"margin-bottom: 1em; margin-top: 1em"));
                    $template->SetColSizes(array("100"));
                    //$template->SetCellPadding(".8em");
                    $template->SetHeaderLabels(array("<span style='font-weight:bold;line-height:18px;'>Tipologia:</span> ".$tipologia[$curVal['tipologia']]));
                    $curRow=1;
        
                    //descrizione e ditta
                    $value="n.d.";
                    $value_2="n.d.";
                    if(isset($curVal['descrizione'])) $value=$curVal['descrizione'];
                    if(isset($curVal['estremi_impegno'])) $value_2=$curVal['estremi_impegno'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Descrizione:",$value,"Estremi provvedimento di impegno:",$value_2),$row_template_2col));
                    $curRow++;
                  
                    //estremi impegno e liquidazione
                    $value="n.d.";
                    $value_2="n.d.";
                    if(isset($curVal['estremi_liquidazione'])) $value=$curVal['estremi_liquidazione'];
                    if(isset($curVal['estremi_pagamento'])) $value_2=$curVal['estremi_pagamento'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Estremi del provvedimento di liquidazione:",$value,"Estremi del mandato di pagamento:",$value_2),$row_template_2col));
                    $curRow++;
                    
                    //estremi pagamento e fattura
                    $value="n.d.";
                    $value_2="n.d.";
                    if(isset($curVal['ditta'])) $value=$curVal['ditta'];
                    if(isset($curVal['estremi_fattura'])) $value_2=$curVal['estremi_fattura'];
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#","#label_2#","#value_2#"),array("Ditta:",$value,"Fattura:",$value_2),$row_template_2col));
                    $curRow++;

                    //importo
                    $value="n.d.";
                    if(isset($curVal['importo'])) $value=AA_Utils::number_format($curVal['importo'],2,",",".");
                    $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Importo presentato:",$value),$row_template),"left",null,null,null," #ebf5fb ");
                    $curRow++;

                    if(isset($curVal['note']))
                    {
                        $value=$curVal['note'];
                        $template->SetCellText($curRow,0,str_replace(array("#label#","#value#"),array("Note:",$value),$row_template),"left");
                        $curRow++;
                    }                    
                }
                $count++;
            }
            $value="<ul>Si attesta che:<li>Nell'ipotesi di acquisto di nuovi tabelloni per la propaganda elettorale, l'importo di cui si chiede il rimborso costituisce il 10% del totale della relativa spesa:</li>";
            $value.="<li>l'eventuale spesa richiesta a rimborso per collegamenti telefonici e' relativa al noleggio di telefoni cellulari o all’attivazione di collegamenti telefonici straordinari e al relativo traffico telefonico nei giorni della votazione per la raccolta dei dati elettorali.</li>";
            $value.="</ul>";
            $attestazione=new AA_XML_Div_Element(uniqid(),$layout);
            $attestazione->SetStyle("text-align:left;");
            $attestazione->SetText($value);
        }
        else
        {
            $layout->SetText("Non sono presenti assunzioni di personale a tempo determinato.");
        }
        return $layout->__toString();
    }

    //Task modifica buoni Comune
    public function Task_UpdateSierComuneRendicontiBuoni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        if(isset($_REQUEST['buoni|periodo_dal']) && isset($_REQUEST['buoni|periodo_al']) && $_REQUEST['buoni|periodo_al']<=$_REQUEST['buoni|periodo_dal'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di inizio deve essere precedente a quella di fine.",false);
            return false;
        }
        if(isset($_REQUEST['buoni|periodo_dal']) && (!isset($_REQUEST['buoni|periodo_al']) || $_REQUEST['buoni|periodo_al']==""))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di inizio deve essere precedente a quella di fine.",false);
            return false;
        }
        if(!isset($_REQUEST['buoni|periodo_dal']) || !isset($_REQUEST['buoni|periodo_al']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre impostare una data di inizio e di fine.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(isset($_REQUEST['buoni|estremi_liquidazione']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['estremi_liquidazione']=$_REQUEST['buoni|estremi_liquidazione'];
        }
        if(isset($_REQUEST['buoni|estremi_pagamento']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['seggi']=array();
            $rendiconti['buoni']['estremi_pagamento']=$_REQUEST['buoni|estremi_pagamento'];
        }
        if(isset($_REQUEST['buoni|importo']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $num=$_REQUEST['buoni|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['buoni']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        if(isset($_REQUEST['buoni|erogati']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['erogati']=$_REQUEST['buoni|erogati'];
        }
        if(isset($_REQUEST['buoni|dipendenti']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['dipendenti']=$_REQUEST['buoni|dipendenti'];
        }
        if(isset($_REQUEST['buoni|note']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['note']=$_REQUEST['buoni|note'];
        }

        $periodo="";

        if(isset($_REQUEST['buoni|periodo_dal'])) $periodo=substr($_REQUEST['buoni|periodo_dal'],0,10);
        if(isset($_REQUEST['buoni|periodo_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['buoni|periodo_al'],0,10);
            else $periodo=substr($_REQUEST['buoni|periodo_al'],0,10);
        }

        if($periodo !="")
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['periodo']=$periodo;
        }

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti competenze buoni pasto"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica buoni Comune
    public function Task_Update_OC_ComuneRendicontiBuoni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        if(isset($_REQUEST['buoni|periodo_dal']) && isset($_REQUEST['buoni|periodo_al']) && $_REQUEST['buoni|periodo_al']<=$_REQUEST['buoni|periodo_dal'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di inizio deve essere precedente a quella di fine.",false);
            return false;
        }
        if(isset($_REQUEST['buoni|periodo_dal']) && (!isset($_REQUEST['buoni|periodo_al']) || $_REQUEST['buoni|periodo_al']==""))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di inizio deve essere precedente a quella di fine.",false);
            return false;
        }
        if(!isset($_REQUEST['buoni|periodo_dal']) || !isset($_REQUEST['buoni|periodo_al']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Occorre impostare una data di inizio e di fine.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(isset($_REQUEST['buoni|estremi_liquidazione']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['estremi_liquidazione']=$_REQUEST['buoni|estremi_liquidazione'];
        }
        if(isset($_REQUEST['buoni|estremi_pagamento']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['seggi']=array();
            $rendiconti['buoni']['estremi_pagamento']=$_REQUEST['buoni|estremi_pagamento'];
        }
        if(isset($_REQUEST['buoni|importo']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $num=$_REQUEST['buoni|importo'];

                $num=str_replace(".","",trim($num));
                $num=str_replace(",",".",trim($num));
            
            $rendiconti['buoni']['importo']=AA_Utils::number_format($num,2,'.','');
        }
        if(isset($_REQUEST['buoni|erogati']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['erogati']=$_REQUEST['buoni|erogati'];
        }
        if(isset($_REQUEST['buoni|dipendenti']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['dipendenti']=$_REQUEST['buoni|dipendenti'];
        }
        if(isset($_REQUEST['buoni|note']))
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['note']=$_REQUEST['buoni|note'];
        }

        $periodo="";

        if(isset($_REQUEST['buoni|periodo_dal'])) $periodo=substr($_REQUEST['buoni|periodo_dal'],0,10);
        if(isset($_REQUEST['buoni|periodo_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['buoni|periodo_al'],0,10);
            else $periodo=substr($_REQUEST['buoni|periodo_al'],0,10);
        }

        if($periodo !="")
        {
            if(!isset($rendiconti['buoni'])) $rendiconti['buoni']=array();
            $rendiconti['buoni']['periodo']=$periodo;
        }

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti competenze buoni pasto - operatore:".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica servizi Comune
    public function Task_UpdateSierComuneRendicontiServizi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $id_servizio=trim($_REQUEST['id_servizio']);
        if($id_servizio=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi'])) $rendiconti['servizi']=array();

        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        $servizio=array(
            "tipologia"=>$_REQUEST['tipologia'],
            "descrizione"=>trim($_REQUEST['descrizione']),
            "importo"=>str_replace(",",".",str_replace(".","",$_REQUEST['importo'])),
            "estremi_impegno"=>trim($_REQUEST['estremi_impegno']),
            "estremi_liquidazione"=>trim($_REQUEST['estremi_liquidazione']),
            "estremi_pagamento"=>trim($_REQUEST['estremi_pagamento']),
            "ditta"=>trim($_REQUEST['ditta']),
            "estremi_fattura"=>trim($_REQUEST['estremi_fattura']),
            "note"=>trim($_REQUEST['note'])
        );

        $rendiconti['servizi'][$id_servizio]=$servizio;

        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;          
        }
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica/aggiunta rendiconti servizi - id: ".$id_servizio." - tipo: ".$tipologia[$_REQUEST['tipologia']]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica importop ammesso
    public function Task_UpdateSierComuneRendicontiImportoAmmesso($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) && !$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        $importo_ammesso="n.d.";
        $importo_corrisposto=0;
        $fields=explode('|',$_REQUEST['field']);
        if(sizeof($fields)>1)
        {
            $value=$rendiconti;
            for($i=0;$i<sizeof($fields);$i++)
            {
                $value=$value[$fields[$i]];
                //AA_Log::Log(__METHOD__." - value:".print_r($value,true),100);
                if(!is_array($value))
                {
                    $importo_corrisposto=floatVal($value);
                }
            }
        }
        else
        {
            if(isset($rendiconti[$_REQUEST['field']]))
            {
                $importo_corrisposto=floatVal($rendiconti[$_REQUEST['field']]);
            }
        }

        if(isset($_REQUEST['importo_ammesso']))
        {
            $importo_ammesso=AA_Utils::number_format(floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['importo_ammesso']))),2,".");
        }
        if($importo_ammesso !="n.d." && $importo_ammesso>$importo_corrisposto)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'importo ammesso non puo' superare quello presentato.",false);
            return false;    
        }

        if($importo_ammesso !="n.d.") 
        {
            if(!isset($rendiconti['ras'])) $rendiconti['ras']=array();
            if(!isset($rendiconti['ras']['importi_ammessi'])) $rendiconti['ras']['importi_ammessi']=array();

            if(strpos($_REQUEST['field'],"personale_det")===false && strpos($_REQUEST['field'],"servizi")===false)
            {
                $rendiconti['ras']['importi_ammessi'][$_REQUEST['field']]=$importo_ammesso;
            }
            else
            {
                if(strpos($_REQUEST['field'],"personale_det")!==false)
                {
                    if(!isset($rendiconti['ras']['importi_ammessi']['personale_det'])) $rendiconti['ras']['importi_ammessi']['personale_det']=array();
                    $field=explode("|",$_REQUEST['field']);
                    $rendiconti['ras']['importi_ammessi']['personale_det'][$field[1]][$field[2]]=$importo_ammesso;
                }
                else
                {
                    if(!isset($rendiconti['ras']['importi_ammessi']['servizi'])) $rendiconti['ras']['importi_ammessi']['servizi']=array();
                    $field=explode("|",$_REQUEST['field']);
                    $rendiconti['ras']['importi_ammessi']['servizi'][$field[1]][$field[2]]=$importo_ammesso;
                }
            }
            
            $comune->SetRendiconti($rendiconti);
            if(!$object->UpdateComune($comune,$this->oUser,"Impostazione importo ammesso per la voce: ".$_REQUEST['voce']))
            {
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError(AA_Log::$lastErrorLog,false);
                return false;            
            }
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica servizi Comune
    public function Task_Update_OC_ComuneRendicontiServizi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $id_servizio=trim($_REQUEST['id_servizio']);
        if($id_servizio=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi'])) $rendiconti['servizi']=array();

        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        $servizio=array(
            "tipologia"=>$_REQUEST['tipologia'],
            "descrizione"=>trim($_REQUEST['descrizione']),
            "importo"=>str_replace(",",".",str_replace(".","",$_REQUEST['importo'])),
            "estremi_impegno"=>trim($_REQUEST['estremi_impegno']),
            "estremi_liquidazione"=>trim($_REQUEST['estremi_liquidazione']),
            "estremi_pagamento"=>trim($_REQUEST['estremi_pagamento']),
            "ditta"=>trim($_REQUEST['ditta']),
            "estremi_fattura"=>trim($_REQUEST['estremi_fattura']),
            "note"=>trim($_REQUEST['note'])
        );

        $rendiconti['servizi'][$id_servizio]=$servizio;
        
        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;
        }
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica/aggiunta rendiconti servizi - id: ".$id_servizio." - tipo: ".$tipologia[$_REQUEST['tipologia']]." - operatore:".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica servizi Comune
    public function Task_UpdateSierComuneRendicontiPersonaleDeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $id_personale=trim($_REQUEST['id_personale_det']);
        if($id_personale=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        //$oneri_importo=str_replace(",",".",str_replace(".","",$_REQUEST['oneri_importo']));
        $oneri_irap=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_irap'])));
        $oneri_cpdel=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_cpdel'])));
        $oneri_altro=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_altro'])));
        $oneri_importo=$oneri_irap+$oneri_cpdel+$oneri_altro;

        if($oneri_cpdel+$oneri_irap+$oneri_altro != $oneri_importo)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'importo totale degli oneri deve coincidere con la somma delle varie parti.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det'])) $rendiconti['personale_det']=array();
        $personale=array(
            "tipologia"=>trim($_REQUEST['tipologia']),
            "estremi_liquidazione"=>trim($_REQUEST['estremi_liquidazione']),
            "estremi_assunzione"=>trim($_REQUEST['estremi_assunzione']),
            "importo"=>str_replace(",",".",str_replace(".","",$_REQUEST['importo'])),
            "estremi_pagamento"=>trim($_REQUEST['estremi_pagamento']),
            "qualifica"=>trim($_REQUEST['qualifica']),
            "periodo_dal"=>trim($_REQUEST['periodo_dal']),
            "oneri_pagamento"=>trim($_REQUEST['oneri_pagamento']),
            "periodo_al"=>trim($_REQUEST['periodo_al']),
            "oneri_importo"=>$oneri_importo,
            "oneri_cpdel"=>$oneri_cpdel,
            "oneri_irap"=>$oneri_irap,
            "oneri_altro"=>$oneri_altro,
            "oneri_altro_desc"=>str_replace(",",".",str_replace(".","",$_REQUEST['oneri_altro_desc']))
        );

        $rendiconti['personale_det'][$id_personale]=$personale;

        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;   
        }
        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica/aggiunta rendiconti personale a tempo determinato - id: ".$id_personale." - tipo: ".$_REQUEST['tipologia']))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica servizi Comune
    public function Task_Update_OC_ComuneRendicontiPersonaleDeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $id_personale=trim($_REQUEST['id_personale_det']);
        if($id_personale=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido",false);
            return false;
        }

        $oneri_irap=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_irap'])));
        $oneri_cpdel=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_cpdel'])));
        $oneri_altro=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_altro'])));
        //$oneri_importo=floatVal(str_replace(",",".",str_replace(".","",$_REQUEST['oneri_importo'])));
        $oneri_importo=$oneri_irap+$oneri_cpdel+$oneri_altro;

        if($oneri_cpdel+$oneri_irap+$oneri_altro != $oneri_importo)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'importo totale degli oneri deve coincidere con la somma delle varie parti.",false);
            return false;
        }

        if($_REQUEST['periodo_al']<=$_REQUEST['periodo_dal'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("La data di fine deve essere posteriore a quella di inizio.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det'])) $rendiconti['personale_det']=array();
        $personale=array(
            "tipologia"=>trim($_REQUEST['tipologia']),
            "estremi_liquidazione"=>trim($_REQUEST['estremi_liquidazione']),
            "estremi_assunzione"=>trim($_REQUEST['estremi_assunzione']),
            "importo"=>str_replace(",",".",str_replace(".","",$_REQUEST['importo'])),
            "estremi_pagamento"=>trim($_REQUEST['estremi_pagamento']),
            "qualifica"=>trim($_REQUEST['qualifica']),
            "periodo_dal"=>trim($_REQUEST['periodo_dal']),
            "oneri_pagamento"=>trim($_REQUEST['oneri_pagamento']),
            "periodo_al"=>trim($_REQUEST['periodo_al']),
            "oneri_importo"=>$oneri_importo,
            "oneri_cpdel"=>$oneri_cpdel,
            "oneri_irap"=>$oneri_irap,
            "oneri_altro"=>$oneri_altro,
            "oneri_altro_desc"=>str_replace(",",".",str_replace(".","",$_REQUEST['oneri_altro_desc']))
        );

        $rendiconti['personale_det'][$id_personale]=$personale;

        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;            
        }

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica/aggiunta rendiconti personale a tempo determinato - id: ".$id_personale." - tipo: ".$_REQUEST['tipologia']." - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina servizi Comune
    public function Task_DeleteSierComuneRendicontiServizi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $id_servizio=trim($_REQUEST['id_servizio']);
        if($id_servizio=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi']) ||  !isset($rendiconti['servizi'][$id_servizio]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido.",false);
            return false;
        }

        $descrizione=$rendiconti['servizi'][$id_servizio]['descrizione'];
        unset($rendiconti['servizi'][$id_servizio]);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Eliminazione rendicontazione bene/servizio - id: ".$id_servizio." - descrizione: ".$descrizione))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina servizi Comune
    public function Task_Delete_OC_ComuneRendicontiServizi($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $id_servizio=trim($_REQUEST['id_servizio']);
        if($id_servizio=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['servizi']) ||  !isset($rendiconti['servizi'][$id_servizio]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo servizio non valido.",false);
            return false;
        }

        $descrizione=$rendiconti['servizi'][$id_servizio]['descrizione'];
        unset($rendiconti['servizi'][$id_servizio]);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Eliminazione rendicontazione bene/servizio - id: ".$id_servizio." - descrizione: ".$descrizione." - operatore:".$operatore->GetoperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina servizi Comune
    public function Task_Delete_OC_ComuneRendicontiAllegati($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $allegato=trim($_REQUEST['file']);
        if($allegato=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo allegato non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['ras']['allegati'][$allegato]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo allegato non valido.",false);
            return false;
        }

        $storage=AA_Storage::GetInstance($this->oUser);
        if($storage->IsValid())
        {
          if(!$storage->DelFile($allegato))
          {
            AA_Log::Log(__METHOD__." - Allegato non eliminato.",100);
          }
        }

        $descrizione=$rendiconti['ras']['allegati'][$allegato]['estremi'];
        unset($rendiconti['ras']['allegati'][$allegato]);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Eliminazione rendicontazione allegato - id: ".$allegato." - descrizione: ".$descrizione." - operatore:".$operatore->GetoperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina servizi Comune
    public function Task_DeleteSierComuneRendicontiPersonaleDeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        $id_personale_det=trim($_REQUEST['id_personale_det']);
        if($id_personale_det=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det']) || !isset($rendiconti['personale_det'][$id_personale_det]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido.",false);
            return false;
        }

        $descrizione=$rendiconti['personale_det'][$id_personale_det]['tipologia'];
        unset($rendiconti['personale_det'][$id_personale_det]);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Eliminazione rendicontazione competenze personale a tempo determinato - id: ".$id_personale_det." - descrizione: ".$descrizione))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina rendiconti personale determinatop OC Comune
    public function Task_Delete_OC_ComuneRendicontiPersonaleDeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $id_personale_det=trim($_REQUEST['id_personale_det']);
        if($id_personale_det=="")
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['personale_det']) || !isset($rendiconti['personale_det'][$id_personale_det]))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("identificativo non valido.",false);
            return false;
        }

        $descrizione=$rendiconti['personale_det'][$id_personale_det]['tipologia'];
        unset($rendiconti['personale_det'][$id_personale_det]);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Eliminazione rendicontazione competenze personale a tempo determinato - id: ".$id_personale_det." - descrizione: ".$descrizione." - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica buoni Comune
    public function Task_UpdateSierComuneRendicontiPersonaleIndeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }
        
        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['comune'])) $rendiconti['comune']=array();
        if(!isset($rendiconti['comune']['straordinario'])) $rendiconti['comune']['straordinario']=array();
        if(!isset($rendiconti['comune']['oneri'])) $rendiconti['comune']['oneri']=array();
        if(!isset($rendiconti['comune']['missioni'])) $rendiconti['comune']['missioni']=array();
        if(isset($_REQUEST['comune|straordinario|estremi_liquidazione']))
        {
            $rendiconti['comune']['straordinario']['estremi_liquidazione']=$_REQUEST['comune|straordinario|estremi_liquidazione'];
        }
        if(isset($_REQUEST['comune|straordinario|estremi_autorizzazione']))
        {
            $rendiconti['comune']['straordinario']['estremi_autorizzazione']=$_REQUEST['comune|straordinario|estremi_autorizzazione'];
        }
        if(isset($_REQUEST['comune|straordinario|estremi_pagamento']))
        {
            $rendiconti['comune']['straordinario']['estremi_pagamento']=$_REQUEST['comune|straordinario|estremi_pagamento'];
        }
        if(isset($_REQUEST['comune|straordinario|importo']))
        {
            $num=$_REQUEST['comune|straordinario|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['comune']['straordinario']['importo']=AA_Utils::number_format($num,2,'.','');
        }

        //periodo max
        $periodo="";
        if(isset($_REQUEST['comune|straordinario|periodo_max_dal'])) $periodo=substr($_REQUEST['comune|straordinario|periodo_max_dal'],0,10);
        if(isset($_REQUEST['comune|straordinario|periodo_max_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['comune|straordinario|periodo_max_al'],0,10);
            else $periodo=substr($_REQUEST['comune|straordinario|periodo_max_al'],0,10);
        }
        if($periodo !="")
        {
            $rendiconti['comune']['straordinario']['periodo_max']=$periodo;
        }

        //periodo effettivo
        $periodo="";
        if(isset($_REQUEST['comune|straordinario|periodo_effettivo_dal'])) $periodo=substr($_REQUEST['comune|straordinario|periodo_effettivo_dal'],0,10);
        if(isset($_REQUEST['comune|straordinario|periodo_effettivo_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['comune|straordinario|periodo_effettivo_al'],0,10);
            else $periodo=substr($_REQUEST['comune|straordinario|periodo_effettivo_al'],0,10);
        }
        if($periodo !="")
        {
            $rendiconti['comune']['straordinario']['periodo_effettivo']=$periodo;
        }

        //ore max
        if(isset($_REQUEST['comune|straordinario|ore_max']))
        {
            $rendiconti['comune']['straordinario']['ore_max']=$_REQUEST['comune|straordinario|ore_max'];
        }
        //ore effettive
        if(isset($_REQUEST['comune|straordinario|ore_effettive']))
        {
            $rendiconti['comune']['straordinario']['ore_effettive']=$_REQUEST['comune|straordinario|ore_effettive'];
        }

        //dipendenti max
        if(isset($_REQUEST['comune|straordinario|dipendenti_max']))
        {
            $rendiconti['comune']['straordinario']['dipendenti_max']=$_REQUEST['comune|straordinario|dipendenti_max'];
        }

        //dipendenti effettivi
        if(isset($_REQUEST['comune|straordinario|dipendenti_effettivi']))
        {
            $rendiconti['comune']['straordinario']['dipendenti_effettivi']=$_REQUEST['comune|straordinario|dipendenti_effettivi'];
        }

        //note
        if(isset($_REQUEST['comune|straordinario|note']))
        {
            $rendiconti['comune']['straordinario']['note']=$_REQUEST['comune|straordinario|note'];
        }

        //mandati oneri
        if(isset($_REQUEST['comune|oneri|estremi_pagamento']))
        {
            $rendiconti['comune']['oneri']['estremi_pagamento']=$_REQUEST['comune|oneri|estremi_pagamento'];
        }

        //dettaglio oneri
        $dettaglio_oneri="";
        $oneri_importo=0;

        if(isset($_REQUEST['comune|oneri|dettagli_cpdel']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_cpdel'];        
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_irap']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_irap'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri.=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_altro']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_altro'];        
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri.=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_altro_desc']))
        {
            $dettaglio_oneri.=$_REQUEST['comune|oneri|dettagli_altro_desc'];
        }
        $rendiconti['comune']['oneri']['dettagli']=$dettaglio_oneri;
        $rendiconti['comune']['oneri']['importo']=AA_Utils::number_format($oneri_importo,2,".");

        //missioni aut
        if(isset($_REQUEST['comune|missioni|estremi_autorizzazione']))
        {
            $rendiconti['comune']['missioni']['estremi_autorizzazione']=$_REQUEST['comune|missioni|estremi_autorizzazione'];
        }
        //missioni liq
        if(isset($_REQUEST['comune|missioni|estremi_liquidazione']))
        {
            $rendiconti['comune']['missioni']['estremi_liquidazione']=$_REQUEST['comune|missioni|estremi_liquidazione'];
        }
        //missioni km
        if(isset($_REQUEST['comune|missioni|km']))
        {
            $rendiconti['comune']['missioni']['km']=$_REQUEST['comune|missioni|km'];
        }
        //missioni dipendenti
        if(isset($_REQUEST['comune|missioni|dipendenti']))
        {
            $rendiconti['comune']['missioni']['dipendenti']=$_REQUEST['comune|missioni|dipendenti'];
        }
        //missioni importo
        if(isset($_REQUEST['comune|missioni|importo']))
        {
            $num=$_REQUEST['comune|missioni|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['comune']['missioni']['importo']=AA_Utils::number_format($num,2,".");
        }

        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;            
        }

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti competenze personale a tempo indeterminato"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica buoni Comune
    public function Task_Update_OC_ComuneRendicontiPersonaleIndeterminato($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);
        if(!isset($rendiconti['comune'])) $rendiconti['comune']=array();
        if(!isset($rendiconti['comune']['straordinario'])) $rendiconti['comune']['straordinario']=array();
        if(!isset($rendiconti['comune']['oneri'])) $rendiconti['comune']['oneri']=array();
        if(!isset($rendiconti['comune']['missioni'])) $rendiconti['comune']['missioni']=array();
        if(isset($_REQUEST['comune|straordinario|estremi_liquidazione']))
        {
            $rendiconti['comune']['straordinario']['estremi_liquidazione']=$_REQUEST['comune|straordinario|estremi_liquidazione'];
        }
        if(isset($_REQUEST['comune|straordinario|estremi_autorizzazione']))
        {
            $rendiconti['comune']['straordinario']['estremi_autorizzazione']=$_REQUEST['comune|straordinario|estremi_autorizzazione'];
        }
        if(isset($_REQUEST['comune|straordinario|estremi_pagamento']))
        {
            $rendiconti['comune']['straordinario']['estremi_pagamento']=$_REQUEST['comune|straordinario|estremi_pagamento'];
        }
        if(isset($_REQUEST['comune|straordinario|importo']))
        {
            $num=$_REQUEST['comune|straordinario|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['comune']['straordinario']['importo']=AA_Utils::number_format($num,2,'.','');
        }

        //periodo max
        $periodo="";
        if(isset($_REQUEST['comune|straordinario|periodo_max_dal'])) $periodo=substr($_REQUEST['comune|straordinario|periodo_max_dal'],0,10);
        if(isset($_REQUEST['comune|straordinario|periodo_max_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['comune|straordinario|periodo_max_al'],0,10);
            else $periodo=substr($_REQUEST['comune|straordinario|periodo_max_al'],0,10);
        }
        if($periodo !="")
        {
            $rendiconti['comune']['straordinario']['periodo_max']=$periodo;
        }

        //periodo effettivo
        $periodo="";
        if(isset($_REQUEST['comune|straordinario|periodo_effettivo_dal'])) $periodo=substr($_REQUEST['comune|straordinario|periodo_effettivo_dal'],0,10);
        if(isset($_REQUEST['comune|straordinario|periodo_effettivo_al'])) 
        {
            if($periodo!="") $periodo.="|".substr($_REQUEST['comune|straordinario|periodo_effettivo_al'],0,10);
            else $periodo=substr($_REQUEST['comune|straordinario|periodo_effettivo_al'],0,10);
        }
        if($periodo !="")
        {
            $rendiconti['comune']['straordinario']['periodo_effettivo']=$periodo;
        }

        //ore max
        if(isset($_REQUEST['comune|straordinario|ore_max']))
        {
            $rendiconti['comune']['straordinario']['ore_max']=$_REQUEST['comune|straordinario|ore_max'];
        }
        //ore effettive
        if(isset($_REQUEST['comune|straordinario|ore_effettive']))
        {
            $rendiconti['comune']['straordinario']['ore_effettive']=$_REQUEST['comune|straordinario|ore_effettive'];
        }

        //dipendenti max
        if(isset($_REQUEST['comune|straordinario|dipendenti_max']))
        {
            $rendiconti['comune']['straordinario']['dipendenti_max']=$_REQUEST['comune|straordinario|dipendenti_max'];
        }

        //dipendenti effettivi
        if(isset($_REQUEST['comune|straordinario|dipendenti_effettivi']))
        {
            $rendiconti['comune']['straordinario']['dipendenti_effettivi']=$_REQUEST['comune|straordinario|dipendenti_effettivi'];
        }

        //note
        if(isset($_REQUEST['comune|straordinario|note']))
        {
            $rendiconti['comune']['straordinario']['note']=$_REQUEST['comune|straordinario|note'];
        }

        //mandati oneri
        if(isset($_REQUEST['comune|oneri|estremi_pagamento']))
        {
            $rendiconti['comune']['oneri']['estremi_pagamento']=$_REQUEST['comune|oneri|estremi_pagamento'];
        }

        //dettaglio oneri
        $dettaglio_oneri="";
        $oneri_importo=0;

        if(isset($_REQUEST['comune|oneri|dettagli_cpdel']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_cpdel'];        
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_irap']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_irap'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri.=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_altro']))
        {
            $num=$_REQUEST['comune|oneri|dettagli_altro'];        
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $oneri_importo+=floatVal($num);
            $dettaglio_oneri.=AA_Utils::number_format($num,2,".");
        }
        $dettaglio_oneri.="|";
        if(isset($_REQUEST['comune|oneri|dettagli_altro_desc']))
        {
            $dettaglio_oneri.=$_REQUEST['comune|oneri|dettagli_altro_desc'];
        }
        $rendiconti['comune']['oneri']['dettagli']=$dettaglio_oneri;
        $rendiconti['comune']['oneri']['importo']=AA_Utils::number_format($oneri_importo,2,".");

        //missioni aut
        if(isset($_REQUEST['comune|missioni|estremi_autorizzazione']))
        {
            $rendiconti['comune']['missioni']['estremi_autorizzazione']=$_REQUEST['comune|missioni|estremi_autorizzazione'];
        }
        //missioni liq
        if(isset($_REQUEST['comune|missioni|estremi_liquidazione']))
        {
            $rendiconti['comune']['missioni']['estremi_liquidazione']=$_REQUEST['comune|missioni|estremi_liquidazione'];
        }
        //missioni km
        if(isset($_REQUEST['comune|missioni|km']))
        {
            $rendiconti['comune']['missioni']['km']=$_REQUEST['comune|missioni|km'];
        }
        //missioni dipendenti
        if(isset($_REQUEST['comune|missioni|dipendenti']))
        {
            $rendiconti['comune']['missioni']['dipendenti']=$_REQUEST['comune|missioni|dipendenti'];
        }
        //missioni importo
        if(isset($_REQUEST['comune|missioni|importo']))
        {
            $num=$_REQUEST['comune|missioni|importo'];
            $num=str_replace(".","",trim($num));
            $num=str_replace(",",".",trim($num));
            $rendiconti['comune']['missioni']['importo']=AA_Utils::number_format($num,2,".");
        }

        $analisi=$object->AnalizeRendiconti($rendiconti,$comune);
        if($analisi[0])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError($analisi[1][0],false);
            return false;            
        }

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti straordinario e missioni - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica dati generali Comune
    public function Task_UpdateSierComuneCorpoElettorale($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if($_REQUEST['sezioni']!=$_REQUEST['sezioni_ordinarie']+$_REQUEST['sezioni_ospedaliere'])
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le sezioni totali devono corrispondere alla somma delle sezioni ospedaliere più quelle ordinarie",false);
            return false;
        }

        if($_REQUEST['elettori_m']<=0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Gli elettori maschi non possono essere assenti.",false);
            return false;
        }

        if($_REQUEST['elettori_f']<=0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Le elettrici femmine non possono essere assenti.",false);
            return false;
        }

        if(isset($_REQUEST['sezioni']) && $_REQUEST['sezioni']>0) $comune->SetProp("sezioni",$_REQUEST['sezioni']);
        if(isset($_REQUEST['sezioni_ordinarie']) && $_REQUEST['sezioni_ordinarie']>0) $comune->SetProp("sezioni_ordinarie",$_REQUEST['sezioni_ordinarie']);
        if(isset($_REQUEST['sezioni_ospedaliere']) && $_REQUEST['sezioni_ospedaliere']>=0) $comune->SetProp("sezioni_ospedaliere",$_REQUEST['sezioni_ospedaliere']);
        if(isset($_REQUEST['elettori_m']) && $_REQUEST['elettori_m']>0) $comune->SetProp("elettori_m",$_REQUEST['elettori_m']);
        if(isset($_REQUEST['elettori_f']) && $_REQUEST['elettori_f']>0) $comune->SetProp("elettori_f",$_REQUEST['elettori_f']);
        if(isset($_REQUEST['elettori_esteri_m']) && $_REQUEST['elettori_esteri_m']>=0) $comune->SetProp("elettori_esteri_m",$_REQUEST['elettori_esteri_m']);
        if(isset($_REQUEST['elettori_esteri_f']) && $_REQUEST['elettori_esteri_f']>=0) $comune->SetProp("elettori_esteri_f",$_REQUEST['elettori_esteri_f']);
        if(isset($_REQUEST['luoghi_detenzione']) && $_REQUEST['luoghi_detenzione']>=0) $comune->SetProp("luoghi_detenzione",$_REQUEST['luoghi_detenzione']);
        if(isset($_REQUEST['luoghi_cura_sub100']) && $_REQUEST['luoghi_cura_sub100']>=0) $comune->SetProp("luoghi_cura_sub100",$_REQUEST['luoghi_cura_sub100']);
        if(isset($_REQUEST['luoghi_cura_over100']) && $_REQUEST['luoghi_cura_over100']>=0) $comune->SetProp("luoghi_cura_over100",$_REQUEST['luoghi_cura_over100']);

        $cp=$object->GetControlPannel();
        if($cp['abilita_cert_corpo_elettorale']>0)
        {
            $comunicazioni=$comune->GetComunicazioni(true);
            if(isset($_REQUEST['corpoelettorale_45']) && $_REQUEST['corpoelettorale_45']>0) $comunicazioni['corpoelettorale_45']=1;
            else $comunicazioni['corpoelettorale_45']=0;
            if(isset($_REQUEST['corpoelettorale_15']) && $_REQUEST['corpoelettorale_15']>0) $comunicazioni['corpoelettorale_15']=1;
            else $comunicazioni['corpoelettorale_15']=0;
            $comune->SetComunicazioni($comunicazioni);    
        }

        if(!$object->UpdateComune($comune,$this->oUser,"Modifica corpo elettorale"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_UpdateSierComuneComunicazioni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido",false);
            return false;
        }

        if(!$this->oUser->IsSuperUser() && $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
            $task->SetContent(" ",false);
        }

        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        foreach($giornate as $giornata=>$curValues)
        {
            $comunicazioni[$giornata]=array();
            if(isset($_REQUEST[$giornata."_inizio"]) && $_REQUEST[$giornata."_inizio"]>0) $comunicazioni[$giornata]["inizio"]=1;
            else $comunicazioni[$giornata]["inizio"]=0;

            if(isset($_REQUEST[$giornata."_fine"]) && $_REQUEST[$giornata."_fine"]>0) $comunicazioni[$giornata]["fine"]=1;
            else $comunicazioni[$giornata]["fine"]=0;
        }

        //if(isset($_REQUEST['corpoelettorale_45']) && $_REQUEST['corpoelettorale_45']>0) $comunicazioni['corpoelettorale_45']=1;

        //if(isset($_REQUEST['corpoelettorale_15']) && $_REQUEST['corpoelettorale_15']>0) $comunicazioni['corpoelettorale_15']=1;
        
        $comune->SetComunicazioni($comunicazioni);

        if(!$object->UpdateComune($comune,$this->oUser,"Modifica dati comunicazioni"))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Comunicazioni aggiornate con successo.",false);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_ResetComunicazioniComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->ResetComunicazioniComuni())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Comunicazioni resettate con successo.",false);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmResetComunicazioniComuniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmResetComunicazioniComuniDlg($object),true);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmResetFeedRisultatiComuniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmResetFeedRisultatiComuniDlg($object),true);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmUpdateFeedRisultatiComuniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmUpdateFeedRisultatiComuniDlg($object),true);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmResetRisultatiComuniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmResetRisultatiComuniDlg($object),true);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmUpdateFeedRisultatiGeneraliDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmUpdateFeedRisultatiGeneraliDlg($object),true);

        return true;
    }

    //Task modifica dati comunicazioni
    public function Task_GetSierConfirmResetAffluenzaComuniDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmResetAffluenzaComuniDlg($object),true);

        return true;
    }

    public function Task_GetSierConfirmTrashWebAppQRCodeDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modificare l'oggetto.",false);
            return false;
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent($this->Template_GetSierConfirmTrashWebAppQRCodeDlg($object),true);

        return true;
    }

    //Task modifica dati affluenza
    public function Task_ResetAffluenzaComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->ResetAffluenzaComuni())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Affluenza resettata con successo.",false);

        return true;
    }

    //Task modifica risultati
    public function Task_ResetRisultatiComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->ResetRisultatiComuni())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Risultati resettati con successo.",false);

        return true;
    }

    public function Task_UpdateFeedRisultatiComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->UpdateFeedRisultatiComuni())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Feed risultati aggiornati con successo.",false);

        return true;
    }

    //Task modifica risultati
    public function Task_UpdateFeedRisultatiGenerali($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->UpdateFeedRisultatiGenerali())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Feed risultati aggiornati con successo.",false);

        return true;
    }

    //Task reset feed risultati
    public function Task_ResetFeedRisultatiComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->ResetFeedRisultatiComuni())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Feed risultati resettati con successo.",false);

        return true;
    }

    //Task reset feed risultati
    public function Task_UpdateAnalisiRisultatiComuni($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Elemento non valido o permessi insufficienti.",false);
            return false;
        }

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può modifcare l'oggetto.",false);
            return false;
        }

        if(!$object->UpdateAnalisiRisultati())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Analisi risultati aggiornate con successo.",false);

        return true;
    }

    //Task modifica Coalizione
    public function Task_GetSierModifyCoalizioneDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione = $object->GetCoalizioni($_REQUEST);
        if(sizeof($coalizione) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Coalizione non valida.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) > 0)
        {
            $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
            $sTaskLog.= $this->Template_GetSierModifyCoalizioneDlg($object,$coalizione[$_REQUEST['id_coalizione']])->toBase64();
            $sTaskLog.="</content>";
            $task->SetLog($sTaskLog);
        
            return true;
        }
        else
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
    }

    //Task aggiorna allegato
    public function Task_UpdateSierAllegato($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        $uploadedFile = AA_SessionFileUpload::Get("NewAllegatoDoc");

        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return true;
        }

        $allegato=$object->GetAllegato($_REQUEST['id_allegato'],$this->oUser);
        if($allegato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo allegato non valido (".$_REQUEST['id_allegato'].").</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return false;
        }

        //Se c'è un file uploadato l'url non viene salvata.
        $fileHash=$allegato->GetFileHash();
        if($uploadedFile->isValid()) 
        {
            $_REQUEST['url']="";

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$allegato->GetFileHash();
                if($oldFile !="")
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }

                $file=$uploadedFile->GetValue();
                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $fileHash=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }

        //Elimina il file precedentemente associato se viene impostato un url
        if($_REQUEST['url'] !="" && $allegato->GetFileHash() !="")
        {
            $fileHash="";
            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$allegato->GetFileHash();
                if($oldFile !="")
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non eliminato.",100);
        }

        $aggiornamento=substr($_REQUEST['aggiornamento'],0,10);
        if($aggiornamento=="") $aggiornamento=date("Y-m-d");
        
        //destinatari
        $destinatari=AA_Sier_Const::GetDestinatari();
        $newDestinatari=array();
        foreach($destinatari as $destinatario=>$descr)
        {
            if(isset($_REQUEST['destinatari_'.$destinatario]) && $_REQUEST['destinatari_'.$destinatario]==1) $newDestinatari[]=$destinatario;
        }
        //----

        //tipologia
        $tipi=AA_Sier_Const::GetTipoAllegati();
        $newTipo=array();
        foreach($tipi as $tipo=>$descr)
        {
            if(isset($_REQUEST['tipo_'.$tipo]) && $_REQUEST['tipo_'.$tipo]==1) $newTipo[]=$tipo;
        }
        //--------------

        $ordine=0;
        if(isset($_REQUEST['ordine']) && $_REQUEST['ordine']>0) $ordine=$_REQUEST['ordine'];
        $allegato=new AA_SierAllegati($_REQUEST['id_allegato'],$allegato->GetIdSier(),$_REQUEST['estremi'],$_REQUEST['url'],$fileHash,implode(",",$newTipo),$aggiornamento,implode(",",$newDestinatari),addslashes($ordine));
        
        if(!$object->UpdateAllegato($allegato, $this->oUser))
        {        
            $task->SetError(AA_Log::$lastErrorLog);
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore nell'aggiornamento dell'allegato. (".AA_Log::$lastErrorLog.")</error>";
            $task->SetLog($sTaskLog);

            return false;       
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Allegato aggiornato con successo.";
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task aggiorna allegato
    public function Task_Update_OC_ComuneRendicontiAllegati($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("L'utente corrente non può accedere come utente comunale",false);
            return false;
        }

        $object=new AA_Sier($_SESSION['oc_sier_object']);
        if(!$object->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Oggetto SIER non valido.",false);
            return false;
        }

        $operatore=AA_SierOperatoreComunale::GetInstance();
        if(!$operatore->IsValid())
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Operatore non valido.",false);
            return false;
        }

        $comune=$object->GetComune($operatore->GetOperatoreComunaleComune());
        if(!($comune instanceof AA_SierComune))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Comune non valido.",false);
            return false;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI)==0)
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError("Modifica rendiconti non abilitata.",false);
            return false;
        }

        $rendiconti=$comune->GetRendiconti(true);

        $uploadedFile = AA_SessionFileUpload::Get("NewAllegatoDoc");

        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);

            //Elimina il file temporaneo
            if($uploadedFile->isValid())
            {   
                $file=$uploadedFile->GetValue();
                if(file_exists($file['tmp_name']))
                {
                    if(!unlink($file['tmp_name']))
                    {
                        AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                    }
                }
            }     
        
            return true;
        }


        if($uploadedFile->isValid()) 
        {
            $file=$uploadedFile->GetValue();
            //------------  controlli file  ------------
            if($file['type'] != "application/pdf")
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);  
                }
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("E' possibile caricare esclusivametne file in formato pdf, eventualmente firmati digitalmente in modalita' pades.",false);
                return false;    
            }

            if($file['size'] > 1024*1024*5)
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - Errore nella rimozione del file temporaneo. ".$file['tmp_name'],100);
                }
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("E' possibile caricare esclusivamente file in formato pdf, con dimensione massima di 4 megabyte.",false);
                return false;      
            }
            //---------------------------------------------

            $storage=AA_Storage::GetInstance($this->oUser);
            if($storage->IsValid())
            {
                //Se l'allegato era sullo storage lo elimina
                $oldFile=$_REQUEST['file'];
                if($oldFile !="")
                {
                    if(!$storage->DelFile($oldFile))
                    {
                        AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$oldFile,100);
                    }

                    if(isset($rendiconti['ras']['allegati'][$_REQUEST['file']]))
                    {
                        unset($rendiconti['ras']['allegati'][$_REQUEST['file']]);
                    }
                }

                $storageFile=$storage->Addfile($file['tmp_name'],$file['name'],$file['type'],1);
                if($storageFile->IsValid())
                {
                    $_REQUEST['file']=$storageFile->GetFileHash();
                }
                else
                {
                    AA_Log::Log(__METHOD__." - errore nell'aggiunta allo storage. file non salvato.",100);
                }
            }
            else AA_Log::Log(__METHOD__." - storage non inizializzato. file non salvato.",100);

            //Elimina il file temporaneo
            if(file_exists($file['tmp_name']))
            {
                if(!unlink($file['tmp_name']))
                {
                    AA_Log::Log(__METHOD__." - errore nella rimozione del file: ".$file['tmp_name'],100);
                }
            }
        }
        else
        {
            if(!isset($_REQUEST['file']) || $_REQUEST['file']=="")
            {
                $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
                $task->SetError("Occorre selezionare un file da caricare.",false);
                return false;  
            }
        }

        $aggiornamento=substr($_REQUEST['aggiornamento'],0,10);
        if($aggiornamento=="") $aggiornamento=date("Y-m-d");
        
        if(!is_array($rendiconti['ras']['allegati'])) $rendiconti['ras']['allegati']=array();

        $rendiconti['ras']['allegati'][$_REQUEST['file']]=array('estremi'=>trim($_REQUEST['estremi']),"aggiornamento"=>$_REQUEST['aggiornamento'],"file"=>$_REQUEST['file']);

        $comune->SetRendiconti($rendiconti);
        if(!$object->UpdateComune($comune,$this->oUser,"Modifica rendiconti - modifica/aggiunta allegato (".$_REQUEST['estremi'].") - operatore: ".$operatore->GetOperatoreComunaleCf()))
        {
            $task->SetStatus(AA_GenericTask::AA_STATUS_FAILED);
            $task->SetError(AA_Log::$lastErrorLog,false);
            return false;            
        }

        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        $task->SetContent("Dati aggiornati con successo.",false);

        return true;
    }

    //Task elimina allegato
    public function Task_DeleteSierAllegato($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<=0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return true;
        }

        $allegato=$object->GetAllegato($_REQUEST['id_allegato'],$this->oUser);
        if($allegato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo allegato non valido (".$_REQUEST['id_allegato'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(!$object->DeleteAllegato($allegato))
        {   
            $task->SetError("Errore durante l'eliminazione dell'allegato: ".$allegato->GetEstremi());
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore durante l'eliminazione dell'allegato: ".$allegato->GetEstremi()."</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Allegato eliminato con successo.";
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task elimina comune
    public function Task_DeleteSierComune($task)
    {
        //AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<=0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return true;
        }

        $comune=$object->GetComune($_REQUEST['id_comune']);
        if($comune==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo comune non valido (".$_REQUEST['id_comune'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        
        if(!$object->DeleteComune($comune))
        {   
            $task->SetError("Errore durante l'eliminazione del Comune: ".$comune->GetProp("denominazione"));
            $sTaskLog="<status id='status'>-1</status><error id='error'>Errore durante l'eliminazione del Comune: ".$comune->GetProp("denominazione")."</error>";
            $task->SetLog($sTaskLog);
            
            return false;
        }
        
        $sTaskLog="<status id='status'>0</status><content id='content'>";
        $sTaskLog.= "Comune eliminato con successo.";
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task modifica allegato
    public function Task_GetSierModifyAllegatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $allegato=$object->GetAllegato($_REQUEST['id_allegato'],$this->oUser);
        if($allegato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo allegato non valido (".$_REQUEST['id_allegato'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierModifyAllegatoDlg($object,$allegato)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task copia allegato
    public function Task_GetSierCopyAllegatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid())
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $allegato=$object->GetAllegato($_REQUEST['id_allegato'],$this->oUser);
        if($allegato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo allegato ca clonare non valido (".$_REQUEST['id_allegato'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierCopyAllegatoDlg($object,$allegato)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task sier trash coalizione
    public function Task_GetSierTrashCoalizioneDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<= 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo coalizione non valido (".$_REQUEST['id_coalizione'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierTrashCoalizioneDlg($object,$coalizione)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task sier trash lista
    public function Task_GetSierTrashListaDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<= 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $coalizione=$object->GetCoalizione($_REQUEST['id_coalizione']);
        if($coalizione==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Coalizione non valido (".$_REQUEST['id_coalizione'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $liste=$coalizione->GetListe();
        if(!isset($liste[$_REQUEST['id_lista']]))
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo Lista non valido (".$_REQUEST['id_lista'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }
        $lista=$liste[$_REQUEST['id_lista']];

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierTrashListaDlg($object,$coalizione,$lista)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task trash allegato
    public function Task_GetSierTrashAllegatoDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<= 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $allegato=$object->GetAllegato($_REQUEST['id_allegato'],$this->oUser);
        if($allegato==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo allegato non valido (".$_REQUEST['id_allegato'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierTrashAllegatoDlg($object,$allegato)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task trash allegato
    public function Task_GetSierTrashComuneDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $object= new AA_Sier($_REQUEST['id'],$this->oUser);
        
        if(!$object->isValid() || $object->GetId()<= 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>Provvedimento non valido o permessi insufficienti.</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) == 0)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>L'utente corrente non ha i permessi per poter modificare l'elemento (".$object->GetId().").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $comune=$object->GetComune($_REQUEST['id_comune']);
        if($comune==null)
        {
            $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
            $sTaskLog.= "{}";
            $sTaskLog.="</content><error id='error'>identificativo comune non valido (".$_REQUEST['id_comune'].").</error>";
            $task->SetLog($sTaskLog);
        
            return false;
        }

        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $sTaskLog.= $this->Template_GetSierTrashComuneDlg($object,$comune)->toBase64();
        $sTaskLog.="</content>";
        $task->SetLog($sTaskLog);

        return true;
    }

    //Task filter dlg
    public function Task_GetSierPubblicateFilterDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $content=$this->TemplatePubblicateFilterDlg($_REQUEST);
        $sTaskLog.= base64_encode($content);
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }
    
    //Task filter dlg
    public function Task_GetSierBozzeFilterDlg($task)
    {
        AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
        
        $sTaskLog="<status id='status'>0</status><content id='content' type='json' encode='base64'>";
        $content=$this->TemplateBozzeFilterDlg($_REQUEST);
        $sTaskLog.= base64_encode($content);
        $sTaskLog.="</content>";
        
        $task->SetLog($sTaskLog);
        
        return true;
    }

     //Task filter comune dlg
     public function Task_GetSierComuneFilterDlg($task)
     {
         AA_Log::Log(__METHOD__."() - task: ".$task->GetName());
         
         $object= new AA_Sier($_REQUEST['id'],$this->oUser);
         if(!$object->isValid())
         {
             $sTaskLog="<status id='status'>-1</status><content id='content' type='json'>";
             $sTaskLog.= "{}";
             $sTaskLog.="</content><error id='error'>Elemento non valido o permessi insufficienti.</error>";
             $task->SetLog($sTaskLog);
         
             return false;
         }

         $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
         $task->SetContent($this->Template_GetSierComuneFilterDlg($object,$_REQUEST),true);
         
         return true;
     }
    
    //Task NavBarContent
    public function Task_GetNavbarContent($task)
    {
        if(!$this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $_REQUEST['section']=static::AA_UI_PREFIX."_".static::AA_UI_PUBBLICATE_BOX;
        }
        
        return $this->Task_GetGenericNavbarContent($task,$_REQUEST);
    }
    
    //Template filtro di ricerca
    public function TemplatePubblicateFilterDlg($params=array())
    {
        //Valori runtime
        $formData=array("id_assessorato"=>$params['id_assessorato'],"id_direzione"=>$params['id_direzione'],"struct_desc"=>$params['struct_desc'],"id_struct_tree_select"=>$params['id_struct_tree_select'],"descrizione"=>$params['descrizione'],"nome"=>$params['nome'],"cestinate"=>$params['cestinate'],"Tipo"=>$params['Tipo'],"Estremi"=>$params['Estremi']);
        
        //Valori default
        if($params['struct_desc']=="") $formData['struct_desc']="Qualunque";
        if($params['id_assessorato']=="") $formData['id_assessorato']=0;
        if($params['id_direzione']=="") $formData['id_direzione']=0;
        if($params['id_servizio']=="") $formData['id_servizio']=0;
        if($params['cestinate']=="") $formData['cestinate']=0;
        if($params['revisionate']=="") $formData['revisionate']=0;
        if($params['Tipo']=="") $formData['Tipo']=0;

        //Valori reset
        $resetData=array("id_assessorato"=>0,"id_direzione"=>0,"id_servizio"=>0, "struct_desc"=>"Qualunque","id_struct_tree_select"=>"","descrizione"=>"","nome"=>"","cestinate"=>0,"revisionate"=>0,"Estremi"=>"", "Tipo"=>0);
        
        //Azioni da eseguire dopo l'applicazione del filtro
        $applyActions="module.refreshCurSection()";
        
        $dlg = new AA_GenericFilterDlg(static::AA_UI_PREFIX."_Pubblicate_Filter", "Parametri di ricerca per le schede pubblicate",$this->GetId(),$formData,$resetData,$applyActions);
        
        $dlg->SetHeight(580);
                
        //Cestinate
        $dlg->AddSwitchBoxField("cestinate","Cestino",array("onLabel"=>"mostra","offLabel"=>"nascondi","bottomLabel"=>"*Mostra/nascondi le schede cestinate."));
      
        //Revisionate
        //$dlg->AddSwitchBoxField("revisionate","Revisionate",array("onLabel"=>"mostra","offLabel"=>"nascondi","bottomLabel"=>"*Mostra/nascondi le schede revisionate."));
        
        //oggetto
        $dlg->AddTextField("nome","Oggetto",array("bottomLabel"=>"*Filtra in base all'oggetto del elemento/accordo.", "placeholder"=>"Oggetto..."));
        
        //Struttura
        $dlg->AddStructField(array("targetForm"=>$dlg->GetFormId()),array("select"=>true),array("bottomLabel"=>"*Filtra in base alla struttura controllante."));
        
        //tipo
        /*
        $selectionChangeEvent="try{AA_MainApp.utils.getEventHandler('onTipoProvSelectChange','".$this->id."','".$this->id."_Field_Tipo')}catch(msg){console.error(msg)}";
        $options=array();
        $options[0]="Qualunque";
        foreach(AA_Sier_Const::GetListaTipologia() as $key=>$value)
        {
            $options[]=array("id"=>$key,"value"=>$value);
        }
        $dlg->AddSelectField("Tipo","Tipo",array("bottomLabel"=>"*filtra in base al tipo di elemento","placeholder"=>"Scegli una voce...","options"=>$options));

        //descrizione
        $dlg->AddTextField("descrizione","Descrizione",array("bottomLabel"=>"*Filtra in base alla descrizione del elemento/accordo.", "placeholder"=>"Descrizione..."));

        //Estremi elemento
        $dlg->AddTextField("Estremi","Estremi",array("bottomLabel"=>"*Filtra in base agli estremi del elemento/accordo.", "placeholder"=>"Estremi..."));*/
        
        $dlg->SetApplyButtonName("Filtra");

        return $dlg->GetObject();
    }
    
    //Template filtro di ricerca
    public function TemplateBozzeFilterDlg($params=array())
    {
        //Valori runtime
        $formData=array("id_assessorato"=>$params['id_assessorato'],"id_direzione"=>$params['id_direzione'],"struct_desc"=>$params['struct_desc'],"id_struct_tree_select"=>$params['id_struct_tree_select'],"descrizione"=>$params['descrizione'],"nome"=>$params['nome'],"cestinate"=>$params['cestinate'],"Tipo"=>$params['Tipo'],"Estremi"=>$params['Estremi']);
        
        //Valori default
        if($params['struct_desc']=="") $formData['struct_desc']="Qualunque";
        if($params['id_assessorato']=="") $formData['id_assessorato']=0;
        if($params['id_direzione']=="") $formData['id_direzione']=0;
        if($params['id_servizio']=="") $formData['id_servizio']=0;
        if($params['cestinate']=="") $formData['cestinate']=0;
        if($params['Tipo']=="") $formData['Tipo']=0;

        //Valori reset
        $resetData=array("id_assessorato"=>0,"id_direzione"=>0,"id_servizio"=>0, "struct_desc"=>"Qualunque","id_struct_tree_select"=>"","descrizione"=>"","nome"=>"","cestinate"=>0,"revisionate"=>0,"Estremi"=>"", "Tipo"=>0);
        
        //Azioni da eseguire dopo l'applicazione del filtro
        $applyActions="module.refreshCurSection()";
        
        $dlg = new AA_GenericFilterDlg(static::AA_UI_PREFIX."_Pubblicate_Filter", "Parametri di ricerca per le schede pubblicate",$this->GetId(),$formData,$resetData,$applyActions);
        
        $dlg->SetHeight(580);
                
        //Cestinate
        $dlg->AddSwitchBoxField("cestinate","Cestino",array("onLabel"=>"mostra","offLabel"=>"nascondi","bottomLabel"=>"*Mostra/nascondi le schede cestinate."));
      
        //Revisionate
        //$dlg->AddSwitchBoxField("revisionate","Revisionate",array("onLabel"=>"mostra","offLabel"=>"nascondi","bottomLabel"=>"*Mostra/nascondi le schede revisionate."));
        
        //oggetto
        $dlg->AddTextField("nome","Oggetto",array("bottomLabel"=>"*Filtra in base all'oggetto del elemento/accordo.", "placeholder"=>"Oggetto..."));
        
        //Struttura
        $dlg->AddStructField(array("targetForm"=>$dlg->GetFormId()),array("select"=>true),array("bottomLabel"=>"*Filtra in base alla struttura controllante."));
        
        //tipo
        /*$selectionChangeEvent="try{AA_MainApp.utils.getEventHandler('onTipoProvSelectChange','".$this->id."','".$this->id."_Field_Tipo')}catch(msg){console.error(msg)}";
        $options=array();
        $options[0]="Qualunque";
        foreach(AA_Sier_Const::GetListaTipologia() as $key=>$value)
        {
            $options[]=array("id"=>$key,"value"=>$value);
        }
        $dlg->AddSelectField("Tipo","Tipo",array("bottomLabel"=>"*filtra in base al tipo di elemento","placeholder"=>"Scegli una voce...","options"=>$options));*/

        //descrizione
        $dlg->AddTextField("descrizione","Descrizione",array("bottomLabel"=>"*Filtra in base alla descrizione del elemento/accordo.", "placeholder"=>"Descrizione..."));

        //Estremi elemento
        $dlg->AddTextField("Estremi","Estremi",array("bottomLabel"=>"*Filtra in base agli estremi del elemento/accordo.", "placeholder"=>"Estremi..."));

        $dlg->SetApplyButtonName("Filtra");

        return $dlg->GetObject();
    }
    
    //Funzione di esportazione in pdf (da specializzare)
    public function Template_PdfExport($ids=array(),$toBrowser=true,$title="Pubblicazione ai sensi dell'art.23 del d.lgs. 33/2013",$rowsForPage=20,$index=false,$subTitle="")
    {
        return $this->Template_GenericPdfExport($ids,$toBrowser,$title,"Template_SierPdfExport", $rowsForPage, $index,$subTitle);
    }

    //funzione di aiuto
    public function Task_AMAAI_Start($task)
    {
        $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
        
        $task->SetContent($this->Template_GetSierHelpDlg(),true);
        
        $help_url="";
        $action='AA_MainApp.utils.callHandler("pdfPreview", { url: this.taskManager + "?task=PdfExport&section=" + this.curSection.id }, this.id);';
        
        return true;

    }

    //Template pdf export single
    public function Template_SierPdfExport($id="", $parent=null,$object=null,$user=null)
    {
        if(!($object instanceof AA_Sier))
        {
            return "";
        }
        
        if($id=="") $id="Template_SierPdfExport_".$object->GetId();

        return new AA_SierPublicReportTemplateView($id,$parent,$object);
    }

    //Template dettaglio allegati
    public function TemplateDettaglio_Allegati($object=null,$id="", $canModify=false)
    {
        #documenti----------------------------------
        $curId=$id."_Layout_Allegati";
        $provvedimenti=new AA_JSON_Template_Layout($curId,array("type"=>"clean","gravity"=>4,"css"=>array("border-left"=>"1px solid gray !important;","border-top"=>"1px solid gray !important;")));

        $toolbar=new AA_JSON_Template_Toolbar($curId."_Toolbar_allegati",array("height"=>38, "css"=>array("background"=>"#dadee0 !important;")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));

        $toolbar->AddElement(new AA_JSON_Template_Generic($curId."_Toolbar_Allegati_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Allegati e link</span>", "align"=>"center")));

        if($canModify)
        {
            //Pulsante di aggiunta documento
            $add_documento_btn=new AA_JSON_Template_Generic($curId."_AddAllegato_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-file-plus",
                "label"=>"Aggiungi",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi allegato o link",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewAllegatoDlg\", params: [{id: ".$object->GetId()."}]},'$this->id')"
            ));

            $toolbar->AddElement($add_documento_btn);
        }
        else 
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }

        $provvedimenti->AddRow($toolbar);

        $options_documenti=array();

        if($canModify)
        {
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Tipo</div>",array("content"=>"selectFilter")),"width"=>200, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>100,"css"=>array("text-align"=>"center"));
        }
        else
        {
            $options_documenti[]=array("id"=>"aggiornamento","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"width"=>100, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"tipoDescr","header"=>array("<div style='text-align: center'>Tipo</div>",array("content"=>"selectFilter")),"width"=>200, "css"=>array("text-align"=>"center"),"sort"=>"text");
            $options_documenti[]=array("id"=>"estremi","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text");
            $options_documenti[]=array("id"=>"ops", "header"=>"operazioni", "width"=>100,"css"=>array("text-align"=>"center"));
        }

        $documenti=new AA_JSON_Template_Generic($curId."_Allegati_Table",array("view"=>"datatable", "select"=>true,"scrollX"=>false,"css"=>"AA_Header_DataTable","columns"=>$options_documenti));

        $documenti_data=array();
        foreach($object->GetAllegati() as $id_doc=>$curDoc)
        {
            if($curDoc->GetUrl() == "")
            {
                $view='AA_MainApp.utils.callHandler("pdfPreview", {url: "storage.php?object='.$curDoc->GetFileHash().'"},"'.$this->id.'")';
                $view_icon="mdi-floppy";
            }
            else 
            {
                $view='AA_MainApp.utils.callHandler("wndOpen", {url: "'.$curDoc->GetUrl().'"},"'.$this->id.'")';
                $view_icon="mdi-eye";
            }
            
            $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyAllegatoDlg", params: [{id: "'.$object->GetId().'"},{id_allegato:"'.$curDoc->GetId().'"}]},"'.$this->id.'")';
            if($canModify) $ops="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='Vedi' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a><a class='AA_DataTable_Ops_Button' title='Modifica' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
            else $ops="<div class='AA_DataTable_Ops' style='justify-content: center'><a class='AA_DataTable_Ops_Button' title='Vedi' onClick='".$view."'><span class='mdi ".$view_icon."'></span></a></div>";
            $documenti_data[]=array("id"=>$id_doc,"estremi"=>$curDoc->GetEstremi(),"tipoDescr"=>$curDoc->GetTipoDescr(),"tipo"=>$curDoc->GetTipo(),"aggiornamento"=>$curDoc->GetAggiornamento(),"ops"=>$ops);
        }
        $documenti->SetProp("data",$documenti_data);
        if(sizeof($documenti_data) > 0) $provvedimenti->AddRow($documenti);
        else $provvedimenti->AddRow(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        #--------------------------------------
        
        return $provvedimenti;
    }

    //Template dettaglio giornate
    public function TemplateDettaglio_Giornate($object=null,$id="", $canModify=false)
    {
        #documenti----------------------------------
        $curId=$id."_Layout_Allegati";
        $giornate=new AA_JSON_Template_Layout($curId,array("type"=>"clean","gravity"=>2,"minWidth"=>400,"css"=>array("border-left"=>"1px solid gray !important;","border-top"=>"1px solid gray !important;")));

        $toolbar=new AA_JSON_Template_Toolbar($curId."_Toolbar_allegati",array("height"=>38, "css"=>array("background"=>"#dadee0 !important;")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));

        $toolbar->AddElement(new AA_JSON_Template_Generic($curId."_Toolbar_Allegati_Title",array("view"=>"label","label"=>"<span style='color:#003380'>Giornate</span>", "align"=>"center")));

        if($canModify)
        {
            //Pulsante di aggiunta documento
            $add_giornata_btn=new AA_JSON_Template_Generic($curId."_AddGiornata_btn",array(
               "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-file-plus",
                "label"=>"Aggiungi",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi una giornata",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierAddNewGiornataDlg\", params: [{id: ".$object->GetId()."}]},'$this->id')"
            ));

            $toolbar->AddElement($add_giornata_btn);
        }
        else 
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }

        $giornate->AddRow($toolbar);

        $options_giornate=array();

        if($canModify)
        {
            $options_giornate[]=array("id"=>"data", "header"=>"Data", "fillspace"=>true,"css"=>array("text-align"=>"left"));
            $options_giornate[]=array("id"=>"orario_apertura", "header"=>"Apertura", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"orario_chiusura", "header"=>"Chiusura", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"affluenza", "header"=>"Affluenza", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"risultati", "header"=>"Risultati", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"ops", "header"=>"operazioni", "width"=>100,"css"=>array("text-align"=>"center"));
        }
        else
        {
            $options_giornate[]=array("id"=>"data", "header"=>"Data", "fillspace"=>true,"css"=>array("text-align"=>"left"));
            $options_giornate[]=array("id"=>"orario_apertura", "header"=>"Apertura", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"orario_chiusura", "header"=>"Chiusura", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"affluenza", "header"=>"Affluenza", "width"=>90,"css"=>array("text-align"=>"center"));
            $options_giornate[]=array("id"=>"risultati", "header"=>"Risultati", "width"=>90,"css"=>array("text-align"=>"center"));
        }

        $lista=new AA_JSON_Template_Generic($curId."_Giornate_Table",array("view"=>"datatable", "headerRowHeight"=>28, "select"=>true,"scrollX"=>false,"css"=>"AA_Header_DataTable","columns"=>$options_giornate));

        $giornate_data=array();
        foreach($object->GetGiornate() as $id_giornata=>$curFlags)
        { 
            $trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashGiornataDlg", params: [{id: "'.$object->GetId().'"},{data:"'.$id_giornata.'"}]},"'.$this->id.'")';
            $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierModifyGiornataDlg", params: [{id: "'.$object->GetId().'"},{data:"'.$id_giornata.'"}]},"'.$this->id.'")';
            if($canModify) $ops="<div class='AA_DataTable_Ops'><a class='AA_DataTable_Ops_Button' title='Modifica' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina' onClick='".$trash."'><span class='mdi mdi-trash-can'></span></a></div>";
            else $ops="<div class='AA_DataTable_Ops' style='justify-content: center'>&nbsp;</div>";
            $affluenza="No";
            if($curFlags['affluenza']==1) $affluenza="Si";
            $risultati="No";
            if($curFlags['risultati']==1) $risultati="Si";
            $giornate_data[]=array("data"=>$id_giornata,"affluenza"=>$affluenza,"risultati"=>$risultati,"orario_apertura"=>$curFlags['orario_apertura'],"orario_chiusura"=>$curFlags['orario_chiusura'],"ops"=>$ops);
        }
        $lista->SetProp("data",$giornate_data);
        if(sizeof($giornate_data) > 0) $giornate->AddRow($lista);
        else $giornate->AddRow(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        #--------------------------------------
        
        return $giornate;
    }

    //Template dlg modify user
    public function Template_GetSierComuneDatiGeneraliViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneDatiGeneraliViewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['id_circoscrizione']=$comune->GetProp('id_circoscrizione');
            $form_data['denominazione']=$comune->GetProp('denominazione');
            $form_data['pec']=$comune->GetProp('pec');
            $form_data['contatti']=$comune->GetProp('contatti');
            $form_data['indirizzo']=$comune->GetProp('indirizzo');
    
            $wnd=new AA_GenericFormDlg($id, "Dati generali Comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(120);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(800);
            $wnd->SetHeight(450);
            
            //circoscrizione
            $circoscrizioni=AA_Sier_Const::GetCircoscrizioni();
            foreach($circoscrizioni as $key=>$value)
            {
                $options[]=array("id"=>$key,"value"=>$value);
            }
            $wnd->AddSelectField("id_circoscrizione","Circoscrizione",array("gravity"=>1,"required"=>true, "validateFunction"=>"IsSelected","bottomLabel"=>"*Seleziona la circoscrizione di cui fa parte il comune.","options"=>$options),false);
    
            //denominazione
            $wnd->AddTextField("denominazione","Denominazione",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Denominazione del comune"));
    
            //pec
            $wnd->AddTextField("pec","Pec",array("required"=>true,"gravity"=>1,"validateFunction"=>"IsMail", "bottomLabel"=>"*Indirizzo di posta certificata."));
    
            //indirizzo
            $wnd->AddTextField("indirizzo","Indirizzo",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Via e numero civico."));
    
            //contatti
            $wnd->AddTextareaField("contatti","Note e contatti",array("gravity"=>1, "bottomLabel"=>"*Eventuali informazioni di recapito utili (per andare a capo premere ctrl+invio)."));
    
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("UpdateSierComuneDatiGenerali");
            
            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);

            return $wnd;
        }
    }

    //Template dlg modify user
    public function Template_GetSierComuneComunicazioniViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneComunicazioniViewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Comunicazioni operazioni uffici elettorali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Comunicazioni operazioni uffici elettorali", $this->id);

        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
 
        $form_data=array();
        $sections=array();
        $inizio=false;

        $admin=false;
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER))
        {
            $admin=true;
        }

        //giornate
        $now=date("Y-m-d");
        foreach($giornate as $giornata=>$curValues)
        {
            $readonly=true;
            if($giornata<=$now || $admin) $readonly=false;
            if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF) && !$admin) $readonly=true;

            $label_inizio="Apertura operazioni uffici elettorali di sezione";
            if(sizeof($sections)==0) $label_inizio="Avvenuta costituzione degli uffici elettorali di sezione e riscontro materiale elettorale";
            $form_data[$giornata."_inizio"]=0;
            if(isset($comunicazioni[$giornata]['inizio']) && $comunicazioni[$giornata]['inizio']>0) $form_data[$giornata."_inizio"]=1;
            $form_data[$giornata."_fine"]=0;
            if(isset($comunicazioni[$giornata]['fine']) && $comunicazioni[$giornata]['fine']>0) $form_data[$giornata."_fine"]=1;

            $section=new AA_FieldSet($id."_Section_".$giornata,"Comunicazioni per la giornata del ".$giornata);
            $section->AddCheckBoxField($giornata."_inizio", $label_inizio,array("readonly"=>$readonly));
            $section->AddCheckBoxField($giornata."_fine", "Chiusura operazioni uffici elettorali di sezione",array("readonly"=>$readonly));
            $sections[]=$section;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
    
            $wnd=new AA_GenericFormDlg($id, "Comunicazioni operazioni uffici elettorali", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(600);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(700);
            $wnd->SetHeight(700);
            
            foreach($sections as $curSection)
            {
                $wnd->AddGenericObject($curSection);
            }
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_PREF) && !$admin) $wnd->SetApplyButtonName("Chiudi");
            $wnd->SetSaveTask("UpdateSierComuneComunicazioni");
            
            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Comunicazioni uffici elettorali", $this->id);

            return $wnd;
        }
    }

    //Template dlg add new affluenza comune
    public function Template_GetSierOCAffluenzaAddNewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCAffluenzaAddNewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Nuovo dato affluenza", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Nuovo dato affluenza", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['ore_12']=0;
            $form_data['ore_19']=0;
            $form_data['ore_22']=0;

            $affluenza=$comune->GetAffluenza(true);
            if(sizeof($affluenza)>0)
            {
                foreach($affluenza as $giornata=>$values)
                {
                    $form_data['giornata']=$giornata;
                    $form_data['ore_12']=$values['ore_12'];
                    $form_data['ore_19']=$values['ore_19'];
                    $form_data['ore_22']=$values['ore_22'];
                }
            }
            $wnd=new AA_GenericFormDlg($id, "Nuovo dato affluenza", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(120);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(450);
            
            $giornate=$object->GetGiornate();
            if(sizeof($giornate)>0)
            {
                //giornate
                $data=array();
                foreach($giornate as $curData=>$curGiornata)
                {
                    if($curGiornata["affluenza"]>0)
                    {
                        $data[]=array("id"=>$curData,"value"=>$curData);
                    }
                }
                if(sizeof($data)==0)
                {
                    $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
                    $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));

                    return $wnd;
                }
                $wnd->AddSelectField("giornata","Giornata",array("gravity"=>1,"required"=>true, "bottomLabel"=>"*Seleziona la giornata di riferimento.","options"=>$data));
        
                //votanti ore 12
                $wnd->AddTextField("ore_12","Votanti ore 12",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 12"));
                //votanti ore 19
                $wnd->AddTextField("ore_19","Votanti ore 19",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 19"));
                //votanti ore 22
                $wnd->AddTextField("ore_22","Votanti ore 22",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 22"));
                            
                $wnd->EnableCloseWndOnSuccessfulSave();
                $wnd->enableRefreshOnSuccessfulSave();

                $wnd->SetSaveTask("Update_OC_ComuneAffluenza");
            }
            else
            {
                $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
                $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));
            }
            
            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg add new affluenza comune
    public function Template_GetSierComuneAffluenzaAddNewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneAffluenzaAddNewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Nuovo dato affluenza", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Nuovo dato affluenza", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['ore_12']=0;
            $form_data['ore_19']=0;
            $form_data['ore_22']=0;

            $wnd=new AA_GenericFormDlg($id, "Nuovo dato affluenza", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(120);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(450);
            
            $giornate=$object->GetGiornate();
            if(sizeof($giornate)>0)
            {
                //giornate
                $data=array();
                foreach($giornate as $curData=>$curGiornata)
                {
                    if($curGiornata["affluenza"]>0)
                    {
                        $data[]=array("id"=>$curData,"value"=>$curData);
                    }
                }
                if(sizeof($data)==0)
                {
                    $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
                    $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));

                    return $wnd;
                }
                $wnd->AddSelectField("giornata","Giornata",array("gravity"=>1,"required"=>true, "bottomLabel"=>"*Seleziona la giornata di riferimento.","options"=>$data));
        
                //votanti ore 12
                $wnd->AddTextField("ore_12","Votanti ore 12",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 12"));
                //votanti ore 19
                $wnd->AddTextField("ore_19","Votanti ore 19",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 19"));
                //votanti ore 22
                $wnd->AddTextField("ore_22","Votanti ore 22",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 22"));
                            
                $wnd->EnableCloseWndOnSuccessfulSave();
                if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
                if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);

                $wnd->SetSaveTask("AddNewSierComuneAffluenza");
            }
            else
            {
                $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
                $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));
            }
            
            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify affluenza comune
    public function Template_GetSierComuneAffluenzaModifyDlg($object=null,$comune=null,$giornata="")
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneAffluenzaModifyDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica affluenza", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica affluenza", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            
            $affluenza=$comune->GetAffluenza(true);
            $form_data['giornata']=$giornata;
            if(isset($affluenza[$giornata]))
            {
                $form_data['ore_12']=$affluenza[$giornata]['ore_12'];
                $form_data['ore_19']=$affluenza[$giornata]['ore_19'];
                $form_data['ore_22']=$affluenza[$giornata]['ore_22'];
            }
    
            $wnd=new AA_GenericFormDlg($id, "Modifica affluenza", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(120);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(450);
            
            $giornate=$object->GetGiornate();
            if(sizeof($giornate)>0)
            {
                //giornate
                $data=array();
                foreach($giornate as $giornata=>$curGiornata)
                {
                    if($curGiornata["affluenza"]>0)
                    {
                        $data[]=array("id"=>$giornata,"value"=>$giornata);
                    }
                }
                if(sizeof($data)==0)
                {
                    $wnd = new AA_GenericWindowTemplate($id, "Modifica affluenza", $this->id);
                    $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));

                    return $wnd;
                }
                $wnd->AddSelectField("giornata","Giornata",array("gravity"=>1,"required"=>true, "validateFunction"=>"IsSelected","bottomLabel"=>"*Seleziona la giornata di riferimento.","options"=>$data));

                //votanti ore 12
                $wnd->AddTextField("ore_12","Votanti ore 12",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 12"));
                //votanti ore 19
                $wnd->AddTextField("ore_19","Votanti ore 19",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 19"));
                //votanti ore 22
                $wnd->AddTextField("ore_22","Votanti ore 22",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti ore 22"));
                            
                $wnd->EnableCloseWndOnSuccessfulSave();
                if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
                if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
                $wnd->SetSaveTask("UpdateSierComuneAffluenza");
            }
            else
            {
                $wnd = new AA_GenericWindowTemplate($id, "Modifica affluenza", $this->id);
                $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti giornate per le quali inserire l'affluenza.")));
            }
            
            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Affluenza", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify user
    public function Template_OC_DatiGeneraliModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneDatiGeneraliModifyDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Dati generali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['id_circoscrizione']=$comune->GetProp('id_circoscrizione');
            $form_data['denominazione']=$comune->GetProp('denominazione');
            $form_data['pec']=$comune->GetProp('pec');
            $form_data['contatti']=$comune->GetProp('contatti');
            $form_data['indirizzo']=$comune->GetProp('indirizzo');

            $wnd=new AA_GenericFormDlg($id, "Dati generali", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(120);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(800);
            $height=0;

            if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_DATIGENERALI)>0)
            {
                $height+=350;
                //pec
                $wnd->AddTextField("pec","Pec",array("required"=>true,"gravity"=>1,"validateFunction"=>"IsMail", "bottomLabel"=>"*Indirizzo di posta certificata."));

                //indirizzo
                $wnd->AddTextField("indirizzo","Indirizzo",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Via e numero civico."));

                //contatti
                $wnd->AddTextareaField("contatti","Note e contatti",array("gravity"=>1, "bottomLabel"=>"*Eventuali informazioni di recapito utili."));
            }
                    
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneDatiGenerali");
            $wnd->SetHeight($height);

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Dati generali", $this->id);

            return $wnd;
        }
    }

    //Template dlg modify user
    public function Template_OC_CorpoElettoraleModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneDatiGeneraliModifyDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Sezioni e corpo elettorale", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Sezioni e corpo elettorale", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['sezioni']=$comune->GetProp('sezioni');
            $form_data['sezioni_ospedaliere']=$comune->GetProp('sezioni_ospedaliere');
            $form_data['sezioni_ordinarie']=$comune->GetProp('sezioni_ordinarie');
            $form_data['luoghi_cura_sub100']=$comune->GetProp('luoghi_cura_sub100');
            $form_data['luoghi_cura_over100']=$comune->GetProp('luoghi_cura_over100');
            $form_data['luoghi_detenzione']=$comune->GetProp('luoghi_detenzione');
            $form_data['elettori_m']=$comune->GetProp('elettori_m');
            $form_data['elettori_f']=$comune->GetProp('elettori_f');
            $form_data['elettori_esteri_m']=$comune->GetProp('elettori_esteri_m');
            $form_data['elettori_esteri_f']=$comune->GetProp('elettori_esteri_f');

            $wnd=new AA_GenericFormDlg($id, "Sezioni e corpo elettorale", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1024);
            $height=0;

            //Dati corpo elettorale
            if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_CORPO_ELETTORALE)>0)
            {
                $height+=640;
                $section=new AA_FieldSet($id."_Section_DatiSezione","Sezioni elettorali","",2);
                $section->AddTextField("sezioni_ordinarie", "Sezioni ordinarie", array("required"=>true,"labelWidth"=>150,"bottomPadding"=>32,"bottomLabel"=>"*Escluse le ospedaliere","validateFunction"=>"IsInteger"));
                $section->AddTextField("sezioni_ospedaliere", "Sezioni ospedaliere", array("required"=>true,"labelWidth"=>150,"bottomPadding"=>32,"validateFunction"=>"IsInteger"));
                $section->AddTextField("sezioni", "Sezioni totali", array("required"=>true,"labelWidth"=>150,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Ordinarie + Ospedaliere"));
                $section->AddSpacer();
                $wnd->AddGenericObject($section);

                $section=new AA_FieldSet($id."_Section_DatiElettori","Corpo elettorale","",3);
                $section->AddTextField("elettori_m", "Elettori maschi", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Totale elettori maschi (compresi i residenti all'estero)."));
                $section->AddTextField("elettori_esteri_m", "Elettori maschi residenti all'estero", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di elettori maschi residenti all'estero."));
                $section->AddTextField("elettori_f", "Elettrici femmine", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Totale elettrici femmine (comprese le residenti all'estero)."));
                $section->AddTextField("elettori_esteri_f", "Elettrici femmine residenti all'estero", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di elettrici residenti all'estero."));
                $wnd->AddGenericObject($section,false);

                $section=new AA_FieldSet($id."_Section_DatiSezione","Luoghi di cura");
                $section->AddTextField("luoghi_cura_sub100", "con meno di 100 posti letto", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger"));
                $section->AddTextField("luoghi_cura_over100", "con più di 100 posti letto", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger"),false);

                $wnd->AddGenericObject($section);

                $wnd->AddTextField("luoghi_detenzione", "Luoghi di detenzione", array("required"=>true,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di luoghi di detenzione."));
                $wnd->AddSpacer(false);
            }
                    
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneCorpoElettorale");
            $wnd->SetHeight($height);

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id, "Dati generali e corpo elettorale", $this->id);
            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_VoidContent",array("template"=>"<div style='width:100%,height:100%;display:flex;justify-contyent:center;align-items:center'>La modifica del corpo elettorale è disabilitata.</div>")));

            return $wnd;
        }
    }

    //Template dlg modify user
    public function Template_GetSierComuneCorpoElettoraleViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneCorpoElettoraleViewDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Sezioni e corpo elettorale", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Sezioni e corpo elettorale", $this->id);

        $form_data=array();
        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        $giornate=$object->GetGiornate();
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        $_45daysago=date('Y-m-d', strtotime($giornateKeys[0].' -45 days'));
        $_15daysago=date('Y-m-d', strtotime($giornateKeys[0].' -15 days'));

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $readonly=false;
        } 
        else $readonly=true;

        $section_corpo=new AA_FieldSet($id."_Section_Corpoelettorale","Certificazioni aggiornamento del corpo elettorale");
        $section_corpo->AddCheckBoxField("corpoelettorale_45", "Avvenuto aggiornamento al 45° giorno",array("labelWidth"=>350,"readonly"=>$readonly));
        $form_data['corpoelettorale_45']=0;
        if($comunicazioni["corpoelettorale_45"]>0) $form_data['corpoelettorale_45']=1;
        $section_corpo->AddCheckBoxField("corpoelettorale_15", "Avvenuto aggiornamento al 15° giorno",array("labelWidth"=>350,"readonly"=>$readonly),false);
        $form_data['corpoelettorale_15']=0;
        if($comunicazioni["corpoelettorale_15"]>0) $form_data['corpoelettorale_15']=1;
        
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['sezioni']=$comune->GetProp('sezioni');
            $form_data['sezioni_ospedaliere']=$comune->GetProp('sezioni_ospedaliere');
            $form_data['sezioni_ordinarie']=$comune->GetProp('sezioni_ordinarie');
            $form_data['luoghi_cura_sub100']=$comune->GetProp('luoghi_cura_sub100');
            $form_data['luoghi_cura_over100']=$comune->GetProp('luoghi_cura_over100');
            $form_data['luoghi_detenzione']=$comune->GetProp('luoghi_detenzione');
            $form_data['elettori_m']=$comune->GetProp('elettori_m');
            $form_data['elettori_f']=$comune->GetProp('elettori_f');
            $form_data['elettori_esteri_m']=$comune->GetProp('elettori_esteri_m');
            $form_data['elettori_esteri_f']=$comune->GetProp('elettori_esteri_f');

            $wnd=new AA_GenericFormDlg($id, "Sezioni e corpo elettorale Comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1024);
            $height=0;

            
            $height+=840;

            $wnd->AddGenericObject($section_corpo);

            $section=new AA_FieldSet($id."_Section_DatiSezione","Sezioni elettorali","",2);
            $section->AddTextField("sezioni_ordinarie", "Sezioni ordinarie", array("required"=>true,"readonly"=>$readonly,"labelWidth"=>150,"bottomPadding"=>32,"bottomLabel"=>"*Escluse le ospedaliere","validateFunction"=>"IsInteger"));
            $section->AddTextField("sezioni_ospedaliere", "Sezioni ospedaliere", array("required"=>true,"readonly"=>$readonly,"labelWidth"=>150,"bottomPadding"=>32,"validateFunction"=>"IsInteger"));
            $section->AddTextField("sezioni", "Sezioni totali", array("required"=>true,"labelWidth"=>150,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Ordinarie + Ospedaliere"));
            $section->AddGenericObject(new AA_JSON_Template_Template($id."_ElettoriTot",array("template"=>"<div style='display:flex; justify-content: start; align-items:center; border-top: 1px solid #dedede; height:100%'><span style='width: 200px'><b>Totale elettori</b>:</span><span>#tot_elettori#</span></div>","borderless"=>true,"data"=>array("tot_elettori"=>$comune->GetProp("elettori_m")+$comune->GetProp("elettori_f")))));
            $section->AddGenericObject(new AA_JSON_Template_Template($id."_ElettoriTot",array("template"=>"<div style='display:flex; justify-content: start; align-items:center; height:100%'><span style='width: 200px'><b>di cui residenti all'estero</b>:</span><span>#tot_elettori#</span></div>","borderless"=>true,"data"=>array("tot_elettori"=>$comune->GetProp("elettori_esteri_m")+$comune->GetProp("elettori_esteri_f")))));
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet($id."_Section_DatiElettori","Corpo elettorale","",3);
            $section->AddTextField("elettori_m", "Elettori maschi", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Totale elettori maschi (compresi i residenti all'estero)."));
            $section->AddTextField("elettori_esteri_m", "Elettori maschi residenti all'estero", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di elettori maschi residenti all'estero."));
            $section->AddTextField("elettori_f", "Elettrici femmine", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Totale elettrici femmine (comprese le residenti all'estero)."));
            $section->AddTextField("elettori_esteri_f", "Elettrici femmine residenti all'estero", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di elettrici residenti all'estero."));
            $wnd->AddGenericObject($section,false);

            $section=new AA_FieldSet($id."_Section_DatiSezione","Luoghi di cura");
            $section->AddTextField("luoghi_cura_sub100", "con meno di 100 posti letto", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger"));
            $section->AddTextField("luoghi_cura_over100", "con 100 o piu' posti letto", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger"),false);

            $wnd->AddGenericObject($section);

            $wnd->AddTextField("luoghi_detenzione", "Luoghi di detenzione", array("required"=>true,"readonly"=>$readonly,"bottomPadding"=>32,"validateFunction"=>"IsInteger","bottomLabel"=>"*Numero di luoghi di detenzione."));
            $wnd->AddSpacer(false);

            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("UpdateSierComuneCorpoElettorale");
            $wnd->SetHeight($height);

            return $wnd;    
        }
    }

    //Template layout risultati
    public function Template_GetSierComuneRisultatiViewLayout($object=null,$comune=null,$id="")
    {
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $risultati=$comune->GetRisultati(true);
        $rows_fixed_height=50;

        $id.="_".static::AA_UI_LAYOUT_RISULTATI_COMUNALI;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        $multiview=new AA_JSON_Template_Multiview($id."_Multiview_".$object->GetId(),array(
            "type" => "clean",
            "css" => "AA_Detail_Content",
            "value" => $id."_RisultatiGeneraleBox")
        );

        //---------------------------- header --------------------------------
        $header = new AA_JSON_Template_Layout($id . "_Header" . "_".$object->GetId(), array("type" => "clean", "height" => 38, "css" => "AA_SectionContentHeader"));
        $canModify=false;
        $layout_tab=new AA_JSON_Template_Layout($id . "_Layout_TabBar_".$object->GetId(),array("type"=>"clean","minWidth"=>500));
        $gravity_tabbar=4;
        $layout_tab->AddCol(new AA_JSON_Template_Generic($id . "_TabBar_".$object->GetId(), array(
            "view" => "tabbar",
            "gravity"=>$gravity_tabbar,
            "borderless" => true,
            "value" => $id."_RisultatiGeneraleBox",
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_Multiview_".$object->GetId(),
            "options" => array(
                array("id"=>$id."_RisultatiGeneraleBox","value"=>"Risultati generali"),
                array("id"=>$id."_RisultatiCoalizioniBox","value"=>"Voti candidati Presidente"),
                array("id"=>$id."_RisultatiListeBox","value"=>"Voti Liste"),
                array("id"=>$id."_RisultatiPreferenzeBox","value"=>"Voti candidati Consiglio regionale"),
            )
        )));
        $header->AddCol($layout_tab);
        $layout->AddRow($header);
        //---------------------------------------------------------------------
        $layout->AddRow($multiview);
        
        $analisi=$object->AnalizeRisultati($risultati,$comune->GetProp("id_circoscrizione"),$comune);
        if($analisi[0]==true)
        {
            $color="orange";
            if($analisi[2]==true) $color="red";
            $onClick="AA_MainApp.utils.callHandler('dlg', {task:'GetSierAnalisiRisultatiDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')";
            $warning='<div><span class="mdi mdi-alert" style="color:'.$color.'"></span>&nbsp;<a href="#" onClick="'.$onClick.'">Sono presenti delle criticità, fai click qui per visualizzarle.</span></div>';
        }
        else
        {
            $warning='<div><span class="mdi mdi-check-circle" style="color:green"></span>&nbsp;<span>Le informazioni sono congruenti.</span></div>';
        }

        //--------------------------- Dati generali ----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiGeneraleBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning",array("view"=>"label","label"=>$warning,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiGenerali_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica dati generali dei risultati",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRisultatiGeneraliModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }

        $generaleLayout->addRow($toolbar);

        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:1%;'><div style='font-weight:700;width: 350px;'>#title#</div><div style='width: 150px; text-align: right;padding-right: 50px'>#value#</div></div>";
        
        //Sezioni scrutinate
        if(isset($risultati['sezioni_scrutinate']))
        {
            $value=$risultati['sezioni_scrutinate'];
        }
        else $value=0;

        $value.=" di ".$comune->GetProp("sezioni");
        $sezioni=new AA_JSON_Template_Template($id."_SezioniScrutinate",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Sezioni scrutinate:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //votanti maschi
        if(isset($risultati['votanti_m']))$value=$risultati['votanti_m'];
        else $value=0;
        $votanti_m=new AA_JSON_Template_Template($id."_VotantiM",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Votanti maschi:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //votanti femmine
        if(isset($risultati['votanti_f']))$value=$risultati['votanti_f'];
        else $value=0;
        $votanti_f=new AA_JSON_Template_Template($id."_VotantiF",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Votanti femmine:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        $riga=new AA_JSON_Template_Layout($id."_DatiGeneraliRow",array("css"=>array("border-bottom"=>"1px solid #dadee0 !important","type"=>"clean")));
        $riga->AddRow($sezioni);
        $riga->AddRow($votanti_m);
        $riga->AddRow($votanti_f);
        //$generaleLayout->AddRow($riga);

        //Voti contestati non assegnati (presidente)
        if(isset($risultati['voti_contestati_na_pre']))$value=$risultati['voti_contestati_na_pre'];
        else $value=0;
        $voti_contestati_pre=new AA_JSON_Template_Template($id."_VotiContestatiNA_pre",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti voti contestati e non assegnati (Presidente):","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Voti contestati non assegnati (liste)
        if(isset($risultati['voti_contestati_na_liste']))$value=$risultati['voti_contestati_na_liste'];
        else $value=0;
        $voti_contestati_liste=new AA_JSON_Template_Template($id."_VotiContestatiNA_liste",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti voti contestati e non assegnati (Liste):","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede nulle
        if(isset($risultati['schede_nulle']))$value=$risultati['schede_nulle'];
        else $value=0;
        $schede_nulle=new AA_JSON_Template_Template($id."_SchedeNulle",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede nulle:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede bianche
        if(isset($risultati['schede_bianche']))$value=$risultati['schede_bianche'];
        else $value=0;
        $schede_bianche=new AA_JSON_Template_Template($id."_SchedeBianche",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede bianche:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Schede contenenti esclusivamente voti nulli
        if(isset($risultati['schede_voti_nulli']))$value=$risultati['schede_voti_nulli'];
        else $value=0;
        $schede_voti_nulli=new AA_JSON_Template_Template($id."_SchedeVotiNulli",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede contenenti esclusivamente voti nulli:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //Voti contenenti voti validi solo per il presidente
        if(isset($risultati['voti_solo_presidente']))$value=$risultati['voti_solo_presidente'];
        else $value=0;
        $voti_solo_presidente=new AA_JSON_Template_Template($id."_VotiSoloPresidente",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Schede valide solo per i candidati Presidente:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));

        //$riga=new AA_JSON_Template_Layout($id."_SecondRow",array("height"=>$rows_fixed_height,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $riga->AddRow($schede_bianche);
        $riga->AddRow($schede_nulle);
        $riga->AddRow($schede_voti_nulli);
        $riga->AddRow($voti_solo_presidente);
        $riga->AddRow($voti_contestati_pre);
        $riga->AddRow($voti_contestati_liste);

        $generaleLayout->AddRow($riga);
        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0"))));

        //$generaleLayout->AddRow(new AA_JSON_Template_Generic());
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //----------------------------- Risultati voti coalizioni -----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiCoalizioniBox",array("type"=>"clean"));

        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiCoalizioni",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning_Coalizioni",array("view"=>"label","label"=>$warning,"align"=>"center")));
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {  
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiCoalizioni_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica dati delle coalizioni",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRisultatiCoalizioniModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }

        $generaleLayout->addRow($toolbar);

        $platform=AA_Platform::GetInstance($this->oUser);
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:1%;'><div class='AA_DataView_Sier_item' style='display: flex; align-items: center; max-height:80px'><div style='display: flex; align-items: center; justify-content: center; height: 60px; width: 60px; border-radius: 50%; overflow: clip; margin-right: 1em;'><img src='#image#' height='100%'/></div><div style='font-weight:700;width: 350px;'>#title#</div><div style='width: 150px; text-align: right; padding-right: 50px'>#value#</div></div></div>";
        $coalizioni=$object->GetCoalizioni();
        if(sizeof($coalizioni)>0)
        {
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                if($curCoalizione->GetProp('image') != "")
                {
                    $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curCoalizione->GetProp('image');
                }

                //voti coalizione
                if(isset($risultati['voti_presidente']) && isset($risultati['voti_presidente'][$idCoalizione])) $value=$risultati['voti_presidente'][$idCoalizione];
                else $value=0;
                $row=new AA_JSON_Template_Template($id."_VotiCoalizione_".$idCoalizione,array(
                    "template"=>$template,
                    "gravity"=>1,
                    "type"=>"clean",
                    "data"=>array("title"=>$curCoalizione->GetProp("nome_candidato").":","value"=>$value,"image"=>$curImagePath),
                    "css"=>array("border-right"=>"1px solid #dadee0")
                ));
                $generaleLayout->AddRow($row);
            }    
        }
        else
        {
            $generaleLayout->AddRow(new AA_JSON_Template_Generic());
        }

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));

        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------- Risultati voti liste --------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiListeBox",array("type"=>"clean"));

        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiListe",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning_Liste",array("view"=>"label","label"=>$warning,"align"=>"center")));
        
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiListe_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica dati generali dei risultati",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRisultatiListeModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->addRow($toolbar);

        $platform=AA_Platform::GetInstance($this->oUser);
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
        $template="<div style='display: flex; align-items:center;justify-content: space-between; width:99%;height:100%;padding-left:1%;'><div style='display: flex; align-items: center; justify-content: center; height: 60px; width: 60px; border-radius: 50%; overflow: clip; margin-right: 1em;'><img src='#image#' height='100%'/></div><div style='font-weight:700; width: 250px'>#title#</div><div style='width: 80px; text-align:center'>#value#</div></div>";
        
        $liste=$object->GetListe(null,$comune->GetProp('id_circoscrizione'));
        //AA_Log::Log(__METHOD__." - liste: ".print_r($liste,true),100);
        if(sizeof($liste)>0)
        {
            $liste_data=array();
            foreach($liste as $idLista=>$curLista)
            {
                $candidati=$object->GetCandidati(null,$curLista,$comune->GetProp('id_circoscrizione'));
                if(sizeof($candidati)>0)
                {
                    if($curLista->GetProp('image') != "")
                    {
                        $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');
                    }
                    else
                    {
                        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
                    }
    
                    $value=0;
                    if(isset($risultati['voti_lista']) && isset($risultati['voti_lista'][$idLista]) && $risultati['voti_lista'][$idLista]>0) $value=intVal($risultati['voti_lista'][$idLista]);
                    $liste_data[]=array("id"=>$idLista,"title"=>$curLista->GetProp("denominazione"),"value"=>$value,"image"=>$curImagePath);
                }
            }
            
            //AA_Log::Log(__METHOD__." - liste: ".print_r($liste_data,true),100);

            $dataview_liste=new AA_JSON_Template_Generic($id."_ListeDataView",array(
                "view"=>"dataview",
                "xCount"=>3,
                "module_id"=>$this->id,
                "type"=>array(
                    "type"=>"tiles",
                    "height"=>80,
                    "width"=>"auto",
                    "css"=>"AA_DataView_Sier_item",
                ),
                //"on" => array("onItemDblClick" => "AA_MainApp.utils.getEventHandler('ListaDblClick','".$this->GetId()."')"),
                "template"=>$template,
                "data"=>$liste_data
            ));
            $generaleLayout->AddRow($dataview_liste);
        }
        else
        {
            $generaleLayout->AddRow(new AA_JSON_Template_Template($id."_FakeListe",array("template"=>"non ci sono liste definite.")));
        }

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------ Risultati preferenze ---------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RisultatiPreferenzeBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RisultatiPreferenze",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic($id."_Warning_Preferenze",array("view"=>"label","label"=>$warning,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_CsvImportRisultatiPreferenze_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-archive-edit",
                 "label"=>"da CSV",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Importa da csv",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRisultatiPreferenzeCsvImportDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->addElement($modify_btn);

            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRisultatiPreferenze_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-pencil",
                 "label"=>"Modifica",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Modifica preferenze",
                 "click"=>"AA_MainApp.utils.callHandler('RisultatiPreferenzeModifyAll', {task:\"GetSierComuneRisultatiPreferenzeModifyMultiDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->addElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
            
        $generaleLayout->addRow($toolbar);

        $columns=array(
            array("id"=>"cognome","header"=>array("<div style='text-align: center'>Cognome</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>array("text-align"=>"left")),
            array("id"=>"nome","header"=>array("<div style='text-align: center'>Nome</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"lista","header"=>array("<div style='text-align: center'>Lista</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"coalizione","header"=>array("<div style='text-align: center'>Coalizione</div>",array("content"=>"selectFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"voti","header"=>array("<div style='text-align: center'>Voti</div>",array("content"=>"textFilter")),"width"=>90, "css"=>array("text-align"=>"center"),"sort"=>"int")
        );

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $columns[]=array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>100, "css"=>array("text-align"=>"center"));
        }

        $data=array();
        //$circoscrizioni=AA_Sier_Const::GetCircoscrizioni();

        $candidati=$object->GetCandidati(null,null,$comune->GetProp('id_circoscrizione'));
        foreach($candidati as $curCandidato)
        {
            $data[]=$curCandidato->GetProps();

            $index=sizeof($data)-1;
            $data[$index]['voti']=0;
            if(isset($risultati['voti_candidato'][$curCandidato->GetProp('id')])) $data[$index]['voti']=$risultati['voti_candidato'][$curCandidato->GetProp('id')]['voti'];
            //AA_Log::Log(__METHOD__." - candidato: ".print_r($curCandidato,true),100);

            if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
            {
                //$trash='AA_MainApp.utils.callHandler("dlg", {task:"GetSierTrashCandidatoDlg", params: [{id: "'.$object->GetId().'"},{id_comune:"'.$comune->GetProp('id').'"},{id_candidato:"'.$curCandidato->GetProp("id").'"}]},"'.$this->id.'")';
                $modify='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneRisultatiPreferenzeModifyDlg", postParams: {id: "'.$object->GetId().'",id_comune:"'.$comune->GetProp('id').'",id_candidato:"'.$curCandidato->GetProp("id").'",refresh: 1,refresh_obj_id:"'.$id.'"},module: "' . $this->id . '"},"'.$this->id.'")';
                $data[$index]['ops']="<div class='AA_DataTable_Ops' style='justify-content:center'><a class='AA_DataTable_Ops_Button' title='Modifica i voti del candidato' onClick='".$modify."'><span class='mdi mdi-pencil'></span></a></div>";
            }
        }

        //AA_Log::Log(__METHOD__." - candidati: ".print_r($data,true),100);

        if(sizeof($candidati) > 0)
        {
            $table=new AA_JSON_Template_Generic($id."_PreferenzeCandidati", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
    
            $generaleLayout->addRow($table);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti candidati.</span></div>")));
        }

        /*
        $platform=AA_Platform::GetInstance($this->oUser);
        $DefaultImagePath=AA_Const::AA_WWW_ROOT."/".$platform->GetModulePathURL($this->id)."/img";

        $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
        $template="<div style='display: flex; align-items:center;justify-content: space-between; width:99%;height:100%;padding-left:1%;'><div style='display: flex; align-items: center; justify-content: center; height: 60px; width: 60px; border-radius: 50%; overflow: clip; margin-right: 1em;'><img src='#image#' height='100%'/></div><div style='font-weight:700; width: 250px'>#title#</div><div style='width: 80px; text-align:center'>#value#</div><div style='display: flex;  align-items: center; justify-content: space-between; height: 100%; padding: 5px; width: 60px'>#modify#&nbsp;#trash#</div></div>";
        
        $candidati=$object->GetCandidati(null,null,$comune->GetProp("id_circoscrizione"));
        //AA_Log::Log(__METHOD__." - liste: ".print_r($liste,true),100);
        $candidati_data=array();
        foreach($candidati as $idCandidato=>$curCandidato)
        {
            $lista=$object->GetLista($curCandidato->GetProp("id_lista"));
            if($lista->GetProp('image') != "")
            {
                $curImagePath=AA_Const::AA_WWW_ROOT."/storage.php?object=".$curLista->GetProp('image');
            }
            else
            {
                $curImagePath=$DefaultImagePath."/placeholder_coalizioni.png";
            }

            if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)
            {
                $modify="<a title='Modifica' class='AA_Button_Link' onclick='AA_MainApp.utils.callHandler(\"dlg\", {task:\"GetSierComuneRisultatiPreferenzeModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_candidato:".$idCandidato.",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},\"".$this->id."\")'><span class='mdi mdi-pencil'></span></a>";
                $trash="<a title='Rimuovi' class='AA_Button_Link AA_DataTable_Ops_Button_Red' style='color: red' onclick='AA_MainApp.utils.callHandler(\"dlg\", {task:\"GetSierComuneRisultatiPreferenzeTrashDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_candidato:".$idCandidato.",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},\"".$this->id."\")'><span class='mdi mdi-trash-can'></span></a>";
            }
            else
            {
                $modify="&nbsp;";
                $trash="&nbsp;";
            }

            $value=0;
            if(isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$idCandidato]) && $risultati['voti_candidato'][$idCandidato]['voti']>0)
            {
                $value=intVal($risultati['voti_candidato'][$idCandidato]['voti']);
                $candidati_data[]=array("id"=>$idCandidato,"title"=>$curCandidato->GetProp("cognome")." ".$curCandidato->GetProp("nome"),"value"=>$value,"image"=>$curImagePath,"modify"=>$modify,"trash"=>$trash);
            }
        }
    
        if(sizeof($candidati_data)>0)
        {
            $dataview_liste=new AA_JSON_Template_Generic($id."_CandidatiDataView",array(
                "view"=>"dataview",
                "xCount"=>3,
                "module_id"=>$this->id,
                "type"=>array(
                    "type"=>"tiles",
                    "height"=>80,
                    "width"=>"auto",
                    "css"=>"AA_DataView_Sier_item",
                ),
                //"on" => array("onItemDblClick" => "AA_MainApp.utils.getEventHandler('ListaDblClick','".$this->GetId()."')"),
                "template"=>$template,
                "data"=>$candidati_data
            ));
            $generaleLayout->AddRow($dataview_liste);
        }
        else
        {
            $generaleLayout->AddRow(new AA_JSON_Template_Template($id."_FakePreferenze",array("template"=>"<div style='display:flex;justify-content: center; align-items: center;widht:100;height:100%'>non ci sono preferenze definite.</div>")));
        }*/

        $generaleLayout->AddRow(new AA_JSON_Template_Generic("",array("height"=>38,"css"=>array("border-top"=>"1px solid #dadee0 !important"))));
        $multiview->AddRow($generaleLayout);
        //-------------------------------------------------------------------------------------

        return $layout;
    }

    //Template layout rendiconti
    public function Template_GetSierComuneRendicontiViewLayout($object=null,$comune=null,$id="")
    {
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $rendiconti=$comune->GetRendiconti(true);
        $canModify=false;
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE) >0)$canModify=true;
        if($id=="") $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_RENDICONTI_COMUNALI."_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI;
        else  $id.="_".static::AA_UI_LAYOUT_RENDICONTI_COMUNALI;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        $multiview=new AA_JSON_Template_Multiview($id."_Multiview_".$object->GetId(),array(
            "type" => "clean",
            "css" => "AA_Detail_Content",
            "value" => $id."_RendicontiPersonaleBox")
        );

        //---------------------------- header --------------------------------
        $header = new AA_JSON_Template_Layout($id . "_Header" . "_".$object->GetId(), array("type" => "clean", "height" => 38, "css" => "AA_SectionContentHeader"));
        $layout_tab=new AA_JSON_Template_Layout($id . "_Layout_TabBar_".$object->GetId(),array("type"=>"clean","minWidth"=>500));
        $gravity_tabbar=4;
        $layout_tab->AddCol(new AA_JSON_Template_Generic($id . "_TabBar_".$object->GetId(), array(
            "view" => "tabbar",
            "gravity"=>$gravity_tabbar,
            "borderless" => true,
            "value" => $id."_RendicontiRiepilogoBox",
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_Multiview_".$object->GetId(),
            "options" => array(
                array("id"=>$id."_RendicontiRiepilogoBox","value"=>"Riepilogo"),
                array("id"=>$id."_RendicontiSeggiBox","value"=>"Componenti seggi"),
                array("id"=>$id."_RendicontiPersonaleBox","value"=>"<span style='font-size:smaller'>Lavoro straordinario e missioni</span>"),
                array("id"=>$id."_RendicontiPersonaleDetBox","value"=>"<span style='font-size:smaller'>Assunzione personale a tempo determinato</span>"),
                array("id"=>$id."_RendicontiBuoniBox","value"=>"Buoni pasto"),
                array("id"=>$id."_RendicontiServiziBox","value"=>"Beni e servizi"),
                array("id"=>$id."_RendicontiRasBox","value"=>"Contabile RAS")
            )
        )));
        $header->AddCol($layout_tab);
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#ebf0fa","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        $layout->AddRow($header);
        //---------------------------------------------------------------------
        $layout->AddRow($multiview);
        
        $cp=$object->GetControlPannel();

        //------------------------------ riepilogo -------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiRiepilogoBox",array("type"=>"clean"));
        $box=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar("",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>180)));
        $title="Prospetto riassuntivo generale";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-cog",
                "label"=>"Genera report",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>180,
                "tooltip"=>"Genera il report in formato pdf con i dati inseriti fino a questo momento",
                "click"=>'AA_MainApp.utils.callHandler("pdfPreview", {url: "'.$this->GetTaskManagerUrl().'?task=GetSierComuneRendicontiExportRasPdf&id='.$object->GetId().'&id_comune='.$comune->GetProp('id').'"},"'.$this->id.'")'
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        $totale=0;
        //content
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div style='width:60%;text-align:left; padding-left:20px'>Spese presentate a rimborso</div><div style='width:20%; text-align:right;padding-right:20px'>Importo presentato</div><div style='width:20%;text-align:right;padding-right:20px'>Importo ammesso</div></div>"));
        $box->AddRow($header);
        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:100%;height:100%;'><div style='font-weight:400; width:60%; padding-left:20px'>#title#</div><div style='width: 20%; text-align: #value_align#;padding-right: 20px'>#value#</div><div style='width: 20%; text-align: #value_align_ammesso#;padding-right: 20px'>#value_ammesso#</div></div>";
        //competenze seggi
        $value=0;
        $ammesso=0;
        $bAmmesso=true;
        $bTotaleAmmesso=true;
        $totale_ammesso=0;
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $value+=$rendiconti['seggi']['competenze']['importo'];
            $totale+=$rendiconti['seggi']['competenze']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['seggi|competenze|importo']))
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['seggi|competenze|importo']);
            }
            else 
            {
                if($rendiconti['seggi']['competenze']['importo'] > 0) $bAmmesso=false;
            }
        }
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $value+=$rendiconti['seggi']['missioni']['importo'];
            $totale+=$rendiconti['seggi']['missioni']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['seggi|missioni|importo']))
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['seggi|missioni|importo']);
            }
            else  
            {
                if($rendiconti['seggi']['missioni']['importo'] > 0) $bAmmesso=false;
            }
        }
        if(!$bAmmesso) 
        {
            $ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=$ammesso;
            $ammesso=AA_Utils::number_format(floatVal($ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Competenze corrisposte ai componenti dei seggi (comprensiva di missioni):","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        $value=0;
        $ammesso=0;
        $bAmmesso=true;
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $value+=$rendiconti['comune']['straordinario']['importo'];
            $totale+=$rendiconti['comune']['straordinario']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['comune|straordinario|importo']))
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['comune|straordinario|importo']);
            }
            else  
            {
                if($rendiconti['comune']['straordinario']['importo'] > 0) $bAmmesso=false;
            }
        }
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $value+=$rendiconti['comune']['missioni']['importo'];
            $totale+=$rendiconti['comune']['missioni']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['comune|missioni|importo']))
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['comune|missioni|importo']);
            }
            else  
            {
                if($rendiconti['comune']['missioni']['importo'] > 0)$bAmmesso=false;
            }
        }
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $value+=$rendiconti['comune']['oneri']['importo'];
            $totale+=$rendiconti['comune']['oneri']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['comune|oneri|importo']))
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['comune|oneri|importo']);
            }
            else  
            {
                if($rendiconti['comune']['oneri']['importo'] > 0) $bAmmesso=false;
            }
        }
        if(!$bAmmesso) 
        {
            $ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($ammesso);
            $ammesso=AA_Utils::number_format(floatVal($ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Lavoro straordinario e missioni dei dipendenti (compresi oneri):","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$ammesso),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        
        $value=0;
        $ammesso=0;
        $bAmmesso=true;
        if(isset($rendiconti['personale_det']))
        {
           foreach($rendiconti['personale_det'] as $key=>$val)
           {
                $value+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
                $totale+=floatVal($val['importo'])+floatVal($val['oneri_importo']);
                if(isset($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['oneri_importo']) && $bAmmesso)
                {
                    $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['oneri_importo']);
                }
                else $bAmmesso=false;
                if(isset($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['importo']) && $bAmmesso)
                {
                    $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['importo']);
                }
                else $bAmmesso=false;
           }
        }
        if(!$bAmmesso) 
        {
            $ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($ammesso);
            $ammesso=AA_Utils::number_format(floatVal($ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Assunzione di personale a tempo determinato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        
        $value=0;
        $ammesso=0;
        $bAmmesso=true;
        if(isset($rendiconti['buoni']['importo']))
        {
            $value+=$rendiconti['buoni']['importo'];
            $totale+=$rendiconti['buoni']['importo'];
            if(isset($rendiconti['ras']['importi_ammessi']['buoni|importo']) && $bAmmesso)
            {
                $ammesso+=floatVal($rendiconti['ras']['importi_ammessi']['buoni|importo']);
            }
            else $bAmmesso=false;
        }
        if(!$bAmmesso) 
        {
            $ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($ammesso);
            $ammesso=AA_Utils::number_format(floatVal($ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Buoni pasto dei dipendenti addetti al servizio elettorale:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$ammesso),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        
        $software=0;
        $software_ammesso=0;
        $bSoftwareAmmesso=true;
        $trasporto=0;
        $bTrasportoAmmesso=true;
        $trasporto_ammesso=0;
        $materiale=0;
        $bMaterialeAmmesso=true;
        $materiale_ammesso=0;
        $propaganda=0;
        $bPropagandaAmmesso=true;
        $propaganda_ammesso=0;
        $collegamenti=0;
        $bCollegamentiAmmesso=true;
        $collegamenti_ammesso=0;
        $altro=0;
        $bAltroAmmesso=true;
        $altro_ammesso=0;
        $spese_postali=0;
        $bSpesePostaliAmmesso=true;
        $spese_postali_ammesso=0;
        if(isset($rendiconti['servizi']))
        {
            foreach($rendiconti['servizi'] as $key=>$val)
            {
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_PROPAGANDA_ELETTORALE) 
                {
                    $propaganda+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bPropagandaAmmesso)
                    {
                        $propaganda_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bPropagandaAmmesso=false;
                }              
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_COLLEGAMENTI) 
                {
                    $collegamenti+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bCollegamentiAmmesso)
                    {
                        $collegamenti_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bCollegamentiAmmesso=false;
                }
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_ALTRO) 
                {
                    $altro+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bAltroAmmesso)
                    {
                        $altro_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bAltroAmmesso=false;
                }
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_MATERIALE_ALLESTIMENTO) 
                {
                    $materiale+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bMaterialeAmmesso)
                    {
                        $materiale_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bMaterialeAmmesso=false;
                }
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_SPESE_POSTALI) 
                {
                    $spese_postali+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bSpesePostaliAmmesso)
                    {
                        $spese_postali_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bSpesePostaliAmmesso=false;
                }
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_STAMPATI_SOFTWARE) 
                {
                    $software+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bSoftwareAmmesso)
                    {
                        $software_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bSoftwareAmmesso=false;
                }
                if($val['tipologia']==AA_Sier_Const::AA_SIER_RENDICONTI_SERVIZI_TRASPORTO_ARREDAMENTO) 
                {
                    $trasporto+=floatVal($val['importo']);
                    if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']) && $bTrasportoAmmesso)
                    {
                        $trasporto_ammesso+=$rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'];
                    }
                    else $bTrasportoAmmesso=false;
                }
                $totale+=floatVal($val['importo']);
                if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo'])) 
                {
                    $totaleAmmesso+=floatVal($rendiconti['ras']['importi_ammessi']['servizi'][$key]['importo']);
                }
                else $bTotaleAmmesso=false;
            }
        }
        if(!$bSoftwareAmmesso) 
        {
            $software_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($software_ammesso);
            $software_ammesso=AA_Utils::number_format(floatVal($software_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Stampati o software sostitutivi non forniti direttamente dalla Regione o dallo Stato:","value"=>AA_Utils::number_format($software,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$software_ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bTrasportoAmmesso) 
        {
            $trasporto_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($trasporto_ammesso);
            $trasporto_ammesso=AA_Utils::number_format(floatVal($trasporto_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Trasporto del materiale elettorale e degli arredi dei seggi - Allestimento dei seggi:","value"=>AA_Utils::number_format($trasporto,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$trasporto_ammesso),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bMaterialeAmmesso) 
        {
            $materiale_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($materiale_ammesso);
            $materiale_ammesso=AA_Utils::number_format(floatVal($materiale_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Acquisto di materiale di consumo per l’allestimento dei seggi:","value"=>AA_Utils::number_format($materiale,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$materiale_ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bPropagandaAmmesso) 
        {
            $propaganda_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($propaganda_ammesso);
            $propaganda_ammesso=AA_Utils::number_format(floatVal($propaganda_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Spese per la propaganda elettorale:","value"=>AA_Utils::number_format($propaganda,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$propaganda_ammesso),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bCollegamentiAmmesso) 
        {
            $collegamenti_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($collegamenti_ammesso);
            $collegamenti_ammesso=AA_Utils::number_format(floatVal($collegamenti_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Collegamenti telefonici straordinari ai fini della raccolta dei dati elettorali:","value"=>AA_Utils::number_format($collegamenti,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$collegamenti_ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bSpesePostaliAmmesso) 
        {
            $spese_postali_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($spese_postali_ammesso);
            $spese_postali_ammesso=AA_Utils::number_format(floatVal($spese_postali_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Spese postali e telegrafiche:","value"=>AA_Utils::number_format($spese_postali,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$spese_postali_ammesso),
            "css"=>array("background-color"=>"#f0f0f0 !important","border-bottom"=>"1px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        if(!$bAltroAmmesso) 
        {
            $altro_ammesso="n.d.";
            $bTotaleAmmesso=false;
        }
        else
        {
            $totale_ammesso+=floatVal($altro_ammesso);
            $altro_ammesso=AA_Utils::number_format(floatVal($altro_ammesso),2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"Altre spese indispensabili per gli adempimenti elettorali:","value"=>AA_Utils::number_format($altro,2,",","."),"value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>$altro_ammesso),
            "css"=>array("border-bottom"=>"1px solid #dadee0 !important")
        ));
        
        $box->AddRow($val);
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>TOTALE SPESE PRESENTATE:</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".AA_Utils::number_format($totale,2,",",".")."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid gray !important")
        ));
        $box->AddRow($val);
        $anticipo=0;
        $totale_saldare=0;
        $totale_saldare_label="IMPORTO DA LIQUIDARE";
        $saldo_label="SALDO";
        $liquidato=0;

        if(isset($rendiconti['ras']['anticipo']))
        {
            $anticipo=$rendiconti['ras']['anticipo'];
        }
        if(isset($rendiconti['ras']['liquidazioni']))
        {
            foreach($rendiconti['ras']['liquidazioni'] as $val)
            {
                $liquidato+=floatVal($val['importo']);
            }
        }
        
        if(!$bTotaleAmmesso)
        {
            $totale_saldare="n.d.";
            $totale_ammesso="n.d.";
            $saldo="n.d.";
        }
        else
        {
            $totale_saldare=$totale_ammesso-$anticipo;
            $saldo=$totale_ammesso-($anticipo+$liquidato);
            if($totale_saldare<0) 
            {
                $totale_saldare_label="IMPORTO DA RECUPERARE";
                $totale_saldare=$totale_saldare*-1;
            }
            if($saldo<0)
            {
                $saldo_label="SALDO";
            }

            $totale_ammesso=AA_Utils::number_format($totale_ammesso,2,",",".");
            $totale_saldare=AA_Utils::number_format($totale_saldare,2,",",".");
            $saldo=AA_Utils::number_format($saldo,2,",",".");
        }

        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>TOTALE IMPORTO AMMESSO A RIMBORSO:</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".$totale_ammesso."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>ACCONTO CORRISPOSTO:</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".AA_Utils::number_format($anticipo,2,",",".")."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>".$totale_saldare_label.":</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".$totale_saldare."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>IMPORTO LIQUIDATO (escluso acconto):</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".AA_Utils::number_format($liquidato,2,",",".")."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);

        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "height"=>32,
            "data"=>array("title"=>"<div style='width:100%; text-align: right; font-size:larger;font-weight:bold;'>".$saldo_label.":</div>","value"=>"<span style='font-size:larger;font-weight: 700'>".$saldo."</span>","value_align"=>"right","value_align_ammesso"=>"right","value_ammesso"=>""),
            "css"=>array("border-top"=>"2px solid #dadee0 !important")
        ));
        $box->AddRow($val);
        $box->AddRow(new AA_JSON_Template_Generic());
        $generaleLayout->AddRow($box);
        $multiview->AddCell($generaleLayout);
        //------------------------------------------------------------------------

        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:280px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 50px'>#value#</div></div>";
        $template_short="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:200px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 10px'>#value#</div></div>";
        $template_importo_ammesso="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:280px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 50px'>#value#</div><div class='AA_DataTable_Ops_Button' style='min-width: 50px;'><span class='mdi mdi-pencil' style='cursor: pointer' onClick=\"AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiImportoAmmessoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",field:'#field#',voce:'#voce#',refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')\"></span></div></div>";
        $template_importo_ammesso_short="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:200px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 10px'>#value#</div><div class='AA_DataTable_Ops_Button' style='min-width: 50px;'><span class='mdi mdi-pencil' style='cursor: pointer' onClick=\"AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiImportoAmmessoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",field:'#field#',voce:'#voce#',refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')\"></span></div></div>";
        
        //-------------------------------- Competenze seggio -----------------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiSeggiBox",array("type"=>"clean"));
        $first_row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $generaleLayout->addRow($first_row);
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeSeggio_Box",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeSeggio_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze corrisposte ai componenti dei seggi elettorali";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRendicontiSpesePersonaleCompetenzeSeggio_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica le competenze spettanti ai componenti dei seggi elettorali",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiSeggiModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        //competenze seggi
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_liquidazione']))
        {
            $value=$rendiconti['seggi']['competenze']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimento di liquidazione:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><span>Trattamento di missione presidenti di seggio</span></div>"));
        //$row->addCol($val);
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['estremi_pagamento']))
        {
            $value=$rendiconti['seggi']['competenze']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandato di pagamento:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        //$row->addCol($val);
        $box->addRow($val);
        
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean","css"=>"AA_RendicontiImportoRow"));
        $value="n.d.";
        if(isset($rendiconti['seggi']['competenze']['importo']))
        {
            $value=$rendiconti['seggi']['competenze']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['seggi|competenze|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['seggi|competenze|importo']),2,",",".");
        }
        
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"seggi|competenze|importo","voce"=>"Competenze spettanti ai componenti dei seggi elettorali"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $box->addRow($header);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['estremi_liquidazione']))
        {
            $value=$rendiconti['seggi']['missioni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimento di liquidazione:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        //$row->addCol($val);
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['estremi_pagamento']))
        {
            $value=$rendiconti['seggi']['missioni']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandato di pagamento:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $box->addRow($val);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['componenti']))
        {
            $value=$rendiconti['seggi']['missioni']['componenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"n. missioni:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['km']))
        {
            $value=$rendiconti['seggi']['missioni']['km'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Km percorsi:","value"=>$value,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->AddRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean","css"=>"AA_RendicontiImportoRow"));
        $value="n.d.";
        if(isset($rendiconti['seggi']['missioni']['importo']))
        {
            $value=$rendiconti['seggi']['missioni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        
        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['seggi|missioni|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['seggi|missioni|importo']),2,",",".");
        }
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"seggi|missioni|importo","voce"=>"Trattamento di missione presidenti di seggio"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);

        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta:<li>l'effettiva partecipazione dei componenti dei seggi per tutta la durata delle operazioni elettorali e l'applicazione ad essi degli onorari indicati nella circolare dell'Amministrazione regionale in materia di rendicontazione delle spese sostenute dai Comuni.</li></ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
        ));
        $row->AddRow($val);
        $box->AddRow($row);
        $box->AddRow(new AA_JSON_Template_Generic("",array("height"=>10)));
        $first_row->AddCol($box);
        $multiview->AddCell($generaleLayout);
        //------------------------------------------------------------------------------------------------
      
        //--------------------------- Spese Personale ----------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiPersonaleBox",array("type"=>"clean"));
        $first_row=new AA_JSON_Template_Layout($id."_Personale_FirstRow",array("type"=>"clean"));
        $generaleLayout->addRow($first_row);
        //$second_row=new AA_JSON_Template_Layout($id."_Personale_SecondRow",array("type"=>"clean"));
        //$generaleLayout->addRow($second_row);
        //---------------- Competenze comune ----------------
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeComune_Box",array("type"=>"clean","css"=>array("border-right"=>"1px solid #dadee0 !important")));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeComune_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti al personale per lavoro straordinario e missioni";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyComuneRendicontiPersonaleIndeterminato_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica le competenze spettanti al personale per straordinario e missioni",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiPersonaleIndeterminatoModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div style='width:60%'>Lavoro straordinario</div><div style='width:40%'>Missioni personale comunale</div></div>"));
        $box->AddRow($header);

        //content
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_autorizzazione']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_autorizzazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di autorizzazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_autorizzazione']))
        {
            $value=$rendiconti['comune']['missioni']['estremi_autorizzazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di autorizzazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_liquidazione']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['estremi_liquidazione']))
        {
            $value=$rendiconti['comune']['missioni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['estremi_pagamento']))
        {
            $value=$rendiconti['comune']['straordinario']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['km']))
        {
            $value=$rendiconti['comune']['missioni']['km'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Km percorsi:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['periodo_max']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_max']);
            $value="dal ".$periodo[0]." al ".$periodo[1];
        }
        
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo autorizzato:","value"=>$value,"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['periodo_effettivo']))
        {
            $periodo=explode("|",$rendiconti['comune']['straordinario']['periodo_effettivo']);
            $value="dal ".$periodo[0]." al ".$periodo[1];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo effettivo:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['dipendenti']))
        {
            $value=$rendiconti['comune']['missioni']['dipendenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti che hanno effettuato missioni:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['dipendenti_max']))
        {
            $value=$rendiconti['comune']['straordinario']['dipendenti_max'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti autorizzati:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['dipendenti_effettivi']))
        {
            $value=$rendiconti['comune']['straordinario']['dipendenti_effettivi'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti con straordinario:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['missioni']['importo']))
        {
            $value=$rendiconti['comune']['missioni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left"),
            "css"=>"AA_RendicontiImportoRow"
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['ore_max']))
        {
            $value=$rendiconti['comune']['straordinario']['ore_max'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Ore autorizzate:","value"=>$value,"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['ore_effettive']))
        {
            $value=$rendiconti['comune']['straordinario']['ore_effettive'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Ore effettive:","value"=>$value,"padding"=>0,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['comune|missioni|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['comune|missioni|importo']),2,",",".");
        }
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso,
            "gravity"=>40,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"comune|missioni|importo","voce"=>"Competenze spettanti al personale per missioni"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['straordinario']['importo']))
        {
            $value=$rendiconti['comune']['straordinario']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>0,"value_align"=>"left"),
            "css"=>"AA_RendicontiImportoRow"
        ));
        $row->AddCol($val);
        
        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['comune|straordinario|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['comune|straordinario|importo']),2,",",".");
        }
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"comune|straordinario|importo","voce"=>"Competenze spettanti al personale per lavoro straordinario e missioni"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40, "css"=>array("border-left"=>"1px solid #dadee0 !important"))));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $header=new AA_JSON_Template_Template("",array("type"=>"clean","height"=>24,"template"=>"<div style='display:flex; align-items:center; justify-content:center; width:100%;height:24px;text-align: center; font-weight:700; background-color:#e7e9f2'><div>Oneri</div></div>"));
        $box->AddRow($header);
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['estremi_pagamento']))
        {
            $value=$rendiconti['comune']['oneri']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento oneri:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            //"css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['dettagli']))
        {
            $dettagli=explode("|",$rendiconti['comune']['oneri']['dettagli']);
            $value="cpdel: ".AA_Utils::number_format($dettagli[0],2,",",".")." - irap: ".AA_Utils::number_format($dettagli[1],2,",",".")." - altro (".$dettagli[3]."): ".AA_Utils::number_format($dettagli[2],2,",",".");
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>60,
            "type"=>"clean",
            "data"=>array("title"=>"Dettaglio oneri:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            //"css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);

        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="n.d.";
        if(isset($rendiconti['comune']['oneri']['importo']))
        {
            $value=$rendiconti['comune']['oneri']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato per oneri:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left"),
            "css"=>"AA_RendicontiImportoRow"
        ));
        $row->AddCol($val);
        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['comune|oneri|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['comune|oneri|importo']),2,",",".");
        }
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso_short,
            "gravity"=>30,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"comune|oneri|importo","voce"=>"Competenze spettanti al personale per lavoro straordinario (oneri)"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);
        $row->AddCol(new AA_JSON_Template_Generic("",array("gravity"=>40)));
        $box->addRow($row);
       
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta che:<li>sono stati rispettati i limiti per il lavoro straordinario elettorale previsti nell'art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68;</li>";
        $value.="<li>la retribuzione per il lavoro straordinario di cui si chiede il rimborso è stata corrisposta ai dipendenti che potevano essere retribuiti con il compenso per prestazioni straordinarie in base al C.C.N.L. da applicarsi per il periodo considerato;</li>";
        $value.="<li>sono state applicate le tariffe orarie per il lavoro straordinario previste dal C.C.N.L. vigente nel periodo considerato;</li>";
        $value.="<li>sono state rispettate le disposizioni contrattuali e legislative in materia di trattamento di trasferta dei dipendenti comunali.</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>3,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify","font-size"=>"smaller")
        ));
        $row->AddCol($val);
        $value="<ul>In caso di più consultazioni si attesta:<li>il rispetto dei limiti per il lavoro straordinario elettorale, previsti nell’art.15 del decreto-legge 18 gennaio 1993, n.8, convertito con modificazioni dalla legge 19 marzo 1993, n.68, complessivamente per le diverse consultazioni;</li>";
        $value.="<li>il rispetto del riparto delle spese tra gli enti interessati alle consultazioni indicato nelle circolari in materia della Regione e dello Stato:</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>2,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify","font-size"=>"smaller")
        ));
        $row->AddCol($val);
        $box->AddRow($row);

        $first_row->AddCol($box);
        //---------------------------------------------------
        $multiview->addCell($generaleLayout);
        //-------------------------------------------------------------------------------------

        //----------------------------- Spese personale a tempo determinato -------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiPersonaleDetBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeTempoDet_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti per il personale a tempo determinato";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_AddnewRendicontiSpesePersonaleCompetenzeTempoDet_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi delle competenze spettanti per il personale a tempo determinato",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiPersonaleDeterminatoModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->AddRow($toolbar);
        
        //content
        $rendiconti=$comune->GetRendiconti(true);
        if(isset($rendiconti['personale_det']) && sizeof($rendiconti['personale_det'])>0)
        {
            $data=array();
            foreach($rendiconti['personale_det'] as $key=>$val)
            {
                $ops="&nbsp;";
                if($canModify)
                {
                    $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiPersonaleDeterminatoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_personale_det:'".$key."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiConfirmTrashPersonaleDeterminatoDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_personale_det:'".$key."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='Modifica voce relativa al personale assunto a tempo determinato' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                }
        
                $estremi="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $estremi.="<div style='display:flex; width:100%'><div style='width:25%;min-width:25%'>Assunzione:</div><div>".$val['estremi_assunzione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Liquidazione:</div><div>".$val['estremi_liquidazione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Pagamento:</div><div>".$val['estremi_pagamento']."</div></div>";
                //$estremi.="<div style='display:flex;width:100%'><div style='width:25%'>periodo:</div><div> dal ".$val['periodo_dal']." al ".$val['periodo_al']."</div></div>";
                $estremi.="</div>";

                $op="<span class='AA_DataTable_Ops_Button mdi mdi-pencil' style='cursor: pointer' onClick=\"AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiImportoAmmessoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",field:'personale_det|".$key."|oneri_importo',voce:'Oneri spettanti per il personale a tempo determinato (".addslashes($val['estremi_assunzione']).")',refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')\"></span>";
                $oneri="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $oneri.="<div style='display:flex; width:100%'><div style='width:40%;min-width:40%'>Estremi pagamento:</div><div>".$val['oneri_pagamento']."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Cpdel:</div><div>".AA_Utils::number_format($val['oneri_cpdel'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Irap:</div><div>".AA_Utils::number_format($val['oneri_irap'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Altro:</div><div>".AA_Utils::number_format($val['oneri_altro'],2,",",".")."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Altro(descrizione):</div><div>".$val['oneri_altro_desc']."</div></div>";
                $oneri.="<div style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Importo presentato:</div><div>".AA_Utils::number_format($val['oneri_importo'],2,",",".")."</div></div>";
                $importo_ammesso="n.d.";
                if(isset($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['oneri_importo']))
                {
                    $importo_ammesso=AA_Utils::number_format($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['oneri_importo'],2,",",".");
                }
                $class="";
                if($importo_ammesso=="n.d.")
                {
                    $class="AA_RendicontiImportoRow_Orange";
                }
                $oneri.="<div class='".$class."' style='display:flex;width:100%'><div style='width:40%;min-width:40%'>Importo ammesso:</div><div>".$importo_ammesso."&nbsp; ".$op."</div></div>";
                $oneri.="</div>";

                $periodo="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%;font-size:smaller'>";
                $periodo.="<div style='display:flex; width:100%'><div style='width:25%'>dal:</div><div>".substr($val['periodo_dal'],0,10)."</div></div>";
                $periodo.="<div style='display:flex; width:100%'><div style='width:25%'>al:</div><div>".substr($val['periodo_al'],0,10)."</div></div>";
                $periodo.="</div>";

                $op="<span class='AA_DataTable_Ops_Button mdi mdi-pencil' style='cursor: pointer' onClick=\"AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiImportoAmmessoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",field:'personale_det|".$key."|importo',voce:'Competenze spettanti per il personale a tempo determinato (".addslashes($val['estremi_assunzione']).")',refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')\"></span>";
                $importo="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $importo.="<div style='display:flex; width:100%'><div style='width:100%;text-align:center'>presentato:<br>".AA_Utils::number_format($val['importo'],2,",",".")."</div></div>";
                $importo_ammesso="n.d.";
                if(isset($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['importo']))
                {
                    $importo_ammesso=AA_Utils::number_format($rendiconti['ras']['importi_ammessi']['personale_det'][$key]['importo'],2,",",".");
                }
                $class="";
                if($importo_ammesso=="n.d.")
                {
                    $class="AA_RendicontiImportoRow_Orange";
                }
                $importo.="<div class='".$class."' style='display:flex; width:100%'><div style='width:100%;text-align:center'>ammesso:<br>".$importo_ammesso."&nbsp; ".$op."</div></div>";
                $importo.="</div>";
                $data[]=array("id"=>$key,"tipologia"=>$val['tipologia'],"qualifica"=>$val['qualifica'],"importo"=>$importo,
                "estremi"=>$estremi,
                "oneri"=>$oneri,
                "periodo"=>$periodo,
                "ops"=>$ops
                );
            }

            if($canModify)
            {
                $columns=array(
                    array("id"=>"qualifica","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"periodo","header"=>array("<div style='text-align: center'>Periodo</div>"),"width"=>120, "css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"width"=>130, "css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"oneri","header"=>array("<div style='text-align: center'>Oneri</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>90, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller"))
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>150,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "eventHandlers"=>array("onresize"=>array("handler"=>"adjustRowHeight","module_id"=>$this->GetId())),
                "columns"=>$columns,
                "data"=>$data
            ));

            $generaleLayout->addRow($table);
            $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
            $value="<ul>Si attesta che:<li>la spesa di cui si chiede il rimborso per l'assunzione di personale a tempo determinato è relativa al lavoro prestato nel periodo elettorale indicato nella circolare della Regione in materia di rendicontazione;</li>";
            $value.="<li>i contratti individuali di lavoro a tempo determinato, stipulati dal Comune, danno luogo alla costituzione di un rapporto di lavoro subordinato con l'Ente;</li>";
            $value.="</ul>";
            $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
            ));
            $row->AddRow($val);
            $generaleLayout->addRow($row);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $multiview->AddCell($generaleLayout);
        //-------------------------------------------------------------------------------------

        //------------------------------------ Buoni pasto ------------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiBuoniBox",array("type"=>"clean"));
        $box=new AA_JSON_Template_Layout($id."_Personale_CompetenzeBuoniPasto_Box",array("type"=>"clean"));
        $generaleLayout->AddRow($box);
        $toolbar=new AA_JSON_Template_Toolbar($id."_Personale_CompetenzeBuoniPasto_Toolbar",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $title="Competenze spettanti per i buoni pasto dei dipendenti addetti";
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>$title,"align"=>"center")));

        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_ModifyRendicontiSpesePersonaleCompetenzeBuoniPasto_btn",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica delle competenze per i buoni pasto dei dipendenti addetti al servizio elettorale",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiBuoniModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->AddRow($toolbar);

        //content
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_liquidazione']))
        {
            $value=$rendiconti['buoni']['estremi_liquidazione'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi provvedimenti di liquidazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['estremi_pagamento']))
        {
            $value=$rendiconti['buoni']['estremi_pagamento'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi mandati di pagamento:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['erogati']))
        {
            $value=$rendiconti['buoni']['erogati'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Buoni pasto erogati:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['dipendenti']))
        {
            $value=$rendiconti['buoni']['dipendenti'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"n. dipendenti che hanno usufruito dei buoni:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $value="n.d.";
        if(isset($rendiconti['buoni']['periodo']))
        {
            $value=explode("|",$rendiconti['buoni']['periodo']);
            $value="dal ".$value[0]." al ".$value[1];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo di utilizzo:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $box->addRow($val);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean","css"=>"AA_RendicontiImportoRow"));
        $value="n.d.";
        if(isset($rendiconti['buoni']['importo']))
        {
            $value=$rendiconti['buoni']['importo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo presentato:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left")
        ));
        $row->AddCol($val);

        $value="n.d.";
        if(isset($rendiconti['ras']['importi_ammessi']['buoni|importo']))
        {
            $value=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi']['buoni|importo']),2,",",".");
        }
        $ImportoAmmessoClass="AA_RendicontiImportoRow";
        if($value=="n.d.") $ImportoAmmessoClass="AA_RendicontiImportoRow_Orange";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_importo_ammesso,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso:","value"=>$value,"value_align"=>"left","field"=>"buoni|importo","voce"=>"Competenze spettanti per i buoni pasto dei dipendenti addetti"),
            "css"=>$ImportoAmmessoClass
        ));
        $row->AddCol($val);

        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="";
        if(isset($rendiconti['buoni']['note']))
        {
            $value=$rendiconti['buoni']['note'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"note:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $row->AddCol($val);
        $box->addRow($row);
        $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $value="<ul>Si attesta che:<li>i buoni pasto sono stati erogati ai dipendenti per le sole giornate di lavoro straordinario elettorale effettuate e nel rispetto delle condizioni e limiti previsti nel C.C.N.L. vigente nel periodo considerato;</li>";
        $value.="<li>l'Amministrazione comunale aveva già attivato il servizio per l'erogazione dei buoni pasto ai propri dipendenti;</li>";
        $value.="</ul>";
        $val=new AA_JSON_Template_Template("",array(
        "template"=>$value,
        "gravity"=>1,
        "autoheight"=>true,
        "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
        ));
        $row->AddRow($val);
        $box->addRow($row);
        $multiview->AddCell($generaleLayout);
        //--------------------------------------------------------------------------------------

        //----------------------------- Spese per beni e servizi -------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiServiziBox",array("type"=>"clean"));
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RendicontiServizi",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Beni e servizi non forniti direttamente dalla Regione","align"=>"center")));
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi un nuovo elemento",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiServiziModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $generaleLayout->addRow($toolbar);

        $rendiconti=$comune->GetRendiconti(true);
        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        if(isset($rendiconti['servizi']) && sizeof($rendiconti['servizi'])>0)
        {
            $data=array();
            foreach($rendiconti['servizi'] as $idServizio=>$curServizio)
            {
                $ops="&nbsp;";
                if($canModify)
                {
                    $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiServiziModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_servizio:'".$idServizio."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiConfirmTrashServiziDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_servizio:'".$idServizio."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    if($curServizio['note']!="") $note='<a href="#" title="Visualizza le note" onClick=\'let note=CryptoJS.enc.Utf8.stringify(CryptoJS.enc.Base64.parse("'.base64_encode($curServizio['note']).'"));AA_MainApp.ui.modalBox(note,"Note")\'><span class="mdi mdi-clipboard-text"></span></a>';
                    else $note="";
                    $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;$note<a class='AA_DataTable_Ops_Button' title='Modifica il bene/servizio' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina il Comune' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                }
        
                $estremi="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $estremi.="<div style='display:flex; width:100%'><div style='width:25%;min-width:25%'>Impegno:</div><div>".$curServizio['estremi_impegno']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Liquidazione:</div><div>".$curServizio['estremi_liquidazione']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Pagamento:</div><div>".$curServizio['estremi_pagamento']."</div></div>";
                $estremi.="<div style='display:flex;width:100%'><div style='width:25%;min-width:25%'>Fattura:</div><div>".$curServizio['estremi_fattura']."</div></div>";
                $estremi.="</div>";

                $op="<span class='AA_DataTable_Ops_Button mdi mdi-pencil' style='cursor: pointer' onClick=\"AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiImportoAmmessoModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",field:'servizi|".$idServizio."|importo',voce:'Beni e servizi non forniti direttamente dalla Regione (".addslashes($tipologia[$curServizio['tipologia']]).")',refresh: 1,refresh_obj_id:'".$id."'},module: '" . $this->id . "'},'".$this->id."')\"></span>";
                $importo="<div style='display:flex;justify-content: center; flex-direction:column;width:100%;height:100%'>";
                $importo.="<div style='display:flex; width:100%'><div style='width:100%;text-align:center'>presentato:<br>".AA_Utils::number_format($curServizio['importo'],2,",",".")."</div></div>";
                $importo_ammesso="n.d.";
                if(isset($rendiconti['ras']['importi_ammessi']['servizi'][$idServizio]['importo']))
                {
                    $importo_ammesso=AA_Utils::number_format($rendiconti['ras']['importi_ammessi']['servizi'][$idServizio]['importo'],2,",",".");
                }
                $class="";
                if($importo_ammesso=="n.d.")
                {
                    $class="AA_RendicontiImportoRow_Orange";
                }
                $importo.="<div class='".$class."' style='display:flex; width:100%'><div style='width:100%;text-align:center'>ammesso:<br>".$importo_ammesso."&nbsp; ".$op."</div></div>";
                $importo.="</div>";

                $data[]=array("id"=>$idServizio,"tipologia"=>$tipologia[$curServizio['tipologia']],"descrizione"=>$curServizio['descrizione'],"ditta"=>$curServizio['ditta'],"importo"=>$importo,
                "estremi"=>$estremi,
                "ops"=>$ops
                );
            }

            if($canModify)
            {
                $columns=array(
                    array("id"=>"tipologia","header"=>array("<div style='text-align: center'>Tipologia</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"width"=>120,"css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller")),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>90, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    array("id"=>"tipologia","header"=>array("<div style='text-align: center'>Tipologia</div>",array("content"=>"selectFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"descrizione","header"=>array("<div style='text-align: center'>Descrizione</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"ditta","header"=>array("<div style='text-align: center'>Ditta</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable_left"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Provvedimenti (estremi)</div>"),"width"=>350,"css"=>array("font-size"=>"smaller"))
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>100,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "eventHandlers"=>array("onresize"=>array("handler"=>"adjustRowHeight","module_id"=>$this->GetId())),
                "data"=>$data
            ));

            $generaleLayout->addRow($table);
            $row=new AA_JSON_Template_Layout("",array("type"=>"clean"));
            $value="<ul>Si attesta che:<li>Nell'ipotesi di acquisto di nuovi tabelloni per la propaganda elettorale, l'importo di cui si chiede il rimborso costituisce il 10% del totale della relativa spesa:</li>";
            $value.="<li>l'eventuale spesa richiesta a rimborso per collegamenti telefonici e' relativa al noleggio di telefoni cellulari o all’attivazione di collegamenti telefonici straordinari e al relativo traffico telefonico nei giorni della votazione per la raccolta dei dati elettorali.</li>";
            $value.="</ul>";
            $val=new AA_JSON_Template_Template("",array(
            "template"=>$value,
            "gravity"=>1,
            "autoheight"=>true,
            "css"=>array("border-top"=>"1px solid #dadee0 !important;text-align:justify")
            ));
            $row->AddRow($val);
            $generaleLayout->addRow($row);
        }
        else
        {
            $generaleLayout->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $multiview->addCell($generaleLayout);
        //---------------------------------------------------------------------------------------

        //----------------------------- Contabile RAS -------------------------------
        $generaleLayout=new AA_JSON_Template_Layout($id."_RendicontiRasBox",array("type"=>"clean"));
        $leftPanel=new AA_JSON_Template_Layout("",array("type"=>"clean","css"=>array("border-right"=>"1px solid #d0d0d0 !important")));
        $rightPanel=new AA_JSON_Template_Layout("",array("type"=>"clean"));
        $generaleLayout->AddCol($leftPanel);
        $generaleLayout->AddCol($rightPanel);

        $template="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='font-weight:700;width: 350px; min-width:220px'>#title#</div><div style='width: 100%; text-align: #value_align#;padding-right: 50px'>#value#</div></div>";

        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RendicontiRas",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Contabile RAS","align"=>"center")));
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Modifica",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Modifica",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiRasModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $leftPanel->addRow($toolbar);

        $value="n.d.";
        if(isset($cp['rendiconti']['periodo_dal']))
        {
            $value="dal ".substr($cp['rendiconti']['periodo_dal'],0,10);
        }
        if(isset($cp['rendiconti']['periodo_al']))
        {
            $value.=" al ".substr($cp['rendiconti']['periodo_al'],0,10);
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Periodo utile:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $value="0";
        if(isset($rendiconti['ras']['anticipo']))
        {
            $value=$rendiconti['ras']['anticipo'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Acconto corrisposto:","value"=>AA_Utils::number_format($value,2,",","."),"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Importo ammesso a rimborso:","value"=>$totale_ammesso,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $value="n.d.";
        if(isset($rendiconti['ras']['estremi_rendiconto']))
        {
            $value=$rendiconti['ras']['estremi_rendiconto'];
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Estremi pec rendicontazione:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $value="<span class='AA_Label AA_Label_LightRed'>disabilitato</span>";
        if(isset($rendiconti['ras']['caricamento_allegati']) && $rendiconti['ras']['caricamento_allegati']==1)
        {
            $value="<span class='AA_Label AA_Label_LightGreen'>abilitato</span>";
        }
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Caricamento allegati:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $value=$object->BuildRendicontiSerial($rendiconti);
        $template_serial="<div style='display: flex; align-items:center;justify-content: flex-start; width:99%;height:100%;padding-left:5px;'><div style='width: 100%; min-width:220px'><span style='font-weight:700;'>#title#</span><br>#value#</div>";
        $val=new AA_JSON_Template_Template("",array(
            "template"=>$template_serial,
            "gravity"=>1,
            "type"=>"clean",
            "data"=>array("title"=>"Seriale:","value"=>$value,"padding"=>5,"value_align"=>"left"),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $leftPanel->addRow($val);

        $box=new AA_JSON_Template_Layout($id."_RendicontiRas_Box",array("gravity"=>7,"type"=>"clean"));
        $leftPanel->AddRow($box);
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar_RendicontiRas",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Liquidazioni","align"=>"center")));
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi liquidazione",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiRasLiquidazioniModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box->addRow($toolbar);
        $rendiconti=$comune->GetRendiconti(true);
        $tipologia=AA_Sier_Const::GetTipoRendicontiServizi();
        if(isset($rendiconti['ras']['liquidazioni']) && sizeof($rendiconti['ras']['liquidazioni']) > 0)
        {
            $data=array();
            foreach($rendiconti['ras']['liquidazioni'] as $idLiquidazione=>$curLiquidazione)
            {
                $ops="&nbsp;";
                if($canModify)
                {
                    $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiRasLiquidazioniModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_liquidazione:'".$idLiquidazione."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierComuneRendicontiConfirmTrashLiquidazioniDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",id_liquidazione:'".$idLiquidazione."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                    $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='Modifica la liquidazione' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina la liquidazione' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                }
                $data[]=array("id"=>$idLiquidazione,"importo"=>AA_Utils::number_format($curLiquidazione['importo'],2,",","."),
                "data_prov"=>substr($curLiquidazione['data_prov'],0,10),
                "estremi"=>$curLiquidazione['estremi'],
                "ops"=>$ops
                );
            }

            if($canModify)
            {
                $columns=array(
                    array("id"=>"data_prov","header"=>array("<div style='text-align: center'>Data</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Estremi</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>90, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    array("id"=>"data","header"=>array("<div style='text-align: center'>Data</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Estremi</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"importo","header"=>array("<div style='text-align: center'>Importo</div>"),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable")
                );
            }

            $table=new AA_JSON_Template_Generic($id."_Comuni", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>24,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));

            $box->addRow($table);
        }
        else
        {
            $box->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }

        $box_files=new AA_JSON_Template_Layout("",array("gravity"=>7,"type"=>"clean"));
        $rightPanel->AddRow($box_files);
        $toolbar=new AA_JSON_Template_Toolbar("",array("height"=>38,"css"=>array("background-color"=>"#dadee0 !important","border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Allegati","align"=>"center")));
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic("",array(
                "view"=>"button",
                "type"=>"icon",
                "icon"=>"mdi mdi-pencil",
                "label"=>"Aggiungi",
                "css"=>"webix_primary",
                "align"=>"right",
                "width"=>120,
                "tooltip"=>"Aggiungi allegato",
                "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneRendicontiRasAllegatiModifyDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));

            $toolbar->AddElement($modify_btn);
        }
        else
        {
            $toolbar->AddElement(new AA_JSON_Template_Generic("",array("view"=>"spacer","width"=>120)));
        }
        $box_files->addRow($toolbar);
        $rendiconti=$comune->GetRendiconti(true);
        if(isset($rendiconti['ras']['allegati']) && sizeof($rendiconti['ras']['allegati']) > 0)
        {
            $data=array();
            $storage=AA_Storage::GetInstance($this->oUser);
            foreach($rendiconti['ras']['allegati'] as $idAllegato=>$curAllegato)
            {
                if($idAllegato !="")
                {
                    $ops="&nbsp;";
                    $view="AA_MainApp.utils.callHandler('wndOpen', {url: 'storage.php?object=".$curAllegato['file']."&attachment=true'},'".$this->id."')";
                    $view_icon="mdi-floppy";
                    $tip="Scarica";
    
                    if($storage->IsValid())
                    {
                        $file=$storage->GetFileByHash($curAllegato['file']);
                        if($file->IsValid())
                        {
                            AA_Log::Log(__METHOD__." - mime type: ".$file->GetmimeType()." - filename: ".$file->GetName(),100);
                            if(strpos($file->GetmimeType(),"pdf",0) !==false)
                            {
                                $view="AA_MainApp.utils.callHandler('pdfPreview', {url: 'storage.php?object=".$curAllegato['file']."'},'".$this->id."')";
                                $view_icon="mdi-eye";
                                $tip="Consulta";
                            }
                        }
                    }
    
                    if($canModify)
                    {
                        $modify="AA_MainApp.utils.callHandler('dlg', {task:'GetSierRendicontiAllegatiModifyDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",file:'".$idAllegato."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                        $trash="AA_MainApp.utils.callHandler('dlg', {task:'GetSierRendicontiConfirmTrashAllegatiDlg', postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",file:'".$idAllegato."',refresh: 1,refresh_obj_id:'$id'},module: '" . $this->id . "'},'".$this->id."')";
                        $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='".$tip."' onClick=\"".$view."\"><span class='mdi ".$view_icon."'></span></a><a class='AA_DataTable_Ops_Button' title='Modifica l&apos;allegato' onClick=\"".$modify."\"><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina l&apos;allegato' onClick=\"".$trash."\"><span class='mdi mdi-trash-can'></span></a>&nbsp;</div>";
                    }
                    else
                    {
                        $ops="<div class='AA_DataTable_Ops' style='width:100%;height:100%'>&nbsp;<a class='AA_DataTable_Ops_Button' title='".$tip."' onClick=\"".$view."\"><span class='mdi '.$view_icon.''></span></a>&nbsp;</div>";
                    }
                    $data[]=array("id"=>$idAllegato,"file"=>$curAllegato['file'],
                    "data_prov"=>substr($curAllegato['aggiornamento'],0,10),
                    "estremi"=>$curAllegato['estremi'],
                    "ops"=>$ops
                    );
                }
            }

            if($canModify)
            {
                $columns=array(
                    //array("id"=>"data_prov","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: left'>Estremi</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>150, "css"=>array("text-align"=>"center")),
                );
            }
            else
            {
                $columns=array(
                    //array("id"=>"data","header"=>array("<div style='text-align: center'>Data</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"estremi","header"=>array("<div style='text-align: center'>Estremi</div>",array("content"=>"textFilter")),"fillspace"=>true, "sort"=>"text","css"=>"RendicontiServiziTable"),
                    array("id"=>"ops","header"=>array("<div style='text-align: center'>Operazioni</div>"),"width"=>120, "css"=>array("text-align"=>"center")),
                );
            }

            $table=new AA_JSON_Template_Generic("", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "fixedRowHeight"=>false,
                "rowHeight"=>24,
                "rowLineHeight"=>24,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));

            $box_files->addRow($table);
        }
        else
        {
            $box_files->addRow(new AA_JSON_Template_Template("",array("template"=>"<div style='display:flex;justify-content:center;align-items:center;width:100%;height:100%'>Non sono presenti elementi.</div>")));
        }
        $multiview->addCell($generaleLayout);
        //---------------------------------------------------------------------------------------
        return $layout;
    }

    //Template dlg modify risultati generali comune
    public function Template_GetSierComuneRisultatiGeneraliModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiGeneraliModifyDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica risultati generali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica risultati generali", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['sezioni_scrutinate']=0;
            $form_data['votanti_m']=0;
            $form_data['votanti_f']=0;
            $form_data['schede_bianche']=0;
            $form_data['schede_nulle']=0;
            $form_data['voti_contestati_na_pre']=0;
            $form_data['voti_contestati_na_liste']=0;
            $form_data['voti_solo_presidente']=0;
            $form_data['schede_voti_nulli']=0;

            $risultati=$comune->GetRisultati(true);
            foreach($risultati as $key=>$val)
            {
                if(isset($form_data[$key])) $form_data[$key]=$val;
            }
            $form_data['votanti_tot']= $form_data['votanti_f']+ $form_data['votanti_m'];

            $wnd=new AA_GenericFormDlg($id, "Modifica risultati generali comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(330);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(720);
            $wnd->SetHeight(800);
            
            //Sezioni scrutinate
            $wnd->AddTextField("sezioni_scrutinate","Sezioni scrutinate",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di sezioni scrutinate."));
            $section=new AA_FieldSet($id."_Section_RisultatiGeneraliVotanti","Dati sui votanti");
            //votanti maschi
            $section->AddTextField("votanti_m","Maschi",array("required"=>true,"gravity"=>1,"labelWidth"=>100, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti maschi."));
            //votanti femminie
            $section->AddTextField("votanti_f","Femmine",array("required"=>true,"gravity"=>1, "labelWidth"=>100,"validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti femmine."),false);
            
            $section->AddTextField("votanti_tot","Totale",array("required"=>true,"gravity"=>1, "labelWidth"=>100,"validateFunction"=>"IsPositive","bottomLabel"=>"*maschi + femmine."),false);
            $wnd->AddGenericObject($section);
            //schede bianche
            $wnd->AddTextField("schede_bianche","Schede bianche",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede bianche."));
            //schede nulle
            $wnd->AddTextField("schede_nulle","Schede nulle",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede nulle."));
            //schede contenenti voti nulli
            $wnd->AddTextField("schede_voti_nulli","Schede escl. con voti nulli",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede contenenti esclusivamente voti nulli."));

            //schede solo presidente
            $wnd->AddTextField("voti_solo_presidente","Schede valide solo per i candidati Presidente ",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero schede valide solo per i candidati Presidente."));

            $section=new AA_FieldSet($id."_Section_RisultatiGenerali","Schede contenenti voti contestati e non assegnati");
            //voti contestati non assegnati pre
            $section->AddTextField("voti_contestati_na_pre","al Presidente",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di schede contenti voti contestati e non assegnati (Presidente)."));
            //voti contestati non assegnati liste
            $section->AddTextField("voti_contestati_na_liste","alle Liste",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di schede contenti voti contestati e non assegnati (Liste)."));
            $wnd->AddGenericObject($section);

            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRisultatiGenerali");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica risultati generali comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti seggi comune
    public function Template_GetSierComuneRendicontiSeggiModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiSeggiModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze componenti dei seggi", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze componenti dei seggi", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['seggi|competenze|estremi_liquidazione']="";
            $form_data['seggi|competenze|estremi_pagamento']="";
            $form_data['seggi|competenze|importo']=0;
            $form_data['seggi|missioni|estremi_liquidazione']="";
            $form_data['seggi|missioni|estremi_pagamento']="";
            $form_data['seggi|missioni|km']=0;
            $form_data['seggi|missioni|componenti']=0;
            $form_data['seggi|missioni|importo']=0;

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="seggi")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                            }
                        }
                        else
                        {
                            $form_data[$key."|".$key_b]=$val_b; 
                        }    
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(800);
            
            //estremi liquidazione
            $section=new AA_FieldSet(uniqid(),"Competenze");
            $section->AddTextField("seggi|competenze|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25; n.345 del 2024-02-26"));
            $section->AddTextField("seggi|competenze|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("seggi|competenze|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Trattamento di missione presidenti di seggio");
            $section->AddTextField("seggi|missioni|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $section->AddTextField("seggi|missioni|estremi_pagamento","Estremi mandati di pagamento",array("gravity"=>1,"placeholder"=>"es. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("seggi|missioni|componenti","n. missioni",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*n. presidenti con missioni."));
            $section->AddTextField("seggi|missioni|km","Km totali",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Km totali percorsi."),false);
            $section->AddTextField("seggi|missioni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"placeholder"=>"es. 1234,56", "bottomLabel"=>"*Importo complessivo presentato per missioni (spese viaggio, albergo, pasti, rimborsi chilometrici)."));
            $wnd->AddGenericObject($section);
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiSeggi");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify importo ammesso
    public function Template_GetSierComuneRendicontiImportoAmmessoModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiImportoAmmessoModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica importo ammesso", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica importo ammesso", $this->id);
        if($this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER) || $this->oUser->HasFlag(AA_Sier_Const::AA_USER_FLAG_SIER_OC))
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['field']=$_REQUEST['field'];
            $form_data['voce']=$_REQUEST['voce'];
            $importo_corrisposto=0;
            $importo_ammesso=0;
            $rendiconti=$comune->GetRendiconti(true);
            $fields=explode('|',$_REQUEST['field']);
            if(sizeof($fields)>1)
            {
                $value=$rendiconti;
                for($i=0;$i<sizeof($fields);$i++)
                {
                    $value=$value[$fields[$i]];
                    //AA_Log::Log(__METHOD__." - value:".print_r($value,true),100);
                    if(!is_array($value))
                    {
                        $importo_corrisposto=AA_Utils::number_format(floatVal($value),2,",",".");
                    }
                }

                if(isset($rendiconti['ras']['importi_ammessi'][$_REQUEST['field']]))
                {
                    $importo_ammesso=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi'][$_REQUEST['field']]),2,",",".");
                }
                else
                {
                    $value=$rendiconti['ras']['importi_ammessi'];
                    for($i=0;$i<sizeof($fields);$i++)
                    {
                        $value=$value[$fields[$i]];
                        if(!is_array($value))
                        {
                            $importo_ammesso=AA_Utils::number_format(floatVal($value),2,",",".");
                        }
                    }
                }
            }
            else
            {
                if(isset($rendiconti[$_REQUEST['field']]))
                {
                    $importo_ammesso=AA_Utils::number_format(floatVal($rendiconti[$_REQUEST['field']]),2,",",".");
                }
                if(isset($rendiconti['ras']['importi_ammessi'][$_REQUEST['field']]))
                {
                    $importo_ammesso=AA_Utils::number_format(floatVal($rendiconti['ras']['importi_ammessi'][$_REQUEST['field']]),2,",",".");
                }
            }

            $form_data['importo_ammesso']=$importo_ammesso;

            $wnd=new AA_GenericFormDlg($id, "Modifica importo ammesso comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(340);
            
            $wnd->AddGenericObject(new AA_JSON_Template_Template("",array("autoheight"=>true,"borderless"=>true,"template"=>"<div>Voce di spesa: <span style='font-weight:bold'>#voce#</span></div><div>Importo presentato: <span style='font-weight:bold'>#importo_corrisposto#</span></div><hr style='width:50%;color: #dedede'>","data"=>array("voce"=>$_REQUEST['voce'],"importo_corrisposto"=>$importo_corrisposto))));
            $wnd->AddTextField("importo_ammesso","Importo ammesso",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Indicare l'importo ammesso a rimborso per la spesa indicata."));
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiImportoAmmesso");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica importo ammesso comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti seggi comune
    public function Template_GetSierOCRendicontiSeggiModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_OC_RendicontiSeggiModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze componenti dei seggi", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze componenti dei seggi", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['seggi|competenze|estremi_liquidazione']="";
            $form_data['seggi|competenze|estremi_pagamento']="";
            $form_data['seggi|competenze|importo']=0;
            $form_data['seggi|missioni|estremi_liquidazione']="";
            $form_data['seggi|missioni|estremi_pagamento']="";
            $form_data['seggi|missioni|km']=0;
            $form_data['seggi|missioni|componenti']=0;
            $form_data['seggi|missioni|importo']=0;

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="seggi")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                            }
                        }
                        else
                        {
                            $form_data[$key."|".$key_b]=$val_b; 
                        }    
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(800);
            
            //estremi liquidazione
            $section=new AA_FieldSet(uniqid(),"Competenze");
            $section->AddTextField("seggi|competenze|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25; n.345 del 2024-02-26"));
            $section->AddTextField("seggi|competenze|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("seggi|competenze|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Trattamento di missione presidenti di seggio");
            $section->AddTextField("seggi|missioni|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $section->AddTextField("seggi|missioni|estremi_pagamento","Estremi mandati di pagamento",array("gravity"=>1,"placeholder"=>"es. n.12345 del 2024-02-25; n.345 del 2024-02-26", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("seggi|missioni|componenti","n. missioni",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Numero dei componenti che hanno effettuato missioni."));
            $section->AddTextField("seggi|missioni|km","Km totali",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Km totali percorsi."),false);
            $section->AddTextField("seggi|missioni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"placeholder"=>"es. 1234,56", "bottomLabel"=>"*Importo complessivo presentato per missioni (spese viaggio, albergo, pasti, rimborsi chilometrici)."));
            $wnd->AddGenericObject($section);
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRendicontiSeggi");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti seggi comune
    public function Template_GetSierComuneRendicontiServiziModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiServiziModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica un bene/servizio", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica un bene/servizio", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['id_servizio']=uniqid();
            $form_data['tipologia']=0;
            $form_data['descrizione']="";
            $form_data['importo']="";
            $form_data['ditta']="";
            $form_data['estremi_impegno']="";
            $form_data['estremi_liquidazione']="";
            $form_data['estremi_pagamento']="";
            $form_data['estremi_fattura']="";
            $form_data['note']="";

            $rendiconti=$comune->GetRendiconti(true);
            if(isset($_REQUEST['id_servizio']) && isset($rendiconti['servizi'][$_REQUEST['id_servizio']]))
            {
                $form_data['id_servizio']=$_REQUEST['id_servizio'];
                $form_data['tipologia']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['tipologia'];
                $form_data['descrizione']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['descrizione'];
                $form_data['importo']=AA_Utils::number_format($rendiconti['servizi'][$_REQUEST['id_servizio']]['importo'],2,",",".");
                $form_data['ditta']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['ditta'];
                $form_data['estremi_impegno']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_impegno'];
                $form_data['estremi_liquidazione']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_liquidazione'];
                $form_data['estremi_pagamento']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_pagamento'];
                $form_data['estremi_fattura']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_fattura'];
                $form_data['note']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['note'];
            }

            $wnd=new AA_GenericFormDlg($id, "Aggiungi/Modifica un bene/servizio - comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(800);
            
            //estremi liquidazione
            $rendicontiServizi=AA_Sier_Const::GetTipoRendicontiServizi();
            $options=array();
            foreach($rendicontiServizi as $key=>$val)
            {
                $options[]=array("id"=>$key,"value"=>$val);
            }
            
            $wnd->AddSelectField("tipologia","Tipologia",array("required"=>true,"validateFunction"=>"IsSelected","bottomLabel"=>"*Scegli la tipologia di bene/servizio dalla lista.","options"=>$options));
            $wnd->AddTextField("descrizione","Descrizione",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*Inserisci una breve descrizione del bene/servizio."));
            $wnd->AddTextField("importo","Importo",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*inserisci l'importo (es. 1234,56)."));
            $wnd->AddTextField("estremi_impegno","Estremi impegno di spesa",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del provvedimento di spesa."));
            $wnd->AddTextField("estremi_liquidazione","Estremi provv. liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del provvedimento di liquidazione."));
            $wnd->AddTextField("estremi_pagamento","Estremi mandato di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del mandato di pagamento."));
            $wnd->AddTextField("ditta","Ditta",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*inserisci la denominazione della ditta fornitrice."));
            $wnd->AddTextField("estremi_fattura","Estremi fattura",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi della fattura."));
            $wnd->AddTextareaField("note","note",array("gravity"=>1));

            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiServizi");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Aggiungi un nuovo bene/servizio - comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti servizi OC comune
    public function Template_GetSierOCRendicontiServiziModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCComuneRendicontiServiziModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica un bene/servizio", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica un bene/servizio", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['id_servizio']=uniqid();
            $form_data['tipologia']=0;
            $form_data['descrizione']="";
            $form_data['importo']="";
            $form_data['ditta']="";
            $form_data['estremi_impegno']="";
            $form_data['estremi_liquidazione']="";
            $form_data['estremi_pagamento']="";
            $form_data['estremi_fattura']="";
            $form_data['note']="";

            $rendiconti=$comune->GetRendiconti(true);
            if(isset($_REQUEST['id_servizio']) && isset($rendiconti['servizi'][$_REQUEST['id_servizio']]))
            {
                $form_data['id_servizio']=$_REQUEST['id_servizio'];
                $form_data['tipologia']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['tipologia'];
                $form_data['descrizione']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['descrizione'];
                $form_data['importo']=AA_Utils::number_format($rendiconti['servizi'][$_REQUEST['id_servizio']]['importo'],2,",",".");
                $form_data['ditta']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['ditta'];
                $form_data['estremi_impegno']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_impegno'];
                $form_data['estremi_liquidazione']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_liquidazione'];
                $form_data['estremi_pagamento']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_pagamento'];
                $form_data['estremi_fattura']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['estremi_fattura'];
                $form_data['note']=$rendiconti['servizi'][$_REQUEST['id_servizio']]['note'];
            }

            $wnd=new AA_GenericFormDlg($id, "Aggiungi/Modifica un bene/servizio - comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(800);
            
            //estremi liquidazione
            $rendicontiServizi=AA_Sier_Const::GetTipoRendicontiServizi();
            $options=array();
            foreach($rendicontiServizi as $key=>$val)
            {
                $options[]=array("id"=>$key,"value"=>$val);
            }
            
            $wnd->AddSelectField("tipologia","Tipologia",array("required"=>true,"validateFunction"=>"IsSelected","bottomLabel"=>"*Scegli la tipologia di bene/servizio dalla lista.","options"=>$options));
            $wnd->AddTextField("descrizione","Descrizione",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*Inserisci una breve descrizione del bene/servizio."));
            $wnd->AddTextField("importo","Importo",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*inserisci l'importo (es. 1234,56)."));
            $wnd->AddTextField("estremi_impegno","Estremi impegno di spesa",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del provvedimento di spesa."));
            $wnd->AddTextField("estremi_liquidazione","Estremi provv. liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del provvedimento di liquidazione."));
            $wnd->AddTextField("estremi_pagamento","Estremi mandato di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi del mandato di pagamento."));
            $wnd->AddTextField("ditta","Ditta",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*inserisci la denominazione della ditta fornitrice."));
            $wnd->AddTextField("estremi_fattura","Estremi fattura",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-25","bottomLabel"=>"*inserisci gli estremi della fattura."));
            $wnd->AddTextareaField("note","note",array("gravity"=>1));

            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRendicontiServizi");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Aggiungi un nuovo bene/servizio - comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti contabile RAS liquidazioni
    public function Template_GetSierComuneRendicontiRasLiquidazioniModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiRasLiquidazioniModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica una liquidazione", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Aggiungi/Modifica una liquidazione", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['id_liquidazione']=uniqid();
            $form_data['data_prov']="";
            $form_data['estremi']="";
            $form_data['importo']=0;

            $rendiconti=$comune->GetRendiconti(true);
            if(isset($_REQUEST['id_liquidazione']) && isset($rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]))
            {
                $form_data['id_liquidazione']=$_REQUEST['id_liquidazione'];
                $form_data['data_prov']=$rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]['data_prov'];
                $form_data['estremi']=$rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]['estremi'];
                $form_data['importo']=AA_Utils::number_format($rendiconti['ras']['liquidazioni'][$_REQUEST['id_liquidazione']]['importo'],2,",",".");
            }

            $wnd=new AA_GenericFormDlg($id, "Aggiungi/Modifica liquidazione - comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(800);
            
            //estremi liquidazione
            $wnd->AddDateField("data_prov","Data del provvedimento",array("required"=>true,"gravity"=>1,"validateFunction"=>"IsIsoDate","bottomLabel"=>"*inserisci la data del provvedimento."));
            $wnd->AddTextField("estremi","Estremi del provvedimento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n. 1234","bottomLabel"=>"*inserisci gli estremi del provvedimento."));
            $wnd->AddTextField("importo","Importo",array("required"=>true,"gravity"=>1,"bottomLabel"=>"*inserisci l'importo (es. 1234,56)."));
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiRasLiquidazioni");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Aggiungi/modifcia liquidazione - comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti seggi comune
    public function Template_GetSierComuneRendicontiBuoniModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiBuoniModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['buoni|estremi_liquidazione']="";
            $form_data['buoni|estremi_pagamento']="";
            $form_data['buoni|importo']=0;
            $form_data['buoni|erogati']=0;
            $form_data['buoni|periodo_dal']="";
            $form_data['buoni|periodo_al']="";
            $form_data['buoni|dipendenti']=0;
            $form_data['buoni|note']="";

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="buoni")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                            }
                        }
                        else
                        {
                            if($key_b == "importo") $val_b=AA_Utils::number_format($val_b,2,",",".");
                            $form_data[$key."|".$key_b]=$val_b;
                            if($key_b=="periodo")
                            {
                                $date=explode("|",$val_b);
                                if(isset($date[0])) $form_data['buoni|periodo_dal']=$date[0];
                                if(isset($date[1])) $form_data['buoni|periodo_al']=$date[1];
                            }
                        }
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica competenze spettanti per i buoni pasto del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(600);
            
            //estremi liquidazione
            //$section=new AA_FieldSet(uniqid(),"Competenze");
            $section=new AA_FieldSet(uniqid(),"Periodo di utilizzo");
            $section->AddDateField("buoni|periodo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio utilizzo (YYYY-mm-gg)."));
            $section->AddDateField("buoni|periodo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine utilizzo (YYYY-mm-gg)."),false);
            $wnd->AddGenericObject($section);

            $wnd->AddTextField("buoni|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $wnd->AddTextField("buoni|estremi_pagamento","Estremi mandati di pagamento",array("gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));

            $wnd->AddTextField("buoni|erogati","n. di buoni erogati",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1));
            
            $wnd->AddTextField("buoni|dipendenti","n. dipendenti che ne hanno usufruito",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1),false);
            
            $wnd->AddTextField("buoni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddTextareaField("buoni|note","Note",array("gravity"=>1,"labelWidth"=>70,"bottomPadding"=>0));
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiBuoni");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti seggi comune
    public function Template_GetSierOCRendicontiBuoniModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCComuneRendicontiBuoniModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['buoni|estremi_liquidazione']="";
            $form_data['buoni|estremi_pagamento']="";
            $form_data['buoni|importo']=0;
            $form_data['buoni|erogati']=0;
            $form_data['buoni|periodo_dal']="";
            $form_data['buoni|periodo_al']="";
            $form_data['buoni|dipendenti']=0;
            $form_data['buoni|note']="";

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="buoni")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                            }
                        }
                        else
                        {
                            if($key_b == "importo") $val_b=AA_Utils::number_format($val_b,2,",",".");
                            $form_data[$key."|".$key_b]=$val_b;
                            if($key_b=="periodo")
                            {
                                $date=explode("|",$val_b);
                                if(isset($date[0])) $form_data['buoni|periodo_dal']=$date[0];
                                if(isset($date[1])) $form_data['buoni|periodo_al']=$date[1];
                            }
                        }
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica competenze spettanti per i buoni pasto del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(780);
            $wnd->SetHeight(600);
            
            //estremi liquidazione
            //$section=new AA_FieldSet(uniqid(),"Competenze");
            $section=new AA_FieldSet(uniqid(),"Periodo di utilizzo");
            $section->AddDateField("buoni|periodo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio utilizzo (YYYY-mm-gg)."));
            $section->AddDateField("buoni|periodo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine utilizzo (YYYY-mm-gg)."),false);
            $wnd->AddGenericObject($section);

            $wnd->AddTextField("buoni|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $wnd->AddTextField("buoni|estremi_pagamento","Estremi mandati di pagamento",array("gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));

            $wnd->AddTextField("buoni|erogati","n. di buoni erogati",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1));
            
            $wnd->AddTextField("buoni|dipendenti","n. dipendenti che ne hanno usufruito",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1),false);
            
            $wnd->AddTextField("buoni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddTextareaField("buoni|note","Note",array("gravity"=>1,"labelWidth"=>70,"bottomPadding"=>0));
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRendicontiBuoni");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze componenti dei seggi comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify contabile RAS comune
    public function Template_GetSierComuneRendicontiRasModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiRasModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze spettanti per i buoni pasto dei dipendenti addetti", $this->id);

        $cp=$object->GetControlPannel();
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['ras|periodo_dal']="";
            if(isset($cp['rendiconti']['periodo_dal'])) $form_data['ras|periodo_dal']=$cp['rendiconti']['periodo_dal'];
            $form_data['ras|periodo_al']="";
            if(isset($cp['rendiconti']['periodo_al'])) $form_data['ras|periodo_al']=$cp['rendiconti']['periodo_al'];
            $form_data['ras|anticipo']=0;
            $form_data['ras|estremi_rendiconto']="";
            $form_data['ras|caricamento_allegati']=0;

            $rendiconti=$comune->GetRendiconti(true);
            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="ras")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                                if($key_c=="anticipo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                            }
                        }
                        else
                        {
                            if($key_b == "importo") $val_b=AA_Utils::number_format($val_b,2,",",".");
                            $form_data[$key."|".$key_b]=$val_b;
                            if($key_b == "anticipo") $val_b=AA_Utils::number_format($val_b,2,",",".");
                            $form_data[$key."|".$key_b]=$val_b;
                        }
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica contabile RAS del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(980);
            $wnd->SetHeight(500);
            
            //estremi liquidazione
            //$section=new AA_FieldSet(uniqid(),"Competenze");
            $section=new AA_FieldSet(uniqid(),"Periodo utile");
            $section->AddDateField("ras|periodo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*Scegli una data dal calendario."));
            $section->AddDateField("ras|periodo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*Scegli una data dal calendario."),false);
            $wnd->AddGenericObject($section);

            $wnd->AddSwitchBoxField("ras|caricamento_allegati","Caricamento allegati",array("required"=>true,"labelWidth"=>150,"onLabel"=>"Abilitato","gravity"=>1,"offLabel"=>"Disabilitato","bottomLabel"=>"Abilita il caricamento degli allegati."));
            $wnd->AddTextField("ras|estremi_rendiconto","Estremi pec rendiconto",array("labelWidth"=>200,"gravity"=>2,"placeholder"=>"es. prot.n. 1234 del 2024-03-24", "bottomLabel"=>"*Estremi protocollo di ricevimento del rendiconto inviato dal comune."),false);
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiRas");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica contabile RAS comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti personale comune
    public function Template_GetSierComuneRendicontiPersonaleIndeterminatoModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiPersonaleModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['comune|straordinario|estremi_autorizzazione']="";
            $form_data['comune|straordinario|estremi_liquidazione']="";
            $form_data['comune|straordinario|estremi_pagamento']="";
            $form_data['comune|straordinario|importo']=0;
            $form_data['comune|straordinario|periodo_max_dal']="";
            $form_data['comune|straordinario|periodo_max_al']="";
            $form_data['comune|straordinario|periodo_effettivo_dal']="";
            $form_data['comune|straordinario|periodo_effettivo_al']="";
            $form_data['comune|straordinario|dipendenti_max']=0;
            $form_data['comune|straordinario|dipendenti_effettivi']=0;
            $form_data['comune|straordinario|ore_max']=0;
            $form_data['comune|straordinario|ore_effettive']=0;
            $form_data['comune|straordinario|note']="";
            $form_data['comune|oneri|estremi_pagamento']="";
            $form_data['comune|oneri|dettagli_cpdel']=0;
            $form_data['comune|oneri|dettagli_irap']=0;
            $form_data['comune|oneri|dettagli_altro']=0;
            $form_data['comune|oneri|dettagli_altro_desc']="";
            //$form_data['comune|oneri|importo']=0;
            $form_data['comune|missioni|estremi_liquidazione']="";
            $form_data['comune|missioni|estremi_pagamento']="";
            $form_data['comune|missioni|km']=0;
            $form_data['comune|missioni|dipendenti']=0;
            $form_data['comune|missioni|importo']=0;

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="comune")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                                if($key_c=="periodo_max")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_dal"]=$date[0];
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_al"]=$date[1];
                                }
                                if($key_c=="periodo_effettivo")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_dal"]=$date[0];
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_al"]=$date[1];
                                }
                                 if($key_c=="dettagli")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_cpdel"]=AA_Utils::number_format($date[0],2,",",".");
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_irap"]=AA_Utils::number_format($date[1],2,",",".");
                                    if(isset($date[2])) $form_data[$key."|".$key_b."|".$key_c."_altro"]=AA_Utils::number_format($date[2],2,",",".");
                                    if(isset($date[3])) $form_data[$key."|".$key_b."|".$key_c."_altro_desc"]=$date[3];
                                }
                            }
                        }
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica spese per straordinario e missioni del personale del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(28);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1200);
            $wnd->SetHeight(820);
            
            $section=new AA_FieldSet(uniqid(),"Lavoro straordinario");
            $section->AddTextField("comune|straordinario|estremi_autorizzazione","Estremi provvedimenti di autorizzazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei  provvedimenti di autorizzione."));
            $section->AddTextField("comune|straordinario|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."),false);
            $section->AddTextField("comune|straordinario|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("comune|straordinario|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."),false);
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo autorizzato","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo di effettivo svolgimento","align"=>"center","css"=>array("background"=>"#efefef"))),false);
            $section->AddDateField("comune|straordinario|periodo_max_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."));
            $section->AddDateField("comune|straordinario|periodo_max_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddDateField("comune|straordinario|periodo_effettivo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."),false);
            $section->AddDateField("comune|straordinario|periodo_effettivo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Numero di Ore","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"n. dipendenti autorizzati e n. di coloro che lo hanno effettivamente svolto","align"=>"center","css"=>array("background"=>"#efefef"))),false);
            $section->AddTextField("comune|straordinario|ore_max","Autorizzate",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1));
            $section->AddTextField("comune|straordinario|ore_effettive","Effettive",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $section->AddTextField("comune|straordinario|dipendenti_max","Autorizzati",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $section->AddTextField("comune|straordinario|dipendenti_effettivi","Effettivi",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Oneri");
            $section->AddTextField("comune|oneri|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"labelWidth"=>220,"placeholder"=>"es. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("comune|oneri|dettagli_cpdel","Cpdel",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"));
            $section->AddTextField("comune|oneri|dettagli_irap","Irap",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("comune|oneri|dettagli_altro","Altro",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("comune|oneri|dettagli_altro_desc","Altro (Descrizione)",array("gravity"=>1,"labelWidth"=>150));
            //$section->AddTextField("comune|oneri|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo corrisposto (es. 1234,56)."));
            $section->AddSpacer();
            $wnd->AddGenericObject($section);
            
            $section=new AA_FieldSet(uniqid(),"Missioni");
            $section->AddTextField("comune|missioni|estremi_autorizzazione","Estremi provv. di autorizzazione",array("gravity"=>1,"labelWidth"=>230,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei provv. di autorizzazione."));
            $section->AddTextField("comune|missioni|estremi_liquidazione","Estremi provv. di liquidazione",array("gravity"=>1, "labelWidth"=>230,"placeholder"=>"es. prot. n.12345 del 2024-02-25","bottomLabel"=>"*Estremi dei provv. di liquidazione."));
            $section->AddTextField("comune|missioni|km","Km percorsi",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"labelWidth"=>110));
            $section->AddTextField("comune|missioni|dipendenti","n. dipendenti che le hanno effettuate",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>2,"labelWidth"=>300),false);
            $section->AddTextField("comune|missioni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddGenericObject($section,false);

            $wnd->AddTextareaField("comune|straordinario|note","Note",array("gravity"=>1,"labelWidth"=>60,"bottomPadding"=>0));
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiPersonaleIndeterminato");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica spese per straordinario e missioni del comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti personale comune
    public function Template_GetSierOCRendicontiPersonaleIndeterminatoModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCComuneRendicontiPersonaleModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $rendiconti=$comune->GetRendiconti(true);
            $form_data['comune|straordinario|estremi_autorizzazione']="";
            $form_data['comune|straordinario|estremi_liquidazione']="";
            $form_data['comune|straordinario|estremi_pagamento']="";
            $form_data['comune|straordinario|importo']=0;
            $form_data['comune|straordinario|periodo_max_dal']="";
            $form_data['comune|straordinario|periodo_max_al']="";
            $form_data['comune|straordinario|periodo_effettivo_dal']="";
            $form_data['comune|straordinario|periodo_effettivo_al']="";
            $form_data['comune|straordinario|dipendenti_max']=0;
            $form_data['comune|straordinario|dipendenti_effettivi']=0;
            $form_data['comune|straordinario|ore_max']=0;
            $form_data['comune|straordinario|ore_effettive']=0;
            $form_data['comune|straordinario|note']="";
            $form_data['comune|oneri|estremi_pagamento']="";
            $form_data['comune|oneri|dettagli_cpdel']=0;
            $form_data['comune|oneri|dettagli_irap']=0;
            $form_data['comune|oneri|dettagli_altro']=0;
            $form_data['comune|oneri|dettagli_altro_desc']="";
            //$form_data['comune|oneri|importo']=0;
            $form_data['comune|missioni|estremi_liquidazione']="";
            $form_data['comune|missioni|estremi_pagamento']="";
            $form_data['comune|missioni|km']=0;
            $form_data['comune|missioni|dipendenti']=0;
            $form_data['comune|missioni|importo']=0;

            foreach($rendiconti as $key=>$val)
            {
                if(is_array($val) && $key=="comune")
                {
                    foreach($val as $key_b=>$val_b)
                    {
                        if(is_array($val_b))
                        {
                            foreach($val_b as $key_c=>$val_c)
                            {
                                if($key_c=="importo") $val_c=AA_Utils::number_format($val_c,2,",",".");
                                $form_data[$key."|".$key_b."|".$key_c]=$val_c;
                                if($key_c=="periodo_max")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_dal"]=$date[0];
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_al"]=$date[1];
                                }
                                if($key_c=="periodo_effettivo")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_dal"]=$date[0];
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_al"]=$date[1];
                                }
                                 if($key_c=="dettagli")
                                {
                                    $date=explode("|",$val_c);
                                    if(isset($date[0])) $form_data[$key."|".$key_b."|".$key_c."_cpdel"]=AA_Utils::number_format($date[0],2,",",".");
                                    if(isset($date[1])) $form_data[$key."|".$key_b."|".$key_c."_irap"]=AA_Utils::number_format($date[1],2,",",".");
                                    if(isset($date[2])) $form_data[$key."|".$key_b."|".$key_c."_altro"]=AA_Utils::number_format($date[2],2,",",".");
                                    if(isset($date[3])) $form_data[$key."|".$key_b."|".$key_c."_altro_desc"]=$date[3];
                                }
                            }
                        }
                    }
                }
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica spese per straordinario e missioni del personale del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(28);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1200);
            $wnd->SetHeight(840);
            
            $section=new AA_FieldSet(uniqid(),"Lavoro straordinario");
            $section->AddTextField("comune|straordinario|estremi_autorizzazione","Estremi provvedimenti di autorizzazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei  provvedimenti di autorizzione."));
            $section->AddTextField("comune|straordinario|estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."),false);
            $section->AddTextField("comune|straordinario|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("comune|straordinario|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."),false);
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo autorizzato","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo di effettivo svolgimento","align"=>"center","css"=>array("background"=>"#efefef"))),false);
            $section->AddDateField("comune|straordinario|periodo_max_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."));
            $section->AddDateField("comune|straordinario|periodo_max_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddDateField("comune|straordinario|periodo_effettivo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."),false);
            $section->AddDateField("comune|straordinario|periodo_effettivo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>1, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Numero di Ore","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"n. dipendenti autorizzati e n. di coloro che lo hanno effettivamente svolto","align"=>"center","css"=>array("background"=>"#efefef"))),false);
            $section->AddTextField("comune|straordinario|ore_max","Autorizzate",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1));
            $section->AddTextField("comune|straordinario|ore_effettive","Effettive",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $section->AddTextField("comune|straordinario|dipendenti_max","Autorizzati",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $section->AddTextField("comune|straordinario|dipendenti_effettivi","Effettivi",array("required"=>true,"labelWidth"=>120,"bottomPadding"=>0,"validateFunction"=>"IsNumber","gravity"=>1),false);
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Oneri");
            $section->AddTextField("comune|oneri|estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"labelWidth"=>220,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("comune|oneri|dettagli_cpdel","Cpdel",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"));
            $section->AddTextField("comune|oneri|dettagli_irap","Irap",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("comune|oneri|dettagli_altro","Altro",array("required"=>true,"gravity"=>1,"labelWidth"=>90,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("comune|oneri|dettagli_altro_desc","Altro (Descrizione)",array("gravity"=>1,"labelWidth"=>150));
            $section->AddSpacer();
            $wnd->AddGenericObject($section);
            
            $section=new AA_FieldSet(uniqid(),"Missioni");
            $section->AddTextField("comune|missioni|estremi_autorizzazione","Estremi provv. di autorizzazione.",array("gravity"=>1,"labelWidth"=>230,"placeholder"=>"es. prot. n.12345 del 2024-02-25", "bottomLabel"=>"*Estremi dei provv. di autorizzazione."));
            $section->AddTextField("comune|missioni|estremi_liquidazione","Estremi provv. di liquidazione",array("gravity"=>1, "labelWidth"=>230,"placeholder"=>"es. prot. n.12345 del 2024-02-25","bottomLabel"=>"*Estremi dei provv. di liquidazione."));
            $section->AddTextField("comune|missioni|km","Km percorsi",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"labelWidth"=>110));
            $section->AddTextField("comune|missioni|dipendenti","n. dipendenti che le hanno effettuate",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>2,"labelWidth"=>300),false);
            $section->AddTextField("comune|missioni|importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>1,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."));
            $wnd->AddGenericObject($section,false);

            $wnd->AddTextareaField("comune|straordinario|note","Note",array("gravity"=>1,"labelWidth"=>60,"bottomPadding"=>0));

            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRendicontiPersonaleIndeterminato");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica spese per straordinario e missioni del comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti personale comune
    public function Template_GetSierComuneRendicontiPersonaleDeterminatoModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRendicontiPersonaleModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['id_personale_det']=uniqid();
            $form_data['estremi_assunzione']="";
            $form_data['estremi_liquidazione']="";
            $form_data['estremi_pagamento']="";
            $form_data['oneri_pagamento']="";
            $form_data['tipologia']="";
            $form_data['qualifica']="";
            $form_data['periodo_dal']="";
            $form_data['periodo_al']="";
            $form_data['importo']=0;
            //$form_data['oneri_importo']=0;
            $form_data['oneri_cpdel']=0;
            $form_data['oneri_irap']=0;
            $form_data['oneri_altro']=0;
            $form_data['oneri_altro_desc']="";

            $rendiconti=$comune->GetRendiconti(true);
            if(isset($rendiconti['personale_det']) && isset($_REQUEST['id_personale_det']) && isset($rendiconti['personale_det'][$_REQUEST['id_personale_det']]) && $_REQUEST['id_personale_det'] !="")
            {
                $form_data['id_personale_det']=$_REQUEST['id_personale_det'];
                $form_data['estremi_assunzione']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_assunzione'];
                $form_data['estremi_liquidazione']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_liquidazione'];
                $form_data['estremi_pagamento']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_pagamento'];
                $form_data['oneri_pagamento']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_pagamento'];
                $form_data['tipologia']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['tipologia'];
                $form_data['qualifica']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['qualifica'];
                $form_data['periodo_dal']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['periodo_dal'];
                $form_data['periodo_al']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['periodo_al'];
                $form_data['importo']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['importo'],2,",",".");
                //$form_data['oneri_importo']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_importo'],2,",",".");
                $form_data['oneri_cpdel']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_cpdel'],2,",",".");
                $form_data['oneri_irap']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_irap'],2,",",".");
                $form_data['oneri_altro']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_altro'],2,",",".");
                $form_data['oneri_altro_desc']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_altro_desc'];
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica/aggiunta competenze personale a tempo determinato del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(28);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1200);
            $wnd->SetHeight(800);
            
            $section=new AA_FieldSet(uniqid(),"Competenze per personale assunto esclusivamente con rapporto di lavoro subordinato a tempo determinato");
            //section->AddTextField("tipologia","Tipologia contrattuale",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Indicare la tipologia contrattuale."));
            $section->AddTextField("qualifica","Qualifica funzionale",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Indicare la qualifica funzionale del personale contrattualizzato."));
            $section->AddTextField("estremi_assunzione","Estremi provvedimenti di assunzione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di assunzione."));
            $section->AddTextField("estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $section->AddTextField("estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo di assunzione","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddSpacer(false);
            $section->AddDateField("periodo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>2, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."));
            $section->AddDateField("periodo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>2, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddSpacer(false);
            $section->AddTextField("importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>3,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."),false);
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Oneri per personale assunto esclusivamente con rapporto di lavoro subordinato a tempo determinato");
            $section->AddTextField("oneri_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"labelWidth"=>220,"placeholder"=>"es. n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("oneri_cpdel","Cpdel",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"));
            $section->AddTextField("oneri_irap","Irap",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("oneri_altro","Altro",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"),false);
            $section->AddSpacer(false);
            $section->AddSpacer(false);
            $section->AddSpacer(false);
            $section->AddTextField("oneri_altro_desc","Altro (Descrizione)",array("gravity"=>4,"labelWidth"=>130));
            $section->AddSpacer(false);
            $section->AddSpacer();
            //$section->AddTextField("oneri_importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>3,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo corrisposto (es. 1234,56)."),false);
            $wnd->AddGenericObject($section);
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRendicontiPersonaleDeterminato");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze personale tempo indeterminato comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify rendiconti personale comune
    public function Template_GetSierOCRendicontiPersonaleDeterminatoModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCComuneRendicontiPersonaleModifyDlg_".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica competenze personale a tempo determinato", $this->id);

        
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp("id");
            $form_data['id_personale_det']=uniqid();
            $form_data['estremi_assunzione']="";
            $form_data['estremi_liquidazione']="";
            $form_data['estremi_pagamento']="";
            $form_data['oneri_pagamento']="";
            $form_data['tipologia']="";
            $form_data['qualifica']="";
            $form_data['periodo_dal']="";
            $form_data['periodo_al']="";
            $form_data['importo']=0;
            //$form_data['oneri_importo']=0;
            $form_data['oneri_cpdel']=0;
            $form_data['oneri_irap']=0;
            $form_data['oneri_altro']=0;
            $form_data['oneri_altro_desc']="";

            $rendiconti=$comune->GetRendiconti(true);
            if(isset($rendiconti['personale_det']) && isset($_REQUEST['id_personale_det']) && isset($rendiconti['personale_det'][$_REQUEST['id_personale_det']]) && $_REQUEST['id_personale_det'] !="")
            {
                $form_data['id_personale_det']=$_REQUEST['id_personale_det'];
                $form_data['estremi_assunzione']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_assunzione'];
                $form_data['estremi_liquidazione']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_liquidazione'];
                $form_data['estremi_pagamento']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['estremi_pagamento'];
                $form_data['oneri_pagamento']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_pagamento'];
                $form_data['tipologia']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['tipologia'];
                $form_data['qualifica']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['qualifica'];
                $form_data['periodo_dal']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['periodo_dal'];
                $form_data['periodo_al']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['periodo_al'];
                $form_data['importo']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['importo'],2,",",".");
                //$form_data['oneri_importo']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_importo'],2,",",".");
                $form_data['oneri_cpdel']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_cpdel'],2,",",".");
                $form_data['oneri_irap']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_irap'],2,",",".");
                $form_data['oneri_altro']=AA_Utils::number_format($rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_altro'],2,",",".");
                $form_data['oneri_altro_desc']=$rendiconti['personale_det'][$_REQUEST['id_personale_det']]['oneri_altro_desc'];
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica/aggiunta competenze personale a tempo determinato del comune di ".$comune->GetProp("denominazione"), $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(280);
            $wnd->SetBottomPadding(28);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(1200);
            $wnd->SetHeight(800);
            
            $section=new AA_FieldSet(uniqid(),"Competenze per personale assunto esclusivamente con rapporto di lavoro subordinato a tempo determinato");
            //section->AddTextField("tipologia","Tipologia contrattuale",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Indicare la tipologia contrattuale."));
            $section->AddTextField("qualifica","Qualifica funzionale",array("required"=>true,"gravity"=>1, "bottomLabel"=>"*Indicare la qualifica funzionale del personale contrattualizzato."));
            $section->AddTextField("estremi_assunzione","Estremi provvedimenti di assunzione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di assunzione."));
            $section->AddTextField("estremi_liquidazione","Estremi provvedimenti di liquidazione",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei  provvedimenti di liquidazione."));
            $section->AddTextField("estremi_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddGenericObject(new AA_JSON_Template_Generic("",array("view"=>"label","label"=>"Periodo di assunzione","align"=>"center","css"=>array("background"=>"#efefef"))));
            $section->AddSpacer(false);
            $section->AddDateField("periodo_dal","Data inizio",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>2, "bottomLabel"=>"*data inizio (YYYY-mm-gg)."));
            $section->AddDateField("periodo_al","Data fine",array("required"=>true,"labelWidth"=>120,"validateFunction"=>"IsIsoDate","gravity"=>2, "bottomLabel"=>"*data fine (YYYY-mm-gg)."),false);
            $section->AddSpacer(false);
            $section->AddTextField("importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>3,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo presentato (es. 1234,56)."),false);
            $wnd->AddGenericObject($section);

            $section=new AA_FieldSet(uniqid(),"Oneri per personale assunto esclusivamente con rapporto di lavoro subordinato a tempo determinato");
            $section->AddTextField("oneri_pagamento","Estremi mandati di pagamento",array("required"=>true,"gravity"=>1,"labelWidth"=>220,"placeholder"=>"es. prot.n. 1234 del 2024-02-23", "bottomLabel"=>"*Estremi dei mandati di pagamento."));
            $section->AddTextField("oneri_cpdel","Cpdel",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"));
            $section->AddTextField("oneri_irap","Irap",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"),false);
            $section->AddTextField("oneri_altro","Altro",array("required"=>true,"gravity"=>1,"labelWidth"=>60,"validateFunction"=>"IsNumber"),false);
            $section->AddSpacer(false);
            $section->AddSpacer(false);
            $section->AddSpacer(false);
            $section->AddTextField("oneri_altro_desc","Altro (Descrizione)",array("gravity"=>4,"labelWidth"=>130));
            $section->AddSpacer(false);
            //$section->AddTextField("oneri_importo","Importo presentato",array("required"=>true,"validateFunction"=>"IsNumber","gravity"=>3,"labelWidth"=>150, "bottomLabel"=>"*Importo complessivo corrisposto (es. 1234,56)."),false);
            $wnd->AddGenericObject($section);
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRendicontiPersonaleDeterminato");

            return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica competenze personale tempo indeterminato comune di ".$comune->GetProp("denominazione"), $this->id);
            $wnd->AddView(new AA_JSON_Template_Template("",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati coalizioni comune
    public function Template_GetSierComuneRisultatiCoalizioniModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiCoalizioniModifyDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidati Presidente", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidati Presidente", $this->id);
        $coalizioni=$object->GetCoalizioni();

        if(sizeof($coalizioni)==0)
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti candidati Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono coalizioni impostate.")));

            return $wnd;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                $form_data[$idCoalizione]=0;
            }

            $risultati=$comune->GetRisultati(true);
            foreach($risultati['voti_presidente'] as $key=>$val)
            {
                if(isset($form_data[$key])) $form_data[$key]=$val;
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidati Presidente", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(230);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(120+90*sizeof($coalizioni));
            
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                //coalizioni
                $wnd->AddTextField("$idCoalizione",$curCoalizione->GetProp("nome_candidato"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*Inserire soli il numero dei voti validi."));
            }
           
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRisultatiCoalizioni");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono colaizioni impostate.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati preferenze comune
    public function Template_GetSierComuneRisultatiPreferenzeModifyDlg($object=null,$comune=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiCoalizioniModifyDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($candidato instanceof AA_SierCandidato)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        
        $risultati=$comune->GetRisultati(true);
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['id_candidato']=$candidato->GetProp('id');
            $form_data['voti']=0;
            if(isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$_REQUEST['id_candidato']]))
            {
                $form_data['voti']=$risultati['voti_candidato'][$_REQUEST['id_candidato']]['voti'];
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidato", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(100);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(340);

            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_Label",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display:flex;flex-direction:column; justify-content:center;align-items:center; width:100%;'><span style='font-weight: 900;font-size: larger'>".$candidato->GetProp("cognome")." ".$candidato->GetProp("nome")."</span><span>".$candidato->GetProp("lista")."</span></div>")));
            //Candidato
            //$wnd->AddTextField("id_candidato","Candidato",array("required"=>true,"bottomLabel"=>"*Inserire il nominativo del candidato.", "placeholder"=>"...","suggest"=>array("template"=>"#denominazione#","url"=>$this->taskManagerUrl."?task=GetSierListaCandidati&id=".$object->GetId())));
            
            //voti
            $wnd->AddTextField("voti","Voti",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*Inserire solo il numero dei voti validi."));
           
            $wnd->SetDefaultFocusedItem("voti");

            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRisultatiPreferenze");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono colaizioni impostate.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati preferenze comune multi
    public function Template_GetSierComuneRisultatiPreferenzeModifyMultiDlg($object=null,$comune=null,$lista=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiCoalizioniModifyDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($lista instanceof AA_SierLista)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        
        $risultati=$comune->GetRisultati(true);
        $candidati=$object->GetCandidati(null,$lista,$comune->GetProp("id_circoscrizione"));

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
           
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                $form_data['candidato_'.$idCandidato]=0;
                if(isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$idCandidato]))
                {
                    $form_data['candidato_'.$idCandidato]=$risultati['voti_candidato'][$idCandidato]['voti'];
                }
            }
            
            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidato", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(350);
            $wnd->SetBottomPadding(18);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(900);
            $wnd->SetHeight(190+sizeof($candidati)*26);

            //Candidato
            $curCol=0;
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                //$wnd->AddTextField("id_candidato","Candidato",array("required"=>true,"bottomLabel"=>"*Inserire il nominativo del candidato.", "placeholder"=>"...","suggest"=>array("template"=>"#denominazione#","url"=>$this->taskManagerUrl."?task=GetSierListaCandidati&id=".$object->GetId())));
                
                if($curCol%2) 
                {
                    $wnd->AddTextField("candidato_".$idCandidato,$curCandidato->GetProp("cognome")." ".$curCandidato->GetProp("nome"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"),false);
                }
                else
                {
                    $wnd->AddTextField("candidato_".$idCandidato,$curCandidato->GetProp("cognome")." ".$curCandidato->GetProp("nome"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"));
                    $curCol=0;
                }

                $curCol++;
            }

            if($curCol < 2)
            {
                $wnd->AddSpacer(false);
            }

            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_footer",array("type"=>"clean","template"=>"<div>*Inserire solo il numero dei voti validi.</div>")));
                       
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRisultatiPreferenzeMulti");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono colaizioni impostate.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati preferenze comune
    public function Template_GetSierOCModifyRisultatiPreferenzeDlg($object=null,$comune=null,$candidato=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyRisultatiCoalizioniDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($candidato instanceof AA_SierCandidato)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);

        $risultati=$comune->GetRisultati(true);
        if(($object->GetAbilitazioni() & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            $form_data['id_candidato']=$candidato->GetProp('id');
            $form_data['voti']=0;
            if(isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$_REQUEST['id_candidato']]))
            {
                $form_data['voti']=$risultati['voti_candidato'][$_REQUEST['id_candidato']]['voti'];
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidato", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(100);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(340);

            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_Label",array("type"=>"clean","autoheight"=>true,"template"=>"<div style='display:flex;flex-direction:column; justify-content:center;align-items:center; width:100%;'><span style='font-weight: 900;font-size: larger'>".$candidato->GetProp("cognome")." ".$candidato->GetProp("nome")."</span><span>".$candidato->GetProp("lista")."</span></div>")));
            //voti
            $wnd->AddTextField("voti","Voti",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*Inserire soli il numero dei voti validi."));
           
            $wnd->SetDefaultFocusedItem("voti");

            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            //if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("Update_OC_ComuneRisultatiPreferenze");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti candidato", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Caricamento risultati disabilitato.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati preferenze comune
    public function Template_GetSierOCModifyRisultatiPreferenzeMultiDlg($object=null,$comune=null,$lista=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyRisultatiCoalizioniDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);
        if(!($lista instanceof AA_SierLista)) return new AA_GenericWindowTemplate($id, "Modifica voti candidato", $this->id);

        $risultati=$comune->GetRisultati(true);
        $candidati=$object->GetCandidati(null,$lista,$comune->GetProp("id_circoscrizione"));
        if(($object->GetAbilitazioni() & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
           
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                $form_data['candidato_'.$idCandidato]=0;
                if(isset($risultati['voti_candidato']) && isset($risultati['voti_candidato'][$idCandidato]))
                {
                    $form_data['candidato_'.$idCandidato]=$risultati['voti_candidato'][$idCandidato]['voti'];
                }
            }
            
            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidato", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(350);
            $wnd->SetBottomPadding(18);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(900);
            $wnd->SetHeight(190+sizeof($candidati)*26);

            //Candidato
            $curCol=0;
            foreach($candidati as $idCandidato=>$curCandidato)
            {
                //$wnd->AddTextField("id_candidato","Candidato",array("required"=>true,"bottomLabel"=>"*Inserire il nominativo del candidato.", "placeholder"=>"...","suggest"=>array("template"=>"#denominazione#","url"=>$this->taskManagerUrl."?task=GetSierListaCandidati&id=".$object->GetId())));
                
                if($curCol%2) 
                {
                    $wnd->AddTextField("candidato_".$idCandidato,$curCandidato->GetProp("cognome")." ".$curCandidato->GetProp("nome"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"),false);
                }
                else
                {
                    $wnd->AddTextField("candidato_".$idCandidato,$curCandidato->GetProp("cognome")." ".$curCandidato->GetProp("nome"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"));
                    $curCol=0;
                }

                $curCol++;
            }

            if($curCol < 2)
            {
                $wnd->AddSpacer(false);
            }

            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_footer",array("type"=>"clean","template"=>"<div>*Inserire solo il numero dei voti validi.</div>")));
                       
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            //if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("Update_OC_ComuneRisultatiPreferenzeMulti");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti candidato", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Caricamento risultati disabilitato.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati coalizioni comune
    public function Template_GetSierComuneRisultatiListeModifyDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierComuneRisultatiListeModifyDlg".uniqid();
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti Liste circoscrizionali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti voti Liste circoscrizionali", $this->id);
        $liste=$object->GetListe(null,$comune->GetProp('id_circoscrizione'));

        if(sizeof($liste)==0)
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Liste circoscrizionali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono liste impostate.")));

            return $wnd;
        }

        $listeToAdd=array();
        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            
            foreach($liste as $idLista=>$curLista)
            {
                $candidati=$object->GetCandidati(null,$curLista,$comune->GetProp("id_circoscrizione"));
                if(sizeof($candidati)>0) 
                {
                    $form_data["lista_".$idLista]=0;
                    $listeToAdd[$idLista]=$curLista;
                }
            }

            $risultati=$comune->GetRisultati(true);
            if(isset($risultati['voti_lista']))
            {
                foreach($risultati['voti_lista'] as $key=>$val)
                {
                    if(isset($form_data["lista_".$key])) $form_data["lista_".$key]=$val;
                }    
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti liste circoscrizionali", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(300);
            $wnd->SetBottomPadding(18);
            $wnd->EnableValidation();
            if(sizeof($liste)>=3) $wnd->SetWidth(1280);
            else $wnd->SetWidth(400*sizeof($liste));
            $wnd->SetHeight(180+20*sizeof($liste));
            
            $numforRow=3;
            $curNumRow=0;
            $curCol=0;
            foreach($listeToAdd as $idLista=>$curLista)
            {
                //liste
                if($curNumRow%$numforRow) 
                {
                    $wnd->AddTextField("lista_".$idLista,$curLista->GetProp("denominazione"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"),false);
                    $curCol++;
                }
                else 
                {
                    $wnd->AddTextField("lista_".$idLista,$curLista->GetProp("denominazione"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"));
                    $curCol=1;
                }
                $curNumRow++;
            }

            for($curCol;$curCol<$numforRow;$curCol++)
            {
                $wnd->AddSpacer(false);
            }
           
            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_BottomNote",array("type"=>"clean","template"=>"<span style='font-size: smaller'>*Inserire solo il numero dei voti validi.</span>")));
            $wnd->EnableCloseWndOnSuccessfulSave();
            if(isset($_REQUEST['refresh']) && $_REQUEST['refresh'] !="") $wnd->enableRefreshOnSuccessfulSave();
            if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
            $wnd->SetSaveTask("UpdateSierComuneRisultatiListe");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Liste circoscrizionali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può modificare l'oggetto.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati generali comune
    public function Template_GetSierOCModifyRisultatiGeneraliDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyRisultatiGeneraliDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica risultati generali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica risultati generali", $this->id);

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
        $form_data['id']=$object->GetId();
        $form_data['id_sier']=$object->GetId();
        $form_data['id_comune']=$comune->GetProp('id');
        $form_data['sezioni_scrutinate']=0;
        $form_data['votanti_m']=0;
        $form_data['votanti_f']=0;
        $form_data['votanti_tot']=0;
        $form_data['schede_bianche']=0;
        $form_data['schede_nulle']=0;
        $form_data['voti_contestati_na_pre']=0;
        $form_data['voti_contestati_na_liste']=0;
        $form_data['schede_voti_nulli']=0;
        $form_data['voti_solo_presidente']=0;

        $risultati=$comune->GetRisultati(true);
        foreach($risultati as $key=>$val)
        {
            if(isset($form_data[$key])) $form_data[$key]=$val;
        }
        $form_data['votanti_tot']=$form_data['votanti_m']+$form_data['votanti_f'];

        $wnd=new AA_GenericFormDlg($id, "Modifica risultati generali", $this->id,$form_data,$form_data);
            
        $wnd->SetLabelAlign("right");
        $wnd->SetLabelWidth(330);
        $wnd->SetBottomPadding(32);
        $wnd->EnableValidation();
        
        $wnd->SetWidth(720);
        $wnd->SetHeight(800);
        
        //Sezioni scrutinate
        $wnd->AddTextField("sezioni_scrutinate","Sezioni scrutinate",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di sezioni scrutinate."));
        
        $section=new AA_FieldSet($id."_Section_RisultatiGeneraliVotanti","Dati sui votanti");
        //votanti maschi
        $section->AddTextField("votanti_m","Maschi",array("required"=>true,"gravity"=>1,"labelWidth"=>100, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti maschi."));
        //votanti femminie
        $section->AddTextField("votanti_f","Femmine",array("required"=>true,"gravity"=>1, "labelWidth"=>100,"validateFunction"=>"IsPositive","bottomLabel"=>"*numero dei votanti femmine."),false);
        
        $section->AddTextField("votanti_tot","Totale",array("required"=>true,"gravity"=>1, "labelWidth"=>100,"validateFunction"=>"IsPositive","bottomLabel"=>"*maschi + femmine."),false);
        $wnd->AddGenericObject($section);

        //schede bianche
        $wnd->AddTextField("schede_bianche","Schede bianche",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede bianche."));
        //schede nulle
        $wnd->AddTextField("schede_nulle","Schede nulle",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede nulle."));

        $wnd->AddTextField("schede_voti_nulli","Schede escl. con voti nulli",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero delle schede contenenti esclusivamente voti nulli."));

        //schede solo presidente
        $wnd->AddTextField("voti_solo_presidente","Schede valide solo per i candidati Presidente ",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero schede valide solo per i candidati Presidente."));

        $section=new AA_FieldSet($id."_Section_RisultatiGenerali","Schede contenenti voti contestati e non assegnati");
        //voti contestati non assegnati pre
        $section->AddTextField("voti_contestati_na_pre","al Presidente",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di schede contenti voti contestati e non assegnati (Presidente)."));
        //voti contestati non assegnati liste
        $section->AddTextField("voti_contestati_na_liste","alle Liste",array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*numero di schede contenti voti contestati e non assegnati (Liste)."));
        $wnd->AddGenericObject($section);

        $wnd->EnableCloseWndOnSuccessfulSave();
        $wnd->enableRefreshOnSuccessfulSave();
        //if(isset($_REQUEST['refresh_obj_id']) && $_REQUEST['refresh_obj_id'] !="") $wnd->SetRefreshObjId($_REQUEST['refresh_obj_id']);
        $wnd->SetSaveTask("Update_OC_ComuneRisultatiGenerali");

        return $wnd;    
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Modifica risultati generali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"L'utente corrente non può apportare modifiche.")));

            return $wnd;
        }
    }

    //Template dlg modifycomunicazioni comune
    public function Template_GetSierOCModifyComunicazioniDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyComunicazioniDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Comunicazioni operazioni uffici elettorali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Comunicazioni operazioni uffici elettorali", $this->id);

        $giornate=$object->GetGiornate();
        $comunicazioni=$comune->GetComunicazioni(true);
        $giornateKeys=array_keys($giornate);
        $now=date("Y-m-d");
        $form_data=array();
        $sections=array();
        $inizio=false;
        foreach($giornate as $giornata=>$curValues)
        {
            $readonly=true;
            if($giornata<=$now) $readonly=false;
            $label_inizio="Apertura operazioni uffici elettorali di sezione";
            if(sizeof($sections)==0) $label_inizio="Avvenuta costituzione degli uffici elettorali di sezione e riscontro materiale elettorale";
            $form_data[$giornata."_inizio"]=0;
            if(isset($comunicazioni[$giornata]['inizio']) && $comunicazioni[$giornata]['inizio']>0) $form_data[$giornata."_inizio"]=1;
            $form_data[$giornata."_fine"]=0;
            if(isset($comunicazioni[$giornata]['fine']) && $comunicazioni[$giornata]['fine']>0) $form_data[$giornata."_fine"]=1;

            $section=new AA_FieldSet($id."_Section_".$giornata,"Comunicazioni per la giornata del ".$giornata);
            $section->AddCheckBoxField($giornata."_inizio", $label_inizio,array("readonly"=>$readonly));
            $section->AddCheckBoxField($giornata."_fine", "Chiusura operazioni uffici elettorali di sezione",array("readonly"=>$readonly));
            $sections[]=$section;
        }

        if(($object->GetAbilitazioni() & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI)>0)
        {
            $risultati=$comune->GetRisultati(true);
            foreach($risultati as $key=>$val)
            {
                if(isset($form_data[$key])) $form_data[$key]=$val;
            }

            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');

            $wnd=new AA_GenericFormDlg($id, "Comunicazioni operazioni uffici elettorali", $this->id,$form_data,$form_data);
            
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(600);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(800);
            $wnd->SetHeight(600);
            
            foreach($sections as $curSection)
            {
                $wnd->AddGenericObject($curSection);
            }
            
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneComunicazioni");
            
            return $wnd;        
        }
        else
        {
            //to do view only
            $wnd = new AA_GenericWindowTemplate($id,"Comunicazioni operazioni uffici elettorali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"La modifica delle comunicazioni è disabilitata")));

            return $wnd;
        }
    }

    //Template dlg modify risultati generali comune
    public function Template_GetSierOCModifyRisultatiCoalizioniDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyRisultatiCoalizioniDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti candidati Presidente", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti candidati Presidente", $this->id);
        $coalizioni=$object->GetCoalizioni();

        if(sizeof($coalizioni)==0)
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti candidati Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono coalizioni impostate.")));

            return $wnd;
        }

        if(($object->GetUserCaps($this->oUser) & AA_Const::AA_PERMS_WRITE)>0)
        {
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
            
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                $form_data[$idCoalizione]=0;
            }

            $risultati=$comune->GetRisultati(true);
            foreach($risultati['voti_presidente'] as $key=>$val)
            {
                if(isset($form_data[$key])) $form_data[$key]=$val;
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti candidati Presidente", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(230);
            $wnd->SetBottomPadding(32);
            $wnd->EnableValidation();
            
            $wnd->SetWidth(450);
            $wnd->SetHeight(120+90*sizeof($coalizioni));
            
            foreach($coalizioni as $idCoalizione=>$curCoalizione)
            {
                //coalizioni
                $wnd->AddTextField("$idCoalizione",$curCoalizione->GetProp("nome_candidato"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive","bottomLabel"=>"*Inserire soli il numero dei voti validi."));
            }
           
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRisultatiCoalizioni");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti Presidente", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non ci sono coalizioni impostate.")));

            return $wnd;
        }
    }

    //Template dlg modify risultati liste comune (OC)
    public function Template_GetSierOCModifyRisultatiListeDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_GetSierOCModifyRisultatiListeDlg";
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Modifica voti Liste circoscrizionali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Modifica voti Liste circoscrizionali", $this->id);
        $liste=$object->Getliste(null,$comune->GetProp("id_circoscrizione"));

        if(sizeof($liste)==0)
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti liste circoscrizionali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Non sono presenti liste.")));

            return $wnd;
        }

        if(($object->GetAbilitazioni()&AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI)>0)
        {
            $listeToAdd=array();
            $form_data['id']=$object->GetId();
            $form_data['id_sier']=$object->GetId();
            $form_data['id_comune']=$comune->GetProp('id');
        
            foreach($liste as $idLista=>$curLista)
            {
                $candidati=$object->GetCandidati(null,$curLista,$comune->GetProp("id_circoscrizione"));
                if(sizeof($candidati)>0) 
                {
                    $form_data["lista_".$idLista]=0;
                    $listeToAdd[$idLista]=$curLista;
                }
            }

            $risultati=$comune->GetRisultati(true);
            foreach($risultati['voti_lista'] as $key=>$val)
            {
                if(isset($form_data["lista_".$key])) $form_data["lista_".$key]=$val;
            }

            $wnd=new AA_GenericFormDlg($id, "Modifica voti liste circoscrizionali", $this->id,$form_data,$form_data);
                
            $wnd->SetLabelAlign("right");
            $wnd->SetLabelWidth(190);
            $wnd->SetBottomPadding(18);
            $wnd->EnableValidation();
            if(sizeof($liste)>=3) $wnd->SetWidth(1280);
            else $wnd->SetWidth(400*sizeof($liste));
            $wnd->SetHeight(180+20*sizeof($liste));
            
            $numforRow=3;
            $curNumRow=0;
            $curCol=0;
            foreach($listeToAdd as $idLista=>$curLista)
            {
                //liste
                if($curNumRow%$numforRow) 
                {
                    $wnd->AddTextField("lista_".$idLista,$curLista->GetProp("denominazione"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"),false);
                    $curCol++;
                }
                else 
                {
                    $wnd->AddTextField("lista_".$idLista,$curLista->GetProp("denominazione"),array("required"=>true,"gravity"=>1, "validateFunction"=>"IsPositive"));
                    $curCol=1;
                }
                $curNumRow++;
            }

            for($curCol;$curCol<$numforRow;$curCol++)
            {
                $wnd->AddSpacer(false);
            }
           
            $wnd->AddGenericObject(new AA_JSON_Template_Template($id."_BottomNote",array("type"=>"clean","template"=>"<span style='font-size: smaller'>*Inserire solo il numero dei voti validi.</span>")));
            $wnd->EnableCloseWndOnSuccessfulSave();
            $wnd->enableRefreshOnSuccessfulSave();
            $wnd->SetSaveTask("Update_OC_ComuneRisultatiListe");

            return $wnd;    
        }
        else
        {
            $wnd = new AA_GenericWindowTemplate($id,"Modifica voti lite circoscrizionali", $this->id);
            $wnd->AddView(new AA_JSON_Template_Template($id."_Fake",array("template"=>"Modifica risultati disabilitata.")));

            return $wnd;
        }
    }

    //Template dlg risutati user
    public function Template_GetSierComuneRisultatiViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_RISULTATI_COMUNALI;
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Gestione risultati", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Gestione risultati", $this->id);

        $wnd = new AA_GenericWindowTemplate($id, "Gestione risultati comune di ".$comune->GetProp("denominazione"), $this->id);

        $layout=$this->Template_GetSierComuneRisultatiViewLayout($object,$comune,$id);
        $wnd->AddView($layout);
        return $wnd;
    }

    //Template dlg rendiconti user
    public function Template_GetSierComuneRendicontiViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_RENDICONTI_COMUNALI;
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Gestione rendiconti", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Gestione rendiconti", $this->id);

        $wnd = new AA_GenericWindowTemplate($id, "Gestione rendiconti comune di ".$comune->GetProp("denominazione"), $this->id);

        $layout=$this->Template_GetSierComuneRendicontiViewLayout($object,$comune,$id);
        $wnd->AddView($layout);
        return $wnd;
    }

    //Template dlg report
    public function Template_GetSierReportViewDlg($object=null,$circoscrizione=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_REPORT_RISULTATI;
        $wnd = new AA_GenericWindowTemplate($id, "Report affluenza e risultati", $this->id,array("css"=>array("background-color"=>"#f4f5f9")));
        $wnd->SetWidth(380);

        $layout_tab=new AA_JSON_Template_Generic($id . "TabBar", array(
            "view" => "tabbar",
            "borderless" => true,
            "value" => $id . "_".static::AA_UI_LAYOUT_REPORT_RISULTATI."_AffluenzaBox",
            "css" => "AA_Header_TabBar",
            "multiview" => true,
            "view_id" => $id . "_".static::AA_UI_LAYOUT_REPORT_RISULTATI."_Multiview",
            "options" => array(array("id"=>$id . "_".static::AA_UI_LAYOUT_REPORT_RISULTATI."_AffluenzaBox","value"=>"Affluenza"),array("value"=>"Risultati","id"=>$id . "_".static::AA_UI_LAYOUT_REPORT_RISULTATI."_PresidentiBox"))
        ));
        $wnd->AddView($layout_tab);
        $layout=$this->Template_GetSierReportViewLayout($object,$circoscrizione,$comune,$id);
        $wnd->AddView($layout);
        return $wnd;
    }

    //layout dlg report
    public function Template_GetSierReportViewLayout($object=null,$circoscrizione=null,$comune=null,$id="")
    {
        $id.="_".static::AA_UI_LAYOUT_REPORT_RISULTATI;

        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean","filtered"=>true,"filter_id"=>$id));
        
        $multiview = new AA_JSON_Template_Multiview($id . "Multiview", array("type" =>"clean"));
        $multiview->AddEventHandler("onViewChange","SierWebAppRefreshUi",null,$this->GetId());

        //Aggiornamento
        //$multiview->addCell(new AA_JSON_Template_Template($id."_AggiornamentoBox",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"preview"=>true,"template"=>"<div style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; font-size: larger; font-weight: 600; color: rgb(0, 102, 153);' class='blinking'>Caricamento in corso...</div>")));
        
        //--------  Affluenza  ----------
        $layout_affluenza=new AA_JSON_Template_Layout($id."_AffluenzaBox",array("type"=>"clean"));
        $template_content="<div id='".$id."_AffluenzaContent'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
        $template_content.="</div>";
        $template_footer="<div style='display: flex; justify-content: center; align-items: center; width: min-content; height: 100%; overflow: visible; white-space:nowrap;' class='scrollTextFromLeft'><span>#footer#</span></div>";

        $layout_affluenza->AddRow(new AA_JSON_Template_Template($id."_Affluenza",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
        $layout_affluenza->AddRow(new AA_JSON_Template_Template($id."_Affluenza_Footer",array("height"=>24,"css"=>array("background-color"=>"#3186ac","color"=>"#fff","text-transform"=>"uppercase"),"filtered"=>true,"template"=>$template_footer,"data"=>array("footer"=>"&nbsp;"))));
        $multiview->addCell($layout_affluenza);

        $layout_affluenza=new AA_JSON_Template_Layout($id."_AffluenzaCircoscrizionaleBox",array("type"=>"clean"));
        $template_content="<div id='".$id."_AffluenzaCircoscrizionaleContent'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
        $template_content.="</div>";
        $template_footer="<div style='display: flex; justify-content: center; align-items: center; width: min-content; height: 100%; overflow: visible; white-space:nowrap;' class='scrollTextFromLeft'><span>#footer#</span></div>";

        $layout_affluenza->AddRow(new AA_JSON_Template_Template($id."_AffluenzaCircoscrizionale",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
        $layout_affluenza->AddRow(new AA_JSON_Template_Template($id."_AffluenzaCircoscrizionale_Footer",array("height"=>24,"css"=>array("background-color"=>"#3186ac","color"=>"#fff","text-transform"=>"uppercase"),"filtered"=>true,"template"=>$template_footer,"data"=>array("footer"=>"&nbsp;"))));
        $multiview->addCell($layout_affluenza);

        //-------------------------------

        //Risultati presidenti
        $layout_presidenti=new AA_JSON_Template_Layout($id."_PresidentiBox",array("type"=>"clean"));
        //dettaglio visualizzazione
        $form=new AA_JSON_Template_Form($id."_Form",array(
            "elementsConfig"=>array("labelWidth"=>180, "labelAlign"=>"left", "labelPosition"=>"top","bottomPadding"=>15),
            "padding"=>15,
            "css"=>array("background-color"=>"transparent !important")
        ));
        $form_layout=new AA_JSON_Template_Layout($id."_FormContentBox",array("type"=>"space", "css"=>array("border-radius"=>"15px")));
        $form_layout->AddRow(new AA_JSON_Template_Search($id."_PresidentiFilterParams",array("label"=>"Livello di dettaglio","value"=>"tutta la Regione Sardegna", "tooltip"=>"Inserisci o seleziona il comune o la circoscrizione di cui vuoi visualizzare il dettaglio.","clear"=>true,"bottomLabel"=>"Inserisci le iniziali del comune o della circoscrizione.")));
        $form->AddRow($form_layout);
        //$layout_presidenti->AddRow($form);
        $template_content="<div id='".$id."_PresidentiContent'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
        $template_content.="</div>";
        $template_footer="<div style='display: flex; justify-content: center; align-items: center; width: min-content; height: 100%; overflow: visible; white-space:nowrap;' class='scrollTextFromLeft'><span>#footer#</span></div>";

        $layout_presidenti->AddRow(new AA_JSON_Template_Template($id."_Presidenti",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
        $layout_presidenti->AddRow(new AA_JSON_Template_Template($id."_Presidenti_Footer",array("height"=>24,"css"=>array("background-color"=>"#3186ac","color"=>"#fff","text-transform"=>"uppercase"),"filtered"=>true,"template"=>$template_footer,"data"=>array("footer"=>"&nbsp;"))));

        $multiview->addCell($layout_presidenti);
        //---------------

        //Risultati liste
        $layout_liste=new AA_JSON_Template_Layout($id."_ListeBox",array("type"=>"clean"));
        
        $template_content="<div id='".$id."_ListeContent'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
        $template_content.="</div>";
        $template_footer="<div style='display: flex; justify-content: center; align-items: center; width: min-content; height: 100%; overflow: visible; white-space:nowrap;' class='scrollTextFromLeft'><span>#footer#</span></div>";

        $layout_liste->AddRow(new AA_JSON_Template_Template($id."_Liste",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
        $layout_liste->AddRow(new AA_JSON_Template_Template($id."_Liste_Footer",array("height"=>24,"css"=>array("background-color"=>"#3186ac","color"=>"#fff","text-transform"=>"uppercase"),"filtered"=>true,"template"=>$template_footer,"data"=>array("footer"=>"&nbsp;"))));

        $multiview->addCell($layout_liste);
        //---------------

        //Risultaticandidati
        $layout_liste=new AA_JSON_Template_Layout($id."_CandidatiBox",array("type"=>"clean"));

        $template_content="<div id='".$id."_CandidatiContent'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
        $template_content.="</div>";
        $template_footer="<div style='display: flex; justify-content: center; align-items: center; width: min-content; height: 100%; overflow: visible; white-space:nowrap;' class='scrollTextFromLeft'><span>#footer#</span></div>";

        $layout_liste->AddRow(new AA_JSON_Template_Template($id."_Candidati",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
        $layout_liste->AddRow(new AA_JSON_Template_Template($id."_Candidati_Footer",array("height"=>24,"css"=>array("background-color"=>"#3186ac","color"=>"#fff","text-transform"=>"uppercase"),"filtered"=>true,"template"=>$template_footer,"data"=>array("footer"=>"&nbsp;"))));

        $multiview->addCell($layout_liste);
        //---------------

         //Tree view select
         $layout_liste=new AA_JSON_Template_Layout($id."_DettaglioTreeBox",array("type"=>"clean"));

         $template_content="<div id='AA_SierWebAppSideMenuBox'style='display: flex; justify-content: center; align-items: center;width: 100%; height: 100%; border-radius:15px; background-color:#ebedf0'>";
         $template_content.="</div>";
 
         $layout_liste->AddRow(new AA_JSON_Template_Template($id."_DettaglioTreeBoxContent",array("css"=>array("background-color"=>"#f4f5f9"),"filtered"=>true,"template"=>$template_content)));
         $multiview->addCell($layout_liste);
         //---------------
         
        $layout->AddRow($multiview);
        return $layout;
    }
 
    //Template dlg affluenza user
    public function Template_GetSierComuneAffluenzaViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_AFFLUENZA_COMUNALE;
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Gestione affluenza", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Gestione affluenza", $this->id);


        $wnd = new AA_GenericWindowTemplate($id, "Affluenza alle urne - comune di ".$comune->GetProp("denominazione"), $this->id);

        $layout=$this->Template_GetSierComuneAffluenzaViewLayout($object,$comune,$id);
        $wnd->AddView($layout);
        return $wnd;
    }

    //Template layout affluenza
    public function Template_GetSierComuneAffluenzaViewLayout($object=null,$comune=null,$id="")
    {
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero dei dati del comune.</span></div>")));
            return $layout;
        }

        $id.="_".static::AA_UI_LAYOUT_AFFLUENZA_COMUNALE;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));
        $toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer")));

        //nuovo
        if(($object->GetUserCaps($this->oUser)&AA_Const::AA_PERMS_WRITE) > 0)
        {
            $modify_btn=new AA_JSON_Template_Generic($id."_AddNewAffluenza_btn",array(
                "view"=>"button",
                 "type"=>"icon",
                 "icon"=>"mdi mdi-account-plus",
                 "label"=>"Aggiungi",
                 "css"=>"webix_primary",
                 "align"=>"right",
                 "width"=>120,
                 "tooltip"=>"Aggiungi nuovo dato sull'affluenza",
                 "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneAffluenzaAddNewDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
            ));
            $toolbar->AddElement($modify_btn);    
        }
        
        $layout->addRow($toolbar);

        $columns=array(
            array("id"=>"giornata","header"=>array("<div style='text-align: center'>Giornata</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"ore_12","header"=>array("<div style='text-align: center'>Votanti ore 12</div>",array("content"=>"textFilter")),"fillspace"=>90, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ore_19","header"=>array("<div style='text-align: center'>Votanti ore 19</div>",array("content"=>"textFilter")),"fillspace"=>90, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ore_22","header"=>array("<div style='text-align: center'>Votanti ore 22</div>",array("content"=>"textFilter")),"fillspace"=>90, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>120, "css"=>array("text-align"=>"center"))
        );

        $data=array();
        $affluenza=$comune->GetAffluenza(true);
        if(sizeof($affluenza) > 0)
        {
            foreach($affluenza as $giornata=>$curAffluenza)
            {
                AA_Log::Log(__METHOD__." - ".print_r($curAffluenza,true),100);
                {
                    $modify_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneAffluenzaModifyDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', giornata: "'.strtolower($giornata).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    $trash_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneAffluenzaTrashDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', giornata: "'.strtolower($giornata).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    $ops="<div class='AA_DataTable_Ops'><span>&nbsp;</span><a class='AA_DataTable_Ops_Button' title='Modifica dato' onClick='".$modify_op."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina dato' onClick='".$trash_op."'><span class='mdi mdi-trash-can'></span></a><span>&nbsp;</span></div>";
                }
                $data[]=array("id"=>$giornata,"ops"=>$ops, "giornata"=>$giornata,"ore_12"=>$curAffluenza['ore_12'],"ore_19"=>$curAffluenza['ore_19'],"ore_22"=>$curAffluenza['ore_22']);
            }
            $table=new AA_JSON_Template_Generic($id."_View", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
        }
        else
        {
            $table=new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti dati.</span></div>"));
        }

        $layout->AddRow($table);
        return $layout;
    }

    //Template dlg modify user
    public function Template_GetSierComuneOperatoriViewDlg($object=null,$comune=null)
    {
        $id=static::AA_UI_PREFIX."_".static::AA_UI_WND_OPERATORI_COMUNALI;
        if(!($object instanceof AA_Sier)) return new AA_GenericWindowTemplate($id, "Gestione operatori comunali", $this->id);
        if(!($comune instanceof AA_SierComune)) return new AA_GenericWindowTemplate($id, "Gestione operatori comunali", $this->id);


        $wnd = new AA_GenericWindowTemplate($id, "Gestione operatori comune di ".$comune->GetProp("denominazione"), $this->id);

        $layout=$this->Template_GetSierComuneOperatoriViewLayout($object,$comune,$id);
        $wnd->AddView($layout);
        return $wnd;
    }

    //Template layout operatori comune
    public function Template_GetSierComuneOperatoriViewLayout($object=null,$comune=null,$id="")
    {
        if(!$object) $object=new AA_Sier($_REQUEST['id']);
        if(!$object->isValid())
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero della lista degli operatori.</span></div>")));
            return $layout;
        }

        if(!$comune) $comune = $object->GetComune($_REQUEST['id_comune']);
        if(!($comune instanceof AA_SierComune))
        {
            $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
            $layout->AddRow(new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Errore nel recupero della lista degli operatori.</span></div>")));
            return $layout;
        }

        $id.="_".static::AA_UI_LAYOUT_OPERATORI_COMUNALI;
        $layout=new AA_JSON_Template_Layout($id,array("type"=>"clean", "filtered"=>true,"filter_id"=>$id));
        
        $toolbar=new AA_JSON_Template_Toolbar($id."_Toolbar",array("height"=>38,"css"=>array("border-bottom"=>"1px solid #dadee0 !important")));

        $filter="";

        if($filter=="") $filter="<span class='AA_Label AA_Label_LightOrange'>tutti</span>";
        
        $toolbar->addElement(new AA_JSON_Template_Generic($id."_FilterLabel",array("view"=>"label","align"=>"left","label"=>"<div>Visualizza: ".$filter."</div>")));
        //$toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        
        //$toolbar->addElement(new AA_JSON_Template_Generic("",array("view"=>"spacer")));
        
        //filtro
        $modify_btn=new AA_JSON_Template_Generic($id."_FilterUtenti_btn",array(
            "view"=>"button",
             "type"=>"icon",
             "icon"=>"mdi mdi-filter-cog",
             "label"=>"Filtra",
             "align"=>"right",
             "width"=>120,
             "tooltip"=>"Opzioni di filtraggio",
             "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneOperatoriFilterDlg\",postParams: module.getRuntimeValue('" . $id . "','filter_data'), module: \"" . $this->id . "\"},'".$this->id."')"
        ));
        //$toolbar->AddElement($modify_btn);

                 //filtro
        $modify_btn=new AA_JSON_Template_Generic($id."_AddNewOperatore_btn",array(
            "view"=>"button",
             "type"=>"icon",
             "icon"=>"mdi mdi-account-plus",
             "label"=>"Aggiungi",
             "css"=>"webix_primary",
             "align"=>"right",
             "width"=>120,
             "tooltip"=>"Aggiungi nuovo operatore",
             "click"=>"AA_MainApp.utils.callHandler('dlg', {task:\"GetSierComuneOperatoriAddNewDlg\", postParams: {id: ".$object->GetId().",id_comune:".$comune->GetProp('id').",refresh: 1,refresh_obj_id:\"$id\"},module: \"" . $this->id . "\"},'".$this->id."')"
         ));
         $toolbar->AddElement($modify_btn);

        
        $layout->addRow($toolbar);

        $columns=array(
            array("id"=>"lastLogin","header"=>array("<div style='text-align: center'>Data Login</div>",array("content"=>"textFilter")),"width"=>150, "sort"=>"text","css"=>array("text-align"=>"center")),
            array("id"=>"denominazione","header"=>array("<div style='text-align: center'>Cognome e nome</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"left"),"sort"=>"text"),
            array("id"=>"cf","header"=>array("<div style='text-align: center'>Codice fiscale</div>",array("content"=>"textFilter")),"fillspace"=>true, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"email","header"=>array("<div style='text-align: center'>Email</div>",array("content"=>"textFilter")),"width"=>300, "css"=>array("text-align"=>"center"),"sort"=>"text"),            
            array("id"=>"ruolo","header"=>array("<div style='text-align: center'>Ruolo</div>",array("content"=>"selectFilter")),"width"=>250, "css"=>array("text-align"=>"center"),"sort"=>"text"),
            array("id"=>"ops","header"=>"<div style='text-align: center'>Operazioni</div>","width"=>120, "css"=>array("text-align"=>"center"))
        );
        
        $utenti=$comune->GetOperatori(true);
        $ruolo=array(1=>"Caricamento dati",2=>"Caricamento rendiconti",3=>"Caricamento dati e rendiconti");
        $data=array();
        if(sizeof($utenti) > 0)
        {
            foreach($utenti as $curUser)
            {
                {
                    $modify_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneOperatoriModifyDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', cf: "'.strtolower($curUser['cf']).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    $trash_op='AA_MainApp.utils.callHandler("dlg", {task:"GetSierComuneOperatoriTrashDlg",postParams: {id: '.$object->GetId().',id_comune:'.$comune->GetProp('id').', cf: "'.strtolower($curUser['cf']).'",refresh: 1,refresh_obj_id:"'.$id.'"}},"'.$this->id.'");';
                    $ops="<div class='AA_DataTable_Ops'><span>&nbsp;</span><a class='AA_DataTable_Ops_Button' title='Modifica operatore' onClick='".$modify_op."'><span class='mdi mdi-pencil'></span></a><a class='AA_DataTable_Ops_Button_Red' title='Elimina operatore' onClick='".$trash_op."'><span class='mdi mdi-trash-can'></span></a><span>&nbsp;</span></div>";
                }
                $data[]=array("id"=>$curUser['cf'],"ops"=>$ops, "lastLogin"=>$curUser['lastlogin'],"email"=>$curUser['email'],"denominazione"=>$curUser['cognome']." ".$curUser['nome'],"cf"=>strtoupper($curUser['cf']),"ruolo"=>$ruolo[$curUser['ruolo']]);
            }
            $table=new AA_JSON_Template_Generic($id."_View", array(
                "view"=>"datatable",
                "scrollX"=>false,
                "select"=>false,
                "css"=>"AA_Header_DataTable",
                "hover"=>"AA_DataTable_Row_Hover",
                "columns"=>$columns,
                "data"=>$data
            ));
        }
        else
        {
            $table=new AA_JSON_Template_Template($id."_vuoto",array("type"=>"clean","template"=>"<div style='display: flex; align-items: center; justify-content: center; width:100%;height:100%'><span>Non sono presenti operatori.</span></div>"));
        }

        $layout->AddRow($table);
        return $layout;
    }

    //Task object content (da specializzare)
    public function Task_GetObjectContent($task)
    {
        if($_REQUEST['object']==static::AA_UI_PREFIX."_".static::AA_UI_WND_OPERATORI_COMUNALI."_".static::AA_UI_LAYOUT_OPERATORI_COMUNALI)
        {
            $content = array("id" =>static::AA_UI_PREFIX."_".static::AA_UI_WND_OPERATORI_COMUNALI."_".static::AA_UI_LAYOUT_OPERATORI_COMUNALI, "content" => $this->Template_GetSierComuneOperatoriViewLayout(null,null,static::AA_UI_PREFIX."_".static::AA_UI_WND_OPERATORI_COMUNALI)->toArray());
            $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
            $task->SetContent(json_encode($content),true);
            return true;
        }

        if($_REQUEST['object']==static::AA_UI_PREFIX."_".static::AA_UI_WND_RISULTATI_COMUNALI."_".static::AA_UI_LAYOUT_RISULTATI_COMUNALI)
        {
            $content = array("id" =>static::AA_UI_PREFIX."_".static::AA_UI_WND_RISULTATI_COMUNALI."_".static::AA_UI_LAYOUT_RISULTATI_COMUNALI, "content" => $this->Template_GetSierComuneRisultatiViewLayout(null,null,static::AA_UI_PREFIX."_".static::AA_UI_WND_RISULTATI_COMUNALI)->toArray());
            $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
            $task->SetContent(json_encode($content),true);
            return true;
        }

        if($_REQUEST['object']==static::AA_UI_PREFIX."_".static::AA_UI_WND_AFFLUENZA_COMUNALE."_".static::AA_UI_LAYOUT_AFFLUENZA_COMUNALE)
        {
            $content = array("id" =>static::AA_UI_PREFIX."_".static::AA_UI_WND_AFFLUENZA_COMUNALE."_".static::AA_UI_LAYOUT_AFFLUENZA_COMUNALE, "content" => $this->Template_GetSierComuneAffluenzaViewLayout(null,null,static::AA_UI_PREFIX."_".static::AA_UI_WND_AFFLUENZA_COMUNALE)->toArray());
            $task->SetStatus(AA_GenericTask::AA_STATUS_SUCCESS);
            $task->SetContent(json_encode($content),true);
            return true;
        }
        
        return $this->Task_GetGenericObjectContent($task, $_REQUEST);
    }

    //Task action menù
    public function Task_GetActionMenu($task)
    {
        $sTaskLog = "<status id='status'>0</status><content id='content' type='json' encode='base64'>";

        $content = "";

        switch ($_REQUEST['section']) {
            case static::AA_UI_PREFIX . "_" . static::AA_UI_SECTION_OC_DESKTOP:
                $content = $this->TemplateActionMenu_OC_Desktop();
                break;
            default:
                return parent::Task_GetActionMenu($task);
        }

        if ($content != "") $sTaskLog .= $content->toBase64();

        $sTaskLog .= "</content>";

        $task->SetLog($sTaskLog);

        return true;
    }

     //Template OC login context menu
     public function TemplateActionMenu_OC_Desktop()
     {
         $menu=new AA_JSON_Template_Generic(
             static::AA_UI_PREFIX."_".static::AA_ID_SECTION_OC_DESKTOP."_ActionMenu",array(
             "view"=>"contextmenu",
             "data"=>array(array(
                    "id"=>static::AA_UI_PREFIX."_".static::AA_ID_SECTION_OC_DESKTOP."_ActionMenuItem_Aggiorna",
                    "value"=>"Aggiorna",
                    "icon"=>"mdi mdi-reload",
                    "module_id" => $this->GetId(),
                    "handler"=>"OC_RefreshSection",
                    "handler_params"=>array(static::AA_UI_PREFIX."_".static::AA_UI_SECTION_OC_DESKTOP,true)
                 ))
             ));
         
         return $menu;
     }

    //Template dettaglio allegati
    public function TemplateDettaglio_Abilitazioni($object=null,$id="")
    {
        #Abilitazioni----------------------------------
        $curId=$id."_Layout_Abilitazioni";
        $layout=new AA_JSON_Template_Layout($curId,array("type"=>"clean","title"=>"Abilitazioni di caricamento per gli operatori ed esportazione info per il sito istituzionale.","gravity"=>10));

        //oggetto non valido
        if(!($object instanceof AA_Sier) || !$object->isValid())
        {
            $layout->addRow(new AA_JSON_Template_Generic());
            return $layout;
        }

        $abilitazioni=$object->GetAbilitazioni();

        //Abilitazione accesso operatori
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_ACCESSO_OPERATORI) > 0) 
        {
            $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        }
        $campo=new AA_JSON_Template_Template($id."_AccessoOperatori",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Accesso operatori:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------

        //Abilitazione modifica info generali
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_DATIGENERALI) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_DatiGenerali",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Info generali Comune:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------

        //Abilitazione modifica corpo elettorale
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_CORPO_ELETTORALE) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_DatiGenerali",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Corpo elettorale:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------
        
        //Abilitazione modifica comunicazioni
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_COMUNICAZIONI) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_Comunicazioni",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Comunicazioni:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------

        //Abilitazione caricamento affluenza
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_AFFLUENZA) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_Affluenza",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Affluenza:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------

        //Abilitazione caricamento risultati
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RISULTATI) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_Risultati",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Risultati:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #--------------------------------------
        
        //Abilitazione caricamento rendicontazione
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_CARICAMENTO_RENDICONTI) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_Rendiconti",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Rendiconti:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        $layout->addCol($campo);
        #----------------------------------------

        //Abilitazione esportazione affluenza
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_EXPORT_AFFLUENZA) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_ExportAffluenza",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Esportazione affluenza:","value"=>$value),
            "css"=>array("border-right"=>"1px solid #dadee0 !important")
        ));
        #----------------------------------------
        //$layout->addCol($campo);

        //Abilitazione esportazione risultati
        $value="<span class='AA_Label AA_Label_LightGray'>Disabilitato</span>";
        $color="#000000";
        if(($abilitazioni & AA_Sier_Const::AA_SIER_FLAG_EXPORT_RISULTATI) > 0)  $value="<span class='AA_Label AA_Label_LightGreen'>Abilitato</span>";
        $campo=new AA_JSON_Template_Template($id."_ExportRisultati",array(
            "template"=>"<span style='font-weight:700'>#title#</span><div>#value#</div>",
            "gravity"=>1,
            "data"=>array("title"=>"Esportazione risultati:","value"=>$value)
        ));
        #--------------------------------------

        $layout->addCol($campo);

        return $layout;
    }
}

#Classe template per la gestione del report pdf dell'oggetto
Class AA_SierPublicReportTemplateView extends AA_GenericObjectTemplateView
{
    public function __construct($id="AA_SierPublicReportTemplateView",$parent=null,$object=null)
    {
        if(!($object instanceof AA_Sier))
        {
            AA_Log::Log(__METHOD__." - oggetto non valido.", 100,false,true);
            return;
        }

        //Chiama il costruttore della classe base
        parent::__construct($id,$parent,$object);
        
        $this->SetStyle("width: 100%; display:flex; flex-direction: row; align-items: center; justify-content: space-between; border-bottom: 1px solid  gray; height: 100%");

        #Ufficio----------------------------------
        $struct=$object->GetStruct();
        $struct_desc=$struct->GetAssessorato();
        if($struct->GetDirezione(true) > 0) $struct_desc.="<br>".$struct->GetDirezione();
        if($struct->GetServizio(true) >0) $struct_desc.="<br>".$struct->GetServizio();

        $ufficio=new AA_XML_Div_Element($id."_ufficio",$this);
        $ufficio->SetStyle('width:30%; font-size: .6em; padding: .1em');
        $ufficio->SetText($struct_desc);
        #-----------------------------------------------
        
        #descrizione----------------------------------
        $oggetto=new AA_XML_Div_Element($id."_descrizione",$this);
        $oggetto->SetStyle('width:30%; font-size: .6em; padding: .1em; text-align: justify');
        $oggetto->SetText(substr($object->GetName(),0,320));
        #-----------------------------------------------

        /*if($object->GetTipo(true) == AA_Sier_Const::AA_TIPO_PROVVEDIMENTO_SCELTA_CONTRAENTE)
        {
            #modalità----------------------------------
            $oggetto=new AA_XML_Div_Element($id."_modalita",$this);
            $oggetto->SetStyle('width:20%; font-size: .5em; padding: .1em');
            $oggetto->SetText($object->GetModalita());
            #-----------------------------------------------
        }
        else
        {
            #contraente----------------------------------
            $oggetto=new AA_XML_Div_Element($id."_contraente",$this);
            $oggetto->SetStyle('width:20%; font-size: .6em; padding: .1em');
            $oggetto->SetText($object->GetProp("Contraente"));
            #-----------------------------------------------                        
        }*/

        #estremi----------------------------------
        $oggetto=new AA_XML_Div_Element($id."_estremi",$this);
        $oggetto->SetStyle('width:19%; font-size: .6em; padding: .1em');
        $oggetto->SetText($object->GetProp("Estremi"));
        #-----------------------------------------------        
    }
}

//Classe per la gestione degli allegati
Class AA_SierAllegati
{
    protected $id=0;
    public function GetId()
    {
        return $this->id;
    }
    public function SetId($id=0)
    {
        $this->id=$id;
    }
    
    protected $url="";
    public function GetUrl()
    {
        return $this->url;
    }
    public function SetUrl($url="")
    {
        $this->url=$url;
    }
    
    protected $sTipo="";
    public function GetTipo($asArray=false)
    {
        if($asArray) return explode(",",$this->sTipo);
        return $this->sTipo;
    }
    public function SetTipo($val="")
    {
        $this->sTipo=$val;
    }
    public function GetTipoDescr($asArray=false)
    {
        $tipi=AA_Sier_Const::GetTipoAllegati();
        
        $result=array();
        $tipo=explode(",",$this->sTipo);

        foreach($tipi as $curTipo=>$desc)
        {
            if(array_search($curTipo,$tipo)!==false) $result[$curTipo]=$desc;
        }

        if($asArray) return $result;
        return implode(",",$result);
    }

    protected $sDestinatari="";
    public function GetDestinatari($asArray=false)
    {
        if($asArray) return explode(",",$this->sDestinatari);
        return $this->sDestinatari;
    }
    public function SetDestinatari($val="")
    {
        if(is_array($val)) $this->sDestinatari=implode(",",$val);
        else $this->sDestinatari=$val;
    }
    public function GetDestinatariDescr($asArray=false)
    {
        $destinatari=AA_Sier_Const::GetDestinatari();
        
        $result=array();
        $destinatario=explode(",",$this->sDestinatari);

        foreach($destinatari as $curDestinatario=>$desc)
        {
            if(array_search($curDestinatario,$destinatario)!==false) $result[$curDestinatario]=$desc;
        }

        if($asArray) return $result;
        return implode(",",$result);
    }

    public function toArray($full=false)
    {
       get_object_vars($this);
    }
    protected $estremi="";
    public function GetEstremi()
    {
        return $this->estremi;
    }
    public function SetEstremi($val="")
    {
        $this->estremi=substr($val,0,254);
    }

    protected $sAggiornamento="";
    public function GetAggiornamento()
    {
        return $this->sAggiornamento;
    }
    public function SetAggiornamento($val="")
    {
        $this->sAggiornamento=$val;
    }

    protected $sFile="";
    public function GetFileHash()
    {
        return $this->sFile;
    }
    public function SetFileHash($val="")
    {
        $this->sFile=$val;
    }

    public function GetFilePath()
    {
        if(is_file(AA_Const::AA_UPLOADS_PATH.AA_Sier_Const::AA_SIER_ALLEGATI_PATH."/".$this->id.".pdf"))
        {
            return AA_Const::AA_UPLOADS_PATH.AA_Sier_Const::AA_SIER_ALLEGATI_PATH."/".$this->id.".pdf";
        }
        
        return "";
    }

    public function GetFileLocalPath()
    {        
        return $this->GetFilePath();
    }
    
    public function GetFilePublicPath()
    {
        if(is_file(AA_Const::AA_UPLOADS_PATH.AA_Sier_Const::AA_SIER_ALLEGATI_PATH."/".$this->id.".pdf"))
        {
            return AA_Sier_Const::AA_WWW_ROOT.AA_Sier_Const::AA_SIER_ALLEGATI_PUBLIC_PATH."?id=".$this->id."&id_sier=".$this->id_sier;
        }
        
        return "";
    }
    
    protected $id_sier=0;
    public function GetIdSier()
    {
        return $this->id_sier;
    }
    public function SetIdSier($id=0)
    {
        $this->id_sier=$id;
    }

    protected $nOrdine=0;
    public function GetOrdine()
    {
        return $this->nOrdine;
    }
    public function SetOrdine($val=0)
    {
        $this->nOrdine=$val;
    }
    
    public function __construct($id=0,$id_sier=0,$estremi="",$url="",$file="",$tipo="",$aggiornamento="",$destinatari="",$ordine=0)
    {
        //AA_Log::Log(__METHOD__." id: $id, id_organismo: $id_organismo, tipo: $tipo, url: $url",100);
        
        $this->id=$id;
        $this->id_sier=$id_sier;
        $this->nOrdine=$ordine;
        $this->url=$url;
        $this->estremi=$estremi;
        $this->sFile=$file;
        $this->sTipo=$tipo;
        $this->sDestinatari=$destinatari;
        $this->sAggiornamento=$aggiornamento;
    }
    
    //Download del documento
    public function Download($embed=false)
    {
        if($this->sFile=="")
        {
            die($this->url);
        }

        $storage=AA_Storage::GetInstance();
        if(!$storage->IsValid() )
        {
            die("file non trovato");
        }

        $file=$storage->GetFileByHash($this->sFile);
        if($file->IsValid())
        {
            header("Cache-control: private");
            header("Content-type: ".$file->GetMimeType());
            header("Content-Length: ".$file->GetFileSize());
            if(!$embed) header('Content-Disposition: attachment; filename="'.$file->GetName()."'");

            $fd = fopen ($file->GetFilePath(), "rb");
            echo fread ($fd, filesize ($file->GetFilePath()));
            fclose ($fd);
            die();
        }
        else
        {
            die("file non trovato");
        }
    }
}